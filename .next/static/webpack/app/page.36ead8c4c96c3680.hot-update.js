"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./utils/stigFamilyRecommendations.ts":
/*!********************************************!*\
  !*** ./utils/stigFamilyRecommendations.ts ***!
  \********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AUTO_UPDATE_CONFIG: () => (/* binding */ AUTO_UPDATE_CONFIG),\n/* harmony export */   STIG_DATABASE_METADATA: () => (/* binding */ STIG_DATABASE_METADATA),\n/* harmony export */   STIG_FAMILIES: () => (/* binding */ STIG_FAMILIES),\n/* harmony export */   applyMultipleStigUpdates: () => (/* binding */ applyMultipleStigUpdates),\n/* harmony export */   applyStigUpdate: () => (/* binding */ applyStigUpdate),\n/* harmony export */   checkForStigUpdates: () => (/* binding */ checkForStigUpdates),\n/* harmony export */   clearAllBackups: () => (/* binding */ clearAllBackups),\n/* harmony export */   exportStigDatabase: () => (/* binding */ exportStigDatabase),\n/* harmony export */   getAvailableBackups: () => (/* binding */ getAvailableBackups),\n/* harmony export */   getImplementationEffort: () => (/* binding */ getImplementationEffort),\n/* harmony export */   getNextUpdateCheck: () => (/* binding */ getNextUpdateCheck),\n/* harmony export */   getPendingUpdates: () => (/* binding */ getPendingUpdates),\n/* harmony export */   getStigDatabaseStatus: () => (/* binding */ getStigDatabaseStatus),\n/* harmony export */   getStigFamilyRecommendations: () => (/* binding */ getStigFamilyRecommendations),\n/* harmony export */   importStigDatabase: () => (/* binding */ importStigDatabase),\n/* harmony export */   performScheduledUpdateCheck: () => (/* binding */ performScheduledUpdateCheck),\n/* harmony export */   rollbackStigUpdate: () => (/* binding */ rollbackStigUpdate),\n/* harmony export */   setAutoUpdateEnabled: () => (/* binding */ setAutoUpdateEnabled)\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n/**\r\n * STIG Family Recommendation Engine\r\n * Analyzes security requirements and design elements to recommend applicable STIG families\r\n * \r\n * ⚠️  UPDATE FREQUENCY: This data is NOT automatically updated and requires manual maintenance\r\n * \r\n * RECOMMENDED UPDATE SCHEDULE:\r\n * - Quarterly review of STIG releases from DISA\r\n * - Monthly check of high-priority STIGs (Application Security, Web Server, etc.)\r\n * - Immediate updates for critical security STIGs\r\n * \r\n * OFFICIAL SOURCES TO MONITOR:\r\n * - DISA Cyber Exchange: https://public.cyber.mil/stigs/downloads/\r\n * - STIG Viewer: https://stigviewer.com/stigs\r\n * - DISA STIG RSS Feed: https://public.cyber.mil/stigs/rss/\r\n * \r\n * LAST MAJOR UPDATE: October 2025 (requires validation against official sources)\r\n * NEXT SCHEDULED REVIEW: January 2026\r\n * \r\n * The STIG catalog below contains common STIGs but versions, release dates, and requirement \r\n * counts are approximate and should be verified against official DISA releases before use.\r\n * \r\n * There are ~200 official STIGs available from DISA. This is a curated subset focused on\r\n * common enterprise technologies.\r\n */ // STIG Database Metadata - Track update status\nconst STIG_DATABASE_METADATA = {\n    lastUpdated: '2025-10-02',\n    lastValidated: '2025-09-01',\n    nextReviewDue: '2026-01-01',\n    totalStigFamilies: 0,\n    validatedFamilies: 0,\n    updateFrequency: 'Quarterly',\n    dataSources: [\n        'https://public.cyber.mil/stigs/downloads/',\n        'https://stigviewer.com/stigs',\n        'https://public.cyber.mil/stigs/rss/'\n    ],\n    criticalUpdatesNeeded: [],\n    updateNotes: 'Automatic STIG update checking available! Enable via setAutoUpdateEnabled(true)'\n};\n// Comprehensive STIG Family catalog - Should be verified against official DISA sources\n// Reference: https://stigviewer.com/stigs (~200 official STIGs available)\n// This is a curated subset of common enterprise STIGs\nconst STIG_FAMILIES = [\n    // Application & Web Server STIGs (Verified from stigviewer.com)\n    {\n        id: 'application-security-dev',\n        name: 'Application Security and Development Security Technical Implementation Guide',\n        version: 'V6',\n        releaseDate: '2025-02-12',\n        description: 'Security Technical Implementation Guide for Application Security and Development practices',\n        applicableSystemTypes: [\n            'Application',\n            'Development',\n            'Web Application',\n            'API',\n            'Software'\n        ],\n        triggerKeywords: [\n            'application',\n            'web app',\n            'api',\n            'development',\n            'software',\n            'code',\n            'programming',\n            'frontend',\n            'backend',\n            'secure coding',\n            'devsecops'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'IA',\n            'SC',\n            'SI',\n            'SA'\n        ],\n        priority: 'High',\n        actualRequirements: 165,\n        stigId: 'APSC-DV-000001',\n        validated: true\n    },\n    {\n        id: 'web-server-srg',\n        name: 'Web Server Security Requirements Guide',\n        version: 'V4',\n        releaseDate: '2025-02-12',\n        description: 'Security Requirements Guide for Web Servers',\n        applicableSystemTypes: [\n            'Web Server',\n            'HTTP',\n            'HTTPS',\n            'Web Application'\n        ],\n        triggerKeywords: [\n            'web server',\n            'http server',\n            'https',\n            'web',\n            'server',\n            'webapp',\n            'hosting'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 89,\n        stigId: 'SRG-APP-000001',\n        validated: true\n    },\n    {\n        id: 'application-server-srg',\n        name: 'Application Server Security Requirements Guide',\n        version: 'V4',\n        releaseDate: '2025-02-11',\n        description: 'Security Requirements Guide for Application Servers',\n        applicableSystemTypes: [\n            'Application Server',\n            'App Server',\n            'Middleware'\n        ],\n        triggerKeywords: [\n            'application server',\n            'app server',\n            'middleware',\n            'java',\n            'jee',\n            'j2ee'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 95,\n        stigId: 'SRG-APP-000002',\n        validated: true\n    },\n    {\n        id: 'apache-server-2-4-unix-server',\n        name: 'Apache Server 2.4 UNIX Server Security Technical Implementation Guide',\n        version: 'V3',\n        releaseDate: '2024-12-04',\n        description: 'Security Technical Implementation Guide for Apache HTTP Server 2.4 on UNIX',\n        applicableSystemTypes: [\n            'Web Server',\n            'Apache',\n            'HTTP',\n            'UNIX',\n            'Linux'\n        ],\n        triggerKeywords: [\n            'apache',\n            'httpd',\n            'web server',\n            'http',\n            'https',\n            'ssl',\n            'tls',\n            'unix',\n            'linux'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 93,\n        stigId: 'AS24-U1-000001',\n        validated: true\n    },\n    {\n        id: 'apache-server-2-4-unix-site',\n        name: 'Apache Server 2.4 UNIX Site Security Technical Implementation Guide',\n        version: 'V2',\n        releaseDate: '2025-02-12',\n        description: 'Security Technical Implementation Guide for Apache HTTP Server 2.4 UNIX Site configuration',\n        applicableSystemTypes: [\n            'Web Server',\n            'Apache',\n            'HTTP',\n            'UNIX',\n            'Linux'\n        ],\n        triggerKeywords: [\n            'apache',\n            'httpd',\n            'web server',\n            'site',\n            'virtual host',\n            'unix',\n            'linux'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 78,\n        stigId: 'AS24-U2-000001',\n        validated: true\n    },\n    {\n        id: 'apache-server-2-4-windows-server',\n        name: 'Apache Server 2.4 Windows Server Security Technical Implementation Guide',\n        version: 'V3',\n        releaseDate: '2025-02-12',\n        description: 'Security Technical Implementation Guide for Apache HTTP Server 2.4 on Windows',\n        applicableSystemTypes: [\n            'Web Server',\n            'Apache',\n            'HTTP',\n            'Windows'\n        ],\n        triggerKeywords: [\n            'apache',\n            'httpd',\n            'web server',\n            'windows',\n            'http',\n            'https'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 93,\n        stigId: 'AS24-W1-000001',\n        validated: true\n    },\n    {\n        id: 'apache-server-2-4-windows-site',\n        name: 'Apache Server 2.4 Windows Site Security Technical Implementation Guide',\n        version: 'V2',\n        releaseDate: '2025-02-12',\n        description: 'Security Technical Implementation Guide for Apache HTTP Server 2.4 Windows Site configuration',\n        applicableSystemTypes: [\n            'Web Server',\n            'Apache',\n            'HTTP',\n            'Windows'\n        ],\n        triggerKeywords: [\n            'apache',\n            'httpd',\n            'web server',\n            'site',\n            'virtual host',\n            'windows'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 78,\n        stigId: 'AS24-W2-000001',\n        validated: true\n    },\n    {\n        id: 'apache-tomcat-9',\n        name: 'Apache Tomcat Application Server 9 Security Technical Implementation Guide',\n        version: 'V3',\n        releaseDate: '2025-02-11',\n        description: 'Security Technical Implementation Guide for Apache Tomcat 9 Application Server',\n        applicableSystemTypes: [\n            'Application Server',\n            'Tomcat',\n            'Java',\n            'Servlet'\n        ],\n        triggerKeywords: [\n            'tomcat',\n            'java',\n            'servlet',\n            'jsp',\n            'application server',\n            'java ee'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 112,\n        stigId: 'TCAT-AS-000001',\n        validated: true\n    },\n    {\n        id: 'microsoft-iis-10-server',\n        name: 'Microsoft IIS 10.0 Server Security Technical Implementation Guide',\n        version: 'V3',\n        releaseDate: '2025-02-11',\n        description: 'Security Technical Implementation Guide for Microsoft Internet Information Services 10.0 Server',\n        applicableSystemTypes: [\n            'Web Server',\n            'IIS',\n            'Windows',\n            'HTTP'\n        ],\n        triggerKeywords: [\n            'iis',\n            'internet information services',\n            'web server',\n            'asp.net',\n            'windows web',\n            'microsoft'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 107,\n        stigId: 'IIST-SV-000001',\n        validated: true\n    },\n    {\n        id: 'microsoft-iis-10-site',\n        name: 'Microsoft IIS 10.0 Site Security Technical Implementation Guide',\n        version: 'V2',\n        releaseDate: '2025-02-11',\n        description: 'Security Technical Implementation Guide for Microsoft Internet Information Services 10.0 Site configuration',\n        applicableSystemTypes: [\n            'Web Server',\n            'IIS',\n            'Windows',\n            'HTTP'\n        ],\n        triggerKeywords: [\n            'iis',\n            'internet information services',\n            'site',\n            'website',\n            'asp.net',\n            'windows web'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 89,\n        stigId: 'IIST-SI-000001',\n        validated: true\n    },\n    {\n        id: 'jboss-eap-6-3',\n        name: 'JBoss Enterprise Application Platform 6.3 Security Technical Implementation Guide',\n        version: 'V2',\n        releaseDate: '2025-02-20',\n        description: 'Security Technical Implementation Guide for JBoss EAP 6.3',\n        applicableSystemTypes: [\n            'Application Server',\n            'JBoss',\n            'Java',\n            'Red Hat'\n        ],\n        triggerKeywords: [\n            'jboss',\n            'eap',\n            'wildfly',\n            'java',\n            'application server',\n            'red hat',\n            'java ee'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 98,\n        stigId: 'JBOS-AS-000001',\n        validated: true\n    },\n    {\n        id: 'ibm-websphere-liberty',\n        name: 'IBM WebSphere Liberty Server Security Technical Implementation Guide',\n        version: 'V2',\n        releaseDate: '2025-02-11',\n        description: 'Security Technical Implementation Guide for IBM WebSphere Liberty Server',\n        applicableSystemTypes: [\n            'Application Server',\n            'WebSphere',\n            'Java',\n            'IBM'\n        ],\n        triggerKeywords: [\n            'websphere',\n            'liberty',\n            'ibm',\n            'java',\n            'application server',\n            'java ee'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 104,\n        stigId: 'WBSL-AS-000001',\n        validated: true\n    },\n    {\n        id: 'microsoft-dotnet-4',\n        name: 'Microsoft DotNet Framework 4.0 Security Technical Implementation Guide',\n        version: 'V2',\n        releaseDate: '2025-02-20',\n        description: 'Security Technical Implementation Guide for Microsoft .NET Framework 4.0',\n        applicableSystemTypes: [\n            'Framework',\n            '.NET',\n            'Application',\n            'Windows'\n        ],\n        triggerKeywords: [\n            '.net',\n            'dotnet',\n            'framework',\n            'csharp',\n            'c#',\n            'asp.net',\n            'clr',\n            'microsoft'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI',\n            'SA'\n        ],\n        priority: 'High',\n        actualRequirements: 91,\n        stigId: 'APPNET-AS-000001',\n        validated: true\n    },\n    // Operating System STIGs\n    {\n        id: 'windows-server-2022',\n        name: 'Windows Server 2022 STIG',\n        version: 'V2',\n        releaseDate: '2025-02-25',\n        description: 'Security Technical Implementation Guide for Windows Server 2022',\n        applicableSystemTypes: [\n            'Windows',\n            'Server',\n            'Domain Controller',\n            'File Server'\n        ],\n        triggerKeywords: [\n            'windows',\n            'server 2022',\n            'windows server',\n            'active directory',\n            'domain',\n            'ntfs',\n            'registry',\n            'powershell'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'IA',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 292,\n        stigId: 'WN22-00-000010',\n        validated: false\n    },\n    {\n        id: 'windows-11',\n        name: 'Windows 11 STIG',\n        version: 'V2R2',\n        releaseDate: '2024-08-15',\n        description: 'Security Technical Implementation Guide for Windows 11',\n        applicableSystemTypes: [\n            'Windows',\n            'Workstation',\n            'Desktop',\n            'Laptop'\n        ],\n        triggerKeywords: [\n            'windows 11',\n            'windows',\n            'workstation',\n            'desktop',\n            'laptop',\n            'endpoint'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'IA',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 204,\n        stigId: 'WN11-00-000010',\n        validated: false\n    },\n    {\n        id: 'rhel-9',\n        name: 'Red Hat Enterprise Linux 9 STIG',\n        version: 'V2R1',\n        releaseDate: '2024-09-01',\n        description: 'Security Technical Implementation Guide for RHEL 9',\n        applicableSystemTypes: [\n            'Linux',\n            'RHEL',\n            'Red Hat',\n            'Unix'\n        ],\n        triggerKeywords: [\n            'linux',\n            'rhel',\n            'redhat',\n            'red hat',\n            'unix',\n            'bash',\n            'systemd',\n            'selinux',\n            'centos'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'IA',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 280,\n        stigId: 'RHEL-09-010001',\n        validated: false\n    },\n    {\n        id: 'ubuntu-22-04',\n        name: 'Canonical Ubuntu 22.04 LTS STIG',\n        version: 'V2R1',\n        releaseDate: '2024-07-01',\n        description: 'Security Technical Implementation Guide for Ubuntu 22.04 LTS',\n        applicableSystemTypes: [\n            'Linux',\n            'Ubuntu',\n            'Debian'\n        ],\n        triggerKeywords: [\n            'ubuntu',\n            'debian',\n            'apt',\n            'snap',\n            'systemd',\n            'apparmor'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'IA',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 267,\n        stigId: 'UBTU-22-010001',\n        validated: false\n    },\n    // Network Device STIGs\n    {\n        id: 'cisco-ios-xe-17',\n        name: 'Cisco IOS XE Router STIG',\n        version: 'V3R3',\n        releaseDate: '2024-04-19',\n        description: 'Security Technical Implementation Guide for Cisco IOS XE 17.x Routers',\n        applicableSystemTypes: [\n            'Router',\n            'Network',\n            'Cisco',\n            'Infrastructure'\n        ],\n        triggerKeywords: [\n            'cisco',\n            'ios xe',\n            'router',\n            'routing',\n            'ospf',\n            'bgp',\n            'snmp',\n            'acl'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC'\n        ],\n        priority: 'High',\n        actualRequirements: 152,\n        stigId: 'CISC-RT-000010',\n        validated: false\n    },\n    {\n        id: 'cisco-ios-switch',\n        name: 'Cisco IOS Switch STIG',\n        version: 'V3R2',\n        releaseDate: '2024-04-19',\n        description: 'Security Technical Implementation Guide for Cisco IOS Switches',\n        applicableSystemTypes: [\n            'Switch',\n            'Network',\n            'Cisco',\n            'Infrastructure'\n        ],\n        triggerKeywords: [\n            'cisco',\n            'ios',\n            'switch',\n            'switching',\n            'vlan',\n            'stp',\n            'port security'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC'\n        ],\n        priority: 'High',\n        actualRequirements: 141,\n        stigId: 'CISC-L2S-000010',\n        validated: false\n    },\n    // Virtualization and Cloud STIGs\n    {\n        id: 'vmware-vsphere-8',\n        name: 'VMware vSphere 8.0 STIG',\n        version: 'V2R1',\n        releaseDate: '2024-10-24',\n        description: 'Security Technical Implementation Guide for VMware vSphere 8.0',\n        applicableSystemTypes: [\n            'VMware',\n            'Virtualization',\n            'Hypervisor',\n            'Cloud'\n        ],\n        triggerKeywords: [\n            'vmware',\n            'vsphere',\n            'vcenter',\n            'esxi',\n            'virtualization',\n            'hypervisor',\n            'vm'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 234,\n        stigId: 'VMCH-80-000001',\n        validated: false\n    },\n    {\n        id: 'docker-enterprise',\n        name: 'Docker Enterprise 2.x STIG',\n        version: 'V2R2',\n        releaseDate: '2023-06-15',\n        description: 'Security Technical Implementation Guide for Docker Enterprise',\n        applicableSystemTypes: [\n            'Docker',\n            'Container',\n            'Cloud'\n        ],\n        triggerKeywords: [\n            'docker',\n            'container',\n            'containerization'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'Medium',\n        actualRequirements: 103,\n        stigId: 'DKER-EE-001000',\n        validated: false\n    },\n    {\n        id: 'kubernetes',\n        name: 'Kubernetes STIG',\n        version: 'V2R1',\n        releaseDate: '2024-05-10',\n        description: 'Security Technical Implementation Guide for Kubernetes',\n        applicableSystemTypes: [\n            'Container',\n            'Kubernetes',\n            'Orchestration',\n            'Cloud'\n        ],\n        triggerKeywords: [\n            'kubernetes',\n            'k8s',\n            'container orchestration',\n            'pod',\n            'deployment',\n            'service',\n            'cluster'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 97,\n        stigId: 'CNTR-K8-000110',\n        validated: false\n    },\n    // Web Server STIGs\n    {\n        id: 'apache-server-2-4',\n        name: 'Apache Server 2.4 STIG',\n        version: 'V3R1',\n        releaseDate: '2024-03-22',\n        description: 'Security Technical Implementation Guide for Apache HTTP Server 2.4',\n        applicableSystemTypes: [\n            'Web Server',\n            'Apache',\n            'HTTP'\n        ],\n        triggerKeywords: [\n            'apache',\n            'httpd',\n            'web server',\n            'http',\n            'https',\n            'ssl',\n            'tls'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 93,\n        stigId: 'AS24-U1-000010',\n        validated: false\n    },\n    {\n        id: 'microsoft-iis-10',\n        name: 'Microsoft IIS 10.0 Server STIG',\n        version: 'V3R1',\n        releaseDate: '2024-06-28',\n        description: 'Security Technical Implementation Guide for Microsoft Internet Information Services 10.0',\n        applicableSystemTypes: [\n            'Web Server',\n            'IIS',\n            'Windows',\n            'HTTP'\n        ],\n        triggerKeywords: [\n            'iis',\n            'internet information services',\n            'web server',\n            'asp.net',\n            'windows web'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 107,\n        stigId: 'IIST-SV-000101',\n        validated: false\n    },\n    // Database STIGs\n    {\n        id: 'microsoft-sql-server-2022',\n        name: 'MS SQL Server 2022 Instance STIG',\n        version: 'V1R1',\n        releaseDate: '2024-06-21',\n        description: 'Security Technical Implementation Guide for Microsoft SQL Server 2022',\n        applicableSystemTypes: [\n            'Database',\n            'SQL Server',\n            'Microsoft',\n            'RDBMS'\n        ],\n        triggerKeywords: [\n            'sql server',\n            'mssql',\n            'database',\n            'rdbms',\n            'tsql',\n            'sql',\n            'microsoft database'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 138,\n        stigId: 'SQL6-D0-000100',\n        validated: false\n    },\n    {\n        id: 'oracle-database-19c',\n        name: 'Oracle Database 19c STIG',\n        version: 'V3R1',\n        releaseDate: '2024-06-21',\n        description: 'Security Technical Implementation Guide for Oracle Database 19c',\n        applicableSystemTypes: [\n            'Database',\n            'Oracle',\n            'RDBMS'\n        ],\n        triggerKeywords: [\n            'oracle',\n            'database',\n            'rdbms',\n            'plsql',\n            'oracle db'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 156,\n        stigId: 'O121-C2-000100',\n        validated: false\n    },\n    {\n        id: 'postgresql-9x',\n        name: 'PostgreSQL 9.x STIG',\n        version: 'V2R5',\n        releaseDate: '2023-09-12',\n        description: 'Security Technical Implementation Guide for PostgreSQL Database 9.x',\n        applicableSystemTypes: [\n            'Database',\n            'PostgreSQL',\n            'RDBMS',\n            'Open Source'\n        ],\n        triggerKeywords: [\n            'postgresql',\n            'postgres',\n            'database',\n            'rdbms',\n            'sql',\n            'db',\n            'psql'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 122,\n        stigId: 'PGS9-00-000100',\n        validated: false\n    }\n];\n// Scoring weights for transparent and consistent recommendations\nconst SCORING_WEIGHTS = {\n    KEYWORD_MATCH_BASE: 2,\n    KEYWORD_MATCH_APP_SECURITY: 3,\n    KEYWORD_MATCH_TECH_SPECIFIC: 5,\n    CONTROL_FAMILY_MATCH: 3,\n    DESIGN_ELEMENT_KEYWORD: 2,\n    DESIGN_ELEMENT_TYPE: 3,\n    DESIGN_ELEMENT_EXACT_TECH: 6,\n    DEVELOPMENT_ENVIRONMENT_BONUS: 5,\n    INFRASTRUCTURE_PENALTY_IN_DEV: -3,\n    MIN_CRITICAL_CONFIDENCE: 80,\n    MIN_HIGH_CONFIDENCE: 60,\n    MIN_MEDIUM_CONFIDENCE: 40\n};\n/**\r\n * Analyzes requirements and design elements to recommend STIG families\r\n */ function getStigFamilyRecommendations(requirements, designElements) {\n    const recommendations = [];\n    for (const stigFamily of STIG_FAMILIES){\n        const recommendation = analyzeStigFamily(stigFamily, requirements, designElements);\n        if (recommendation.confidenceScore > 0) {\n            recommendations.push(recommendation);\n        }\n    }\n    // Sort by confidence score (descending - highest confidence first)\n    return recommendations.sort((a, b)=>{\n        return b.confidenceScore - a.confidenceScore;\n    });\n}\nfunction analyzeStigFamily(stigFamily, requirements, designElements) {\n    const scoreBreakdown = {\n        keywordMatches: 0,\n        controlFamilyMatches: 0,\n        designElementMatches: 0,\n        technologySpecificBonus: 0,\n        environmentBonus: 0,\n        penalties: 0\n    };\n    const matchingRequirements = [];\n    const matchingDesignElements = [];\n    const reasoning = [];\n    // Detect environment type\n    const isDevelopmentEnvironment = detectDevelopmentEnvironment(designElements);\n    const detectedTechnologies = detectTechnologies(designElements);\n    // Apply environment bonus for app security STIGs\n    if (isDevelopmentEnvironment && isApplicationSecurityStig(stigFamily.id)) {\n        scoreBreakdown.environmentBonus = SCORING_WEIGHTS.DEVELOPMENT_ENVIRONMENT_BONUS;\n        reasoning.push(\"✓ Development environment detected - application security controls are essential\");\n    }\n    // Analyze requirements\n    for (const req of requirements){\n        const reqText = \"\".concat(req.title, \" \").concat(req.description, \" \").concat(req.category, \" \").concat(req.controlFamily || '', \" \").concat(req.source).toLowerCase();\n        // Check for keyword matches\n        const keywordMatches = stigFamily.triggerKeywords.filter((keyword)=>reqText.includes(keyword.toLowerCase()));\n        if (keywordMatches.length > 0) {\n            const weight = isApplicationSecurityStig(stigFamily.id) ? SCORING_WEIGHTS.KEYWORD_MATCH_APP_SECURITY : SCORING_WEIGHTS.KEYWORD_MATCH_BASE;\n            scoreBreakdown.keywordMatches += keywordMatches.length * weight;\n            matchingRequirements.push(req.id);\n            reasoning.push('✓ Requirement \"'.concat(req.title, '\" matches: ').concat(keywordMatches.join(', ')));\n        }\n        // Check for control family matches\n        if (req.controlFamily && stigFamily.controlFamilies.includes(req.controlFamily)) {\n            scoreBreakdown.controlFamilyMatches += SCORING_WEIGHTS.CONTROL_FAMILY_MATCH;\n            if (!matchingRequirements.includes(req.id)) {\n                matchingRequirements.push(req.id);\n            }\n            reasoning.push(\"✓ Control family \".concat(req.controlFamily, \" applies to this STIG\"));\n        }\n    }\n    // Analyze design elements with enhanced technology detection\n    for (const element of designElements){\n        const elementText = \"\".concat(element.name, \" \").concat(element.description, \" \").concat(element.type, \" \").concat(element.technology || '').toLowerCase();\n        // Check for keyword matches\n        const keywordMatches = stigFamily.triggerKeywords.filter((keyword)=>elementText.includes(keyword.toLowerCase()));\n        // Check for system type matches\n        const typeMatches = stigFamily.applicableSystemTypes.filter((type)=>elementText.includes(type.toLowerCase()) || element.type.toLowerCase().includes(type.toLowerCase()));\n        if (keywordMatches.length > 0 || typeMatches.length > 0) {\n            // Check for exact technology matches\n            const hasExactTechMatch = checkExactTechnologyMatch(elementText, stigFamily.id, detectedTechnologies);\n            if (hasExactTechMatch) {\n                scoreBreakdown.technologySpecificBonus += SCORING_WEIGHTS.DESIGN_ELEMENT_EXACT_TECH;\n                reasoning.push(\"⭐ Direct technology match: \".concat(element.name, \" requires specific \").concat(stigFamily.name));\n            }\n            scoreBreakdown.designElementMatches += keywordMatches.length * SCORING_WEIGHTS.DESIGN_ELEMENT_KEYWORD + typeMatches.length * SCORING_WEIGHTS.DESIGN_ELEMENT_TYPE;\n            matchingDesignElements.push(element.id);\n            if (keywordMatches.length > 0) {\n                reasoning.push('✓ Design element \"'.concat(element.name, '\" matches: ').concat(keywordMatches.join(', ')));\n            }\n            if (typeMatches.length > 0) {\n                reasoning.push(\"✓ System type match: \".concat(typeMatches.join(', ')));\n            }\n        }\n    }\n    // Apply penalties for infrastructure STIGs in development environments\n    if (isDevelopmentEnvironment && isInfrastructureStig(stigFamily.id)) {\n        scoreBreakdown.penalties = SCORING_WEIGHTS.INFRASTRUCTURE_PENALTY_IN_DEV;\n        if (scoreBreakdown.keywordMatches + scoreBreakdown.designElementMatches > 0) {\n            reasoning.push(\"⚠ Infrastructure STIG - lower priority for application development\");\n        }\n    }\n    // Calculate total relevance score\n    const relevanceScore = Math.max(0, scoreBreakdown.keywordMatches + scoreBreakdown.controlFamilyMatches + scoreBreakdown.designElementMatches + scoreBreakdown.technologySpecificBonus + scoreBreakdown.environmentBonus + scoreBreakdown.penalties);\n    // Calculate confidence score (0-100)\n    const confidenceScore = calculateConfidenceScore(matchingRequirements.length, matchingDesignElements.length, stigFamily, detectedTechnologies);\n    // Determine implementation priority based on confidence score\n    let implementationPriority = 'Low';\n    if (confidenceScore >= SCORING_WEIGHTS.MIN_CRITICAL_CONFIDENCE && stigFamily.priority === 'High') {\n        implementationPriority = 'Critical';\n    } else if (confidenceScore >= SCORING_WEIGHTS.MIN_HIGH_CONFIDENCE || stigFamily.priority === 'High') {\n        implementationPriority = 'High';\n    } else if (confidenceScore >= SCORING_WEIGHTS.MIN_MEDIUM_CONFIDENCE || stigFamily.priority === 'Medium') {\n        implementationPriority = 'Medium';\n    }\n    return {\n        stigFamily,\n        confidenceScore,\n        matchingRequirements,\n        matchingDesignElements,\n        reasoning,\n        implementationPriority,\n        scoreBreakdown\n    };\n}\n/**\r\n * Detect if this is a development/application environment\r\n */ function detectDevelopmentEnvironment(designElements) {\n    return designElements.some((element)=>{\n        const text = \"\".concat(element.name, \" \").concat(element.description, \" \").concat(element.type, \" \").concat(element.technology || '').toLowerCase();\n        return text.includes('node') || text.includes('javascript') || text.includes('postgres') || text.includes('api') || text.includes('application') || text.includes('web') || text.includes('frontend') || text.includes('backend') || text.includes('database') || text.includes('server');\n    });\n}\n/**\r\n * Detect specific technologies in use\r\n */ function detectTechnologies(designElements) {\n    const technologies = new Set();\n    const techPatterns = {\n        'postgresql': /postgres(ql)?/i,\n        'docker': /docker|container/i,\n        'kubernetes': /k8s|kubernetes/i,\n        'apache': /apache|httpd/i,\n        'windows': /windows/i,\n        'linux': /linux|ubuntu|rhel|redhat/i\n    };\n    designElements.forEach((element)=>{\n        const text = \"\".concat(element.name, \" \").concat(element.description, \" \").concat(element.type, \" \").concat(element.technology || '').toLowerCase();\n        Object.entries(techPatterns).forEach((param)=>{\n            let [tech, pattern] = param;\n            if (pattern.test(text)) {\n                technologies.add(tech);\n            }\n        });\n    });\n    return technologies;\n}\n/**\r\n * Check if STIG is application security focused\r\n */ function isApplicationSecurityStig(stigId) {\n    return stigId.includes('application') || stigId.includes('web');\n}\n/**\r\n * Check if STIG is infrastructure focused\r\n */ function isInfrastructureStig(stigId) {\n    return stigId.includes('windows-server') || stigId.includes('cisco') || stigId.includes('vmware') || stigId.includes('rhel') || stigId.includes('ubuntu');\n}\n/**\r\n * Check for exact technology matches\r\n */ function checkExactTechnologyMatch(elementText, stigId, detectedTechs) {\n    const exactMatches = {\n        'postgresql-9x': [\n            'postgresql'\n        ],\n        'docker-enterprise': [\n            'docker'\n        ],\n        'kubernetes': [\n            'kubernetes'\n        ],\n        'apache-server-2-4': [\n            'apache'\n        ]\n    };\n    const requiredTechs = exactMatches[stigId];\n    if (!requiredTechs) return false;\n    return requiredTechs.some((tech)=>detectedTechs.has(tech));\n}\n/**\r\n * Calculate confidence score (0-100) based on match quality\r\n */ function calculateConfidenceScore(reqMatches, designMatches, stigFamily, detectedTechs) {\n    let score = 0;\n    // Base score from matches\n    score += Math.min(reqMatches * 10, 30); // Up to 30 points from requirements\n    score += Math.min(designMatches * 15, 40); // Up to 40 points from design elements\n    // Bonus for validated STIGs\n    if (stigFamily.validated) {\n        score += 10;\n    }\n    // Bonus for exact technology match\n    if (checkExactTechnologyMatch('', stigFamily.id, detectedTechs)) {\n        score += 20;\n    }\n    return Math.min(score, 100);\n}\n/**\r\n * Get STIG database status and update information\r\n */ function getStigDatabaseStatus() {\n    const totalFamilies = STIG_FAMILIES.length;\n    const validatedFamilies = STIG_FAMILIES.filter((family)=>family.validated).length;\n    // Check if any families need updates (older than 6 months)\n    const sixMonthsAgo = new Date();\n    sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);\n    const outdatedFamilies = STIG_FAMILIES.filter((family)=>{\n        const releaseDate = new Date(family.releaseDate);\n        return releaseDate < sixMonthsAgo && !family.validated;\n    });\n    // Check if review is overdue\n    const nextReviewDate = new Date(STIG_DATABASE_METADATA.nextReviewDue);\n    const isReviewOverdue = new Date() > nextReviewDate;\n    return {\n        ...STIG_DATABASE_METADATA,\n        totalStigFamilies: totalFamilies,\n        validatedFamilies: validatedFamilies,\n        validationPercentage: Math.round(validatedFamilies / totalFamilies * 100),\n        outdatedFamilies: outdatedFamilies.length,\n        isReviewOverdue,\n        daysUntilReview: Math.ceil((nextReviewDate.getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24)),\n        healthScore: calculateDatabaseHealthScore(validatedFamilies, totalFamilies, outdatedFamilies.length, isReviewOverdue)\n    };\n}\n/**\r\n * Calculate a health score for the STIG database (0-100)\r\n */ function calculateDatabaseHealthScore(validated, total, outdated, overdue) {\n    let score = 100;\n    // Deduct points for unvalidated families\n    const validationScore = validated / total * 40;\n    score = score - 40 + validationScore;\n    // Deduct points for outdated families\n    const outdatedPenalty = outdated / total * 30;\n    score -= outdatedPenalty;\n    // Deduct points if review is overdue\n    if (overdue) {\n        score -= 20;\n    }\n    return Math.max(0, Math.round(score));\n}\n/**\r\n * Get estimated implementation effort for recommended STIG families\r\n */ function getImplementationEffort(recommendations) {\n    const totalRequirements = recommendations.reduce((sum, rec)=>sum + rec.stigFamily.actualRequirements, 0);\n    const criticalCount = recommendations.filter((r)=>r.implementationPriority === 'Critical').length;\n    const highCount = recommendations.filter((r)=>r.implementationPriority === 'High').length;\n    const mediumCount = recommendations.filter((r)=>r.implementationPriority === 'Medium').length;\n    // Estimation: 1.5 hours per requirement on average (includes documentation, testing, review)\n    const estimatedHours = totalRequirements * 1.5;\n    const estimatedDays = Math.ceil(estimatedHours / 8);\n    return {\n        totalRequirements,\n        estimatedHours: Math.round(estimatedHours),\n        estimatedDays,\n        priorityCounts: {\n            critical: criticalCount,\n            high: highCount,\n            medium: mediumCount,\n            low: recommendations.length - criticalCount - highCount - mediumCount\n        }\n    };\n}\n// Default configuration\nconst AUTO_UPDATE_CONFIG = {\n    enabled: true,\n    checkFrequency: 'weekly',\n    lastCheck: '2025-10-02',\n    sources: {\n        disaRss: true,\n        stigViewer: true,\n        manual: false\n    },\n    notifications: {\n        email: false,\n        inApp: true\n    },\n    autoUpdatePreferences: {\n        criticalOnly: false,\n        requireManualApproval: false,\n        backupBeforeUpdate: true,\n        autoApply: true // NEW: Automatically apply updates without user intervention\n    }\n};\n/**\r\n * Check for STIG updates automatically\r\n * This function can be called periodically to check for new STIG releases\r\n */ async function checkForStigUpdates() {\n    const updates = [];\n    const now = new Date().toISOString().split('T')[0];\n    try {\n        // Check DISA RSS Feed for updates\n        if (AUTO_UPDATE_CONFIG.sources.disaRss) {\n            const rssUpdates = await checkDisaRssFeed();\n            updates.push(...rssUpdates);\n        }\n        // Check STIG Viewer for version changes\n        if (AUTO_UPDATE_CONFIG.sources.stigViewer) {\n            const stigViewerUpdates = await checkStigViewerUpdates();\n            updates.push(...stigViewerUpdates);\n        }\n        // Update last check time and metadata\n        AUTO_UPDATE_CONFIG.lastCheck = now;\n        STIG_DATABASE_METADATA.lastUpdated = now;\n        return updates;\n    } catch (error) {\n        console.error('Error checking for STIG updates:', error);\n        return [];\n    }\n}\n/**\r\n * Check stigviewer.com for STIG updates\r\n * stigviewer.com has better SSL certificates and more reliable access\r\n */ async function checkStigViewerSource() {\n    const updates = [];\n    try {\n        // Check high-priority STIGs on stigviewer.com\n        const priorityStigs = STIG_FAMILIES.filter((f)=>f.priority === 'High').slice(0, 5);\n        for (const family of priorityStigs){\n            try {\n                // Extract STIG name for URL (stigviewer uses lowercase with underscores)\n                const stigName = family.name.toLowerCase().replace(/security technical implementation guide/gi, '').replace(/\\bstig\\b/gi, '').replace(/[()]/g, '').trim().replace(/\\s+/g, '_').replace(/_+/g, '_').replace(/^_|_$/g, '');\n                // Fetch STIG page from stigviewer.com\n                const url = \"https://www.stigviewer.com/stig/\".concat(stigName, \"/\");\n                console.log(\"  \\uD83D\\uDCD6 Checking: \".concat(stigName));\n                const response = await fetch(url, {\n                    headers: {\n                        'Accept': 'text/html,application/xhtml+xml',\n                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n                    }\n                });\n                if (response.ok) {\n                    const html = await response.text();\n                    // Parse version from HTML (stigviewer has consistent markup)\n                    const versionMatch = html.match(/Version[:\\s]+([VRv\\d.-]+)/i);\n                    const dateMatch = html.match(/Release[^:]*:[^\\d]*(\\d{1,2}\\s+\\w+\\s+\\d{4}|\\d{4}-\\d{2}-\\d{2})/i);\n                    const requirementsMatch = html.match(/(\\d+)\\s+(?:rules?|requirements?)/i);\n                    if (versionMatch) {\n                        const latestVersion = versionMatch[1].trim();\n                        let latestDate = family.releaseDate; // Default to current\n                        if (dateMatch) {\n                            try {\n                                const parsedDate = new Date(dateMatch[1]);\n                                if (!isNaN(parsedDate.getTime())) {\n                                    latestDate = parsedDate.toISOString().split('T')[0];\n                                }\n                            } catch (e) {\n                            // Keep default date\n                            }\n                        }\n                        const reqCount = requirementsMatch ? parseInt(requirementsMatch[1]) : undefined;\n                        // Check if update is needed\n                        const localDate = new Date(family.releaseDate);\n                        const remoteDate = new Date(latestDate);\n                        if (latestVersion !== family.version || remoteDate > localDate) {\n                            updates.push({\n                                stigId: family.id,\n                                currentVersion: family.version,\n                                latestVersion: latestVersion,\n                                currentReleaseDate: family.releaseDate,\n                                latestReleaseDate: latestDate,\n                                updateAvailable: true,\n                                severity: determineSeverity(family, localDate, remoteDate),\n                                lastChecked: new Date().toISOString().split('T')[0],\n                                source: 'stigviewer.com',\n                                updateNotes: \"Found on stigviewer.com: \".concat(latestVersion),\n                                actualRequirements: reqCount,\n                                requirementCountChange: reqCount ? reqCount - family.actualRequirements : undefined\n                            });\n                            console.log(\"  ✅ Update: \".concat(family.version, \" → \").concat(latestVersion));\n                        } else {\n                            console.log(\"  ✓ Current: \".concat(family.version));\n                        }\n                    }\n                }\n                // Rate limiting: 200ms between requests\n                await new Promise((resolve)=>setTimeout(resolve, 200));\n            } catch (error) {\n                console.debug(\"  ⏩ Skip \".concat(family.id));\n            }\n        }\n    } catch (error) {\n        console.error('Error checking stigviewer.com:', error);\n        throw error;\n    }\n    return updates;\n}\n/**\r\n * Check DISA RSS Feed for new STIG releases\r\n * Primary source: stigviewer.com (better reliability, proper SSL)\r\n * Fallback: DISA RSS feed\r\n */ async function checkDisaRssFeed() {\n    const updates = [];\n    try {\n        console.log('🔍 Checking STIG sources for updates...');\n        // Try stigviewer.com first (more reliable, better SSL)\n        try {\n            console.log('📚 Fetching from stigviewer.com...');\n            const stigViewerUpdates = await checkStigViewerSource();\n            if (stigViewerUpdates.length > 0) {\n                console.log(\"✅ Found \".concat(stigViewerUpdates.length, \" updates from stigviewer.com\"));\n                return stigViewerUpdates;\n            }\n            console.log('ℹ️ No updates found on stigviewer.com, trying DISA RSS...');\n        } catch (error) {\n            console.warn('⚠️ stigviewer.com unavailable, trying DISA RSS...', error);\n        }\n        // Fallback to DISA RSS\n        console.log('📡 Checking DISA RSS feed...');\n        // Determine if we're in browser or server context\n        const isBrowser = \"object\" !== 'undefined';\n        let response;\n        let data;\n        if (isBrowser) {\n            // Browser: use our API proxy to avoid CORS\n            response = await fetch('/api/fetch-disa-rss');\n            if (!response.ok) {\n                console.warn('⚠️ DISA RSS feed unavailable, falling back to date-based checks');\n                return checkByDateOnly();\n            }\n            data = await response.json();\n        } else {\n            // Server: In server context, use the API proxy to avoid SSL certificate issues\n            // with government websites that may use custom CAs\n            console.log('🌐 Fetching via proxy (server-side)...');\n            try {\n                var _data_releases;\n                // Use absolute URL to our own API proxy\n                const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';\n                response = await fetch(\"\".concat(baseUrl, \"/api/fetch-disa-rss\"));\n                if (!response.ok) {\n                    console.warn('⚠️ DISA RSS feed unavailable, falling back to date-based checks');\n                    return checkByDateOnly();\n                }\n                // Parse the JSON response from our proxy\n                data = await response.json();\n                // Parse the JSON response from our proxy\n                data = await response.json();\n                console.log(\"✅ Fetched \".concat(((_data_releases = data.releases) === null || _data_releases === void 0 ? void 0 : _data_releases.length) || 0, \" items via proxy\"));\n            } catch (error) {\n                console.error('❌ Error fetching via proxy:', error);\n                return checkByDateOnly();\n            }\n        }\n        if (data.success && data.releases) {\n            // Parse RSS data and compare with our STIG families\n            for (const family of STIG_FAMILIES){\n                // Look for matching STIG in the RSS feed\n                const match = data.releases.find((release)=>release.name.toLowerCase().includes(family.name.toLowerCase().split(' ')[0]) || release.stigId === family.stigId);\n                if (match) {\n                    const localDate = new Date(family.releaseDate);\n                    const remoteDate = new Date(match.releaseDate);\n                    if (remoteDate > localDate) {\n                        updates.push({\n                            stigId: family.id,\n                            currentVersion: family.version,\n                            latestVersion: match.version || 'Unknown',\n                            currentReleaseDate: family.releaseDate,\n                            latestReleaseDate: match.releaseDate,\n                            updateAvailable: true,\n                            severity: determineSeverity(family, localDate, remoteDate),\n                            lastChecked: new Date().toISOString().split('T')[0],\n                            source: 'DISA RSS',\n                            updateNotes: \"New version available: \".concat(match.version || 'Unknown', \" (Released: \").concat(match.releaseDate, \")\")\n                        });\n                    }\n                }\n            }\n        }\n        console.log(\"✅ Found \".concat(updates.length, \" updates from DISA RSS\"));\n    } catch (error) {\n        console.error('❌ Error checking DISA RSS feed:', error);\n        // Fallback to date-based checking\n        return checkByDateOnly();\n    }\n    return updates;\n}\n/**\r\n * Fallback: Check by date only if RSS is unavailable\r\n */ function checkByDateOnly() {\n    const updates = [];\n    const sixMonthsAgo = new Date();\n    sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);\n    for (const family of STIG_FAMILIES){\n        const releaseDate = new Date(family.releaseDate);\n        if (releaseDate < sixMonthsAgo && !family.validated) {\n            updates.push({\n                stigId: family.id,\n                currentVersion: family.version,\n                currentReleaseDate: family.releaseDate,\n                updateAvailable: true,\n                severity: 'medium',\n                lastChecked: new Date().toISOString().split('T')[0],\n                source: 'Date Check',\n                updateNotes: 'STIG is older than 6 months - check DISA for updates'\n            });\n        }\n    }\n    return updates;\n}\n/**\r\n * Determine update severity based on age and type\r\n */ function determineSeverity(family, localDate, remoteDate) {\n    const monthsDiff = (remoteDate.getTime() - localDate.getTime()) / (1000 * 60 * 60 * 24 * 30);\n    // Critical: Security-focused STIGs with major version differences\n    if (family.priority === 'High' && monthsDiff > 6) return 'critical';\n    // High: High-priority STIGs or significant time difference\n    if (family.priority === 'High' || monthsDiff > 4) return 'high';\n    // Medium: Moderate priority or time difference\n    if (monthsDiff > 2) return 'medium';\n    return 'low';\n}\n/**\r\n * Check STIG Viewer for version updates\r\n */ async function checkStigViewerUpdates() {\n    const updates = [];\n    try {\n        console.log('Checking STIG Viewer for updates...');\n        // Placeholder for STIG Viewer API calls\n        // In production, this would:\n        // 1. Query stigviewer.com API (if available) or scrape data\n        // 2. Compare versions with current data\n        // 3. Identify outdated STIGs\n        // For now, check for STIGs older than 6 months\n        const sixMonthsAgo = new Date();\n        sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);\n        for (const family of STIG_FAMILIES){\n            const releaseDate = new Date(family.releaseDate);\n            if (releaseDate < sixMonthsAgo && !family.validated) {\n                updates.push({\n                    stigId: family.id,\n                    currentVersion: family.version,\n                    currentReleaseDate: family.releaseDate,\n                    updateAvailable: true,\n                    severity: 'medium',\n                    lastChecked: new Date().toISOString().split('T')[0],\n                    source: 'STIG Viewer',\n                    updateNotes: 'STIG is older than 6 months - check for newer version'\n                });\n            }\n        }\n    } catch (error) {\n        console.error('Error checking STIG Viewer:', error);\n    }\n    return updates;\n}\n/**\r\n * Get pending updates that need attention\r\n */ function getPendingUpdates() {\n    // In a real implementation, this would return cached update results\n    // For now, return a simulated list\n    return [\n        {\n            stigId: 'application-security-dev',\n            currentVersion: 'V6',\n            latestVersion: 'V7',\n            currentReleaseDate: '2025-02-12',\n            latestReleaseDate: '2025-09-15',\n            updateAvailable: true,\n            severity: 'high',\n            lastChecked: '2025-10-02',\n            source: 'DISA RSS',\n            updateNotes: 'New version available with security enhancements'\n        },\n        {\n            stigId: 'web-server-srg',\n            currentVersion: 'V4',\n            currentReleaseDate: '2025-02-12',\n            updateAvailable: true,\n            severity: 'medium',\n            lastChecked: '2025-10-02',\n            source: 'STIG Viewer',\n            updateNotes: 'Version validation needed against official source'\n        }\n    ];\n}\n/**\r\n * Enable or disable automatic update checking\r\n */ function setAutoUpdateEnabled(enabled) {\n    AUTO_UPDATE_CONFIG.enabled = enabled;\n    if (enabled) {\n        console.log('✅ Automatic STIG update checking enabled');\n        console.log(\"\\uD83D\\uDCC5 Check frequency: \".concat(AUTO_UPDATE_CONFIG.checkFrequency));\n        console.log(\"\\uD83D\\uDD14 Notifications: \".concat(AUTO_UPDATE_CONFIG.notifications.inApp ? 'In-app' : 'Disabled'));\n    } else {\n        console.log('❌ Automatic STIG update checking disabled');\n    }\n}\n/**\r\n * Simulate periodic update check (would be called by a scheduler)\r\n */ async function performScheduledUpdateCheck() {\n    if (!AUTO_UPDATE_CONFIG.enabled) {\n        return;\n    }\n    const lastCheck = new Date(AUTO_UPDATE_CONFIG.lastCheck);\n    const now = new Date();\n    const daysSinceLastCheck = Math.floor((now.getTime() - lastCheck.getTime()) / (1000 * 60 * 60 * 24));\n    let shouldCheck = false;\n    switch(AUTO_UPDATE_CONFIG.checkFrequency){\n        case 'daily':\n            shouldCheck = daysSinceLastCheck >= 1;\n            break;\n        case 'weekly':\n            shouldCheck = daysSinceLastCheck >= 7;\n            break;\n        case 'monthly':\n            shouldCheck = daysSinceLastCheck >= 30;\n            break;\n    }\n    if (shouldCheck) {\n        console.log('🔍 Performing scheduled STIG update check...');\n        const updates = await checkForStigUpdates();\n        if (updates.length > 0) {\n            console.log(\"\\uD83D\\uDCCB Found \".concat(updates.length, \" potential updates\"));\n            // Automatically apply updates if autoApply is enabled\n            if (AUTO_UPDATE_CONFIG.autoUpdatePreferences.autoApply) {\n                console.log('🤖 Auto-apply enabled - applying updates automatically...');\n                // Filter updates if criticalOnly is enabled\n                let updatesToApply = updates;\n                if (AUTO_UPDATE_CONFIG.autoUpdatePreferences.criticalOnly) {\n                    updatesToApply = updates.filter((u)=>u.severity === 'critical' || u.severity === 'high');\n                    console.log(\"\\uD83D\\uDCCB Filtered to \".concat(updatesToApply.length, \" critical/high priority updates\"));\n                }\n                if (updatesToApply.length > 0) {\n                    const results = applyMultipleStigUpdates(updatesToApply);\n                    const successCount = results.filter((r)=>r.success).length;\n                    console.log(\"✅ Auto-applied \".concat(successCount, \"/\").concat(results.length, \" updates\"));\n                    // Update validation flags to true since these come from official sources\n                    results.forEach((r)=>{\n                        if (r.success) {\n                            const stigIndex = STIG_FAMILIES.findIndex((s)=>s.id === r.stigId);\n                            if (stigIndex !== -1) {\n                                STIG_FAMILIES[stigIndex].validated = true;\n                                console.log(\"✅ Auto-validated \".concat(r.stigId, \" from official DISA source\"));\n                            }\n                        }\n                    });\n                }\n            } else if (!AUTO_UPDATE_CONFIG.autoUpdatePreferences.requireManualApproval) {\n                // Legacy behavior: just notify\n                console.log('⚠️ Manual approval disabled but autoApply not enabled - updates pending');\n            }\n            // Send notifications if enabled\n            if (AUTO_UPDATE_CONFIG.notifications.inApp) {\n                console.log('🔔 In-app notification: STIG updates available');\n            }\n            if (AUTO_UPDATE_CONFIG.notifications.email) {\n                console.log('📧 Email notification: STIG updates available');\n            }\n        } else {\n            console.log('✅ No STIG updates found');\n        }\n    }\n}\n/**\r\n * Get next scheduled update check date\r\n */ function getNextUpdateCheck() {\n    const lastCheck = new Date(AUTO_UPDATE_CONFIG.lastCheck);\n    const nextCheck = new Date(lastCheck);\n    switch(AUTO_UPDATE_CONFIG.checkFrequency){\n        case 'daily':\n            nextCheck.setDate(nextCheck.getDate() + 1);\n            break;\n        case 'weekly':\n            nextCheck.setDate(nextCheck.getDate() + 7);\n            break;\n        case 'monthly':\n            nextCheck.setMonth(nextCheck.getMonth() + 1);\n            break;\n    }\n    return nextCheck.toISOString().split('T')[0];\n}\n// Backup storage for rollback capability\nconst STIG_BACKUPS = {};\n/**\r\n * Apply a single update to the STIG database\r\n */ function applyStigUpdate(update) {\n    try {\n        console.log(\"\\uD83D\\uDD04 Applying update for \".concat(update.stigId, \"...\"));\n        // Find the STIG family in the database\n        const stigIndex = STIG_FAMILIES.findIndex((family)=>family.id === update.stigId);\n        if (stigIndex === -1) {\n            return {\n                success: false,\n                stigId: update.stigId,\n                oldVersion: update.currentVersion,\n                newVersion: update.latestVersion || 'Unknown',\n                oldReleaseDate: update.currentReleaseDate,\n                newReleaseDate: update.latestReleaseDate || 'Unknown',\n                backupCreated: false,\n                message: 'STIG family not found in database',\n                error: 'STIG_NOT_FOUND'\n            };\n        }\n        const originalStig = STIG_FAMILIES[stigIndex];\n        // Create backup before updating\n        if (AUTO_UPDATE_CONFIG.autoUpdatePreferences.backupBeforeUpdate) {\n            if (!STIG_BACKUPS[update.stigId]) {\n                STIG_BACKUPS[update.stigId] = [];\n            }\n            STIG_BACKUPS[update.stigId].push({\n                ...originalStig\n            });\n            console.log(\"\\uD83D\\uDCBE Backup created for \".concat(update.stigId));\n        }\n        // Apply the update\n        const oldVersion = originalStig.version;\n        const oldReleaseDate = originalStig.releaseDate;\n        const oldRequirements = originalStig.actualRequirements;\n        STIG_FAMILIES[stigIndex] = {\n            ...originalStig,\n            version: update.latestVersion || originalStig.version,\n            releaseDate: update.latestReleaseDate || originalStig.releaseDate,\n            actualRequirements: update.actualRequirements || originalStig.actualRequirements,\n            validated: false // Mark as unvalidated since it's just updated\n        };\n        // Update metadata\n        STIG_DATABASE_METADATA.lastUpdated = new Date().toISOString().split('T')[0];\n        console.log(\"✅ Successfully updated \".concat(update.stigId));\n        console.log(\"   \".concat(oldVersion, \" → \").concat(update.latestVersion));\n        console.log(\"   \".concat(oldReleaseDate, \" → \").concat(update.latestReleaseDate));\n        return {\n            success: true,\n            stigId: update.stigId,\n            oldVersion,\n            newVersion: update.latestVersion || oldVersion,\n            oldReleaseDate,\n            newReleaseDate: update.latestReleaseDate || oldReleaseDate,\n            oldRequirements,\n            newRequirements: update.actualRequirements,\n            backupCreated: AUTO_UPDATE_CONFIG.autoUpdatePreferences.backupBeforeUpdate,\n            message: \"Successfully updated \".concat(update.stigId, \" from \").concat(oldVersion, \" to \").concat(update.latestVersion)\n        };\n    } catch (error) {\n        console.error(\"❌ Error applying update for \".concat(update.stigId, \":\"), error);\n        return {\n            success: false,\n            stigId: update.stigId,\n            oldVersion: update.currentVersion,\n            newVersion: update.latestVersion || 'Unknown',\n            oldReleaseDate: update.currentReleaseDate,\n            newReleaseDate: update.latestReleaseDate || 'Unknown',\n            backupCreated: false,\n            message: 'Failed to apply update',\n            error: error.message\n        };\n    }\n}\n/**\r\n * Apply multiple updates in batch\r\n */ function applyMultipleStigUpdates(updates) {\n    console.log(\"\\uD83D\\uDD04 Applying \".concat(updates.length, \" updates in batch...\"));\n    const results = [];\n    let successCount = 0;\n    let failureCount = 0;\n    for (const update of updates){\n        const result = applyStigUpdate(update);\n        results.push(result);\n        if (result.success) {\n            successCount++;\n        } else {\n            failureCount++;\n        }\n    }\n    console.log(\"✅ Batch update complete: \".concat(successCount, \" successful, \").concat(failureCount, \" failed\"));\n    return results;\n}\n/**\r\n * Rollback a single STIG to its previous version\r\n */ function rollbackStigUpdate(stigId) {\n    try {\n        const backups = STIG_BACKUPS[stigId];\n        if (!backups || backups.length === 0) {\n            return {\n                success: false,\n                message: \"No backup found for \".concat(stigId)\n            };\n        }\n        // Get the most recent backup\n        const backup = backups.pop();\n        // Find and restore the STIG\n        const stigIndex = STIG_FAMILIES.findIndex((family)=>family.id === stigId);\n        if (stigIndex === -1) {\n            return {\n                success: false,\n                message: \"STIG family \".concat(stigId, \" not found\")\n            };\n        }\n        STIG_FAMILIES[stigIndex] = backup;\n        console.log(\"↩️ Rolled back \".concat(stigId, \" to version \").concat(backup.version));\n        return {\n            success: true,\n            message: \"Successfully rolled back \".concat(stigId, \" to \").concat(backup.version)\n        };\n    } catch (error) {\n        console.error(\"❌ Error rolling back \".concat(stigId, \":\"), error);\n        return {\n            success: false,\n            message: \"Failed to rollback: \".concat(error.message)\n        };\n    }\n}\n/**\r\n * Get all available backups\r\n */ function getAvailableBackups() {\n    const backupCounts = {};\n    for (const [stigId, backups] of Object.entries(STIG_BACKUPS)){\n        backupCounts[stigId] = backups.length;\n    }\n    return backupCounts;\n}\n/**\r\n * Clear all backups (use with caution)\r\n */ function clearAllBackups() {\n    const count = Object.keys(STIG_BACKUPS).length;\n    Object.keys(STIG_BACKUPS).forEach((key)=>delete STIG_BACKUPS[key]);\n    console.log(\"\\uD83D\\uDDD1️ Cleared \".concat(count, \" backup(s)\"));\n}\n/**\r\n * Export current STIG database as JSON (for manual backup)\r\n */ function exportStigDatabase() {\n    return JSON.stringify({\n        metadata: STIG_DATABASE_METADATA,\n        families: STIG_FAMILIES,\n        exportDate: new Date().toISOString(),\n        version: '1.0'\n    }, null, 2);\n}\n/**\r\n * Import STIG database from JSON backup (for restoration)\r\n */ function importStigDatabase(jsonData) {\n    try {\n        const data = JSON.parse(jsonData);\n        if (!data.families || !Array.isArray(data.families)) {\n            return {\n                success: false,\n                message: 'Invalid backup format: missing families array'\n            };\n        }\n        // Create backup of current state before importing\n        const currentBackup = exportStigDatabase();\n        localStorage.setItem('stig_pre_import_backup', currentBackup);\n        // Clear and restore\n        STIG_FAMILIES.length = 0;\n        STIG_FAMILIES.push(...data.families);\n        if (data.metadata) {\n            Object.assign(STIG_DATABASE_METADATA, data.metadata);\n        }\n        console.log(\"✅ Imported \".concat(data.families.length, \" STIG families\"));\n        return {\n            success: true,\n            message: \"Successfully imported \".concat(data.families.length, \" STIG families\")\n        };\n    } catch (error) {\n        console.error('❌ Error importing database:', error);\n        return {\n            success: false,\n            message: \"Import failed: \".concat(error.message)\n        };\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./utils/stigFamilyRecommendations.ts\n"));

/***/ })

});