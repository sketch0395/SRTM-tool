"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./utils/detailedStigRequirements.ts":
/*!*******************************************!*\
  !*** ./utils/detailedStigRequirements.ts ***!
  \*******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearStoredStigRequirements: () => (/* binding */ clearStoredStigRequirements),\n/* harmony export */   convertCsvToStigRequirement: () => (/* binding */ convertCsvToStigRequirement),\n/* harmony export */   convertStigRequirementsToMatrix: () => (/* binding */ convertStigRequirementsToMatrix),\n/* harmony export */   convertToStigRequirements: () => (/* binding */ convertToStigRequirements),\n/* harmony export */   fetchAndConvertStigRequirements: () => (/* binding */ fetchAndConvertStigRequirements),\n/* harmony export */   fetchAndConvertStigRequirementsToMatrix: () => (/* binding */ fetchAndConvertStigRequirementsToMatrix),\n/* harmony export */   getAllStoredStigRequirements: () => (/* binding */ getAllStoredStigRequirements),\n/* harmony export */   getDetailedStigRequirements: () => (/* binding */ getDetailedStigRequirements),\n/* harmony export */   getStoredStigRequirements: () => (/* binding */ getStoredStigRequirements),\n/* harmony export */   getUniqueStigRequirementCount: () => (/* binding */ getUniqueStigRequirementCount),\n/* harmony export */   groupStigRequirementsByTitle: () => (/* binding */ groupStigRequirementsByTitle),\n/* harmony export */   parseStigCsv: () => (/* binding */ parseStigCsv),\n/* harmony export */   stigRequirementsDatabase: () => (/* binding */ stigRequirementsDatabase),\n/* harmony export */   storeStigRequirements: () => (/* binding */ storeStigRequirements),\n/* harmony export */   uploadedStigRequirements: () => (/* binding */ uploadedStigRequirements)\n/* harmony export */ });\n/**\r\n * STIG CSV Upload and Management\r\n * Handles parsing and processing of STIG CSV files\r\n */ /**\r\n * Mapping of internal STIG family IDs to stigviewer.com STIG IDs\r\n * Note: stigviewer.com uses different naming conventions\r\n * Format: stigviewer.com/stig/{stigviewerId}/\r\n */ const STIG_ID_MAPPING = {\n    // Application & Web\n    'application-security-dev': 'application_security_and_development',\n    'web-server-srg': 'web_server',\n    'application-server-srg': 'application_server',\n    // Database\n    'postgresql': 'postgresql_9-x',\n    'mysql': 'mysql',\n    'oracle': 'oracle_database_12c',\n    'mssql': 'ms_sql_server_2016',\n    'mongodb': 'mongodb',\n    // Operating Systems\n    'rhel-8': 'red_hat_enterprise_linux_8',\n    'rhel-9': 'red_hat_enterprise_linux_9',\n    'ubuntu': 'canonical_ubuntu_20.04_lts',\n    'windows-server-2019': 'windows_server_2019',\n    'windows-server-2022': 'windows_server_2022',\n    'windows-10': 'windows_10',\n    'windows-11': 'windows_11',\n    // Web Servers\n    'apache-2.4': 'apache_server_2.4_unix',\n    'nginx': 'nginx',\n    'iis-10': 'iis_10.0_server',\n    'iis-8.5': 'iis_8.5_server',\n    // Middleware\n    'docker': 'docker_enterprise',\n    'kubernetes': 'kubernetes',\n    // Network/Infrastructure\n    'firewall-srg': 'firewall',\n    'router-srg': 'router',\n    'switch-srg': 'network_switch',\n    // Cloud\n    'aws': 'amazon_web_services',\n    'azure': 'microsoft_azure',\n    'gcp': 'google_cloud_platform'\n};\n/**\r\n * Convert internal STIG family ID to stigviewer.com STIG ID\r\n */ function mapToStigViewerId(internalId) {\n    return STIG_ID_MAPPING[internalId] || internalId;\n}\n// Function to convert CSV STIG data to our internal format\nfunction convertCsvToStigRequirement(csvRow) {\n    // Normalize severity values\n    const normalizeSeverity = (severity)=>{\n        const sev = severity.toLowerCase();\n        if (sev === 'high' || sev === 'cat i') return 'CAT I';\n        if (sev === 'medium' || sev === 'cat ii') return 'CAT II';\n        if (sev === 'low' || sev === 'cat iii') return 'CAT III';\n        return 'CAT II'; // default\n    };\n    // Extract CCI references\n    const cciRefs = csvRow.ccis ? csvRow.ccis.split('\\n').filter((line)=>line.includes('CCI-')).map((line)=>{\n        const match = line.match(/CCI-\\d+/);\n        return match ? match[0] : '';\n    }).filter((cci)=>cci) : [\n        'CCI-000366'\n    ];\n    // Normalize status values\n    const normalizeStatus = (status)=>{\n        if (!status) return 'Not Started';\n        const stat = status.toLowerCase();\n        if (stat.includes('progress') || stat.includes('ongoing')) return 'In Progress';\n        if (stat.includes('complete') || stat.includes('done')) return 'Completed';\n        if (stat.includes('exception') || stat.includes('waiver')) return 'Exception Requested';\n        return 'Not Started';\n    };\n    return {\n        stigId: csvRow.stigId || csvRow.ruleId || 'UNKNOWN',\n        vulnId: csvRow.groupId || undefined,\n        severity: normalizeSeverity(csvRow.severity),\n        title: csvRow.ruleTitle || 'Untitled Requirement',\n        description: csvRow.discussion || 'No description provided',\n        checkText: csvRow.checkContent || 'No check procedure provided',\n        fixText: csvRow.fixText || 'No fix procedure provided',\n        applicability: 'Applicable',\n        status: normalizeStatus(csvRow.status),\n        implementationStatus: 'Open',\n        cciRef: cciRefs\n    };\n}\n// Parse CSV content and return STIG requirements\nfunction parseStigCsv(csvContent, familyId) {\n    const lines = csvContent.split('\\n');\n    if (lines.length < 2) return [];\n    // Parse header row\n    const headers = lines[0].split(',').map((h)=>h.replace(/\"/g, '').trim().toLowerCase().replace(/\\s+/g, ''));\n    const requirements = [];\n    for(let i = 1; i < lines.length; i++){\n        const line = lines[i].trim();\n        if (!line) continue;\n        // Parse CSV row (handling quoted fields)\n        const values = [];\n        let current = '';\n        let inQuotes = false;\n        for(let j = 0; j < line.length; j++){\n            const char = line[j];\n            if (char === '\"') {\n                inQuotes = !inQuotes;\n            } else if (char === ',' && !inQuotes) {\n                values.push(current.trim());\n                current = '';\n            } else {\n                current += char;\n            }\n        }\n        values.push(current.trim()); // Add the last value\n        // Create CSV STIG object\n        const csvRow = {\n            severity: 'medium',\n            stigId: '',\n            ruleTitle: '',\n            fixText: '',\n            discussion: '',\n            checkContent: ''\n        };\n        // Map values to CSV STIG object based on headers\n        headers.forEach((header, index)=>{\n            if (values[index]) {\n                const value = values[index].replace(/^\"|\"$/g, ''); // Remove surrounding quotes\n                switch(header){\n                    case 'benchmarkname':\n                        csvRow.benchmarkName = value;\n                        break;\n                    case 'benchmarkid':\n                        csvRow.benchmarkId = value;\n                        break;\n                    case 'severity':\n                        csvRow.severity = value;\n                        break;\n                    case 'stigid':\n                        csvRow.stigId = value;\n                        break;\n                    case 'ruletitle':\n                        csvRow.ruleTitle = value;\n                        break;\n                    case 'fixtext':\n                        csvRow.fixText = value;\n                        break;\n                    case 'discussion':\n                        csvRow.discussion = value;\n                        break;\n                    case 'checkcontent':\n                        csvRow.checkContent = value;\n                        break;\n                    case 'ccis':\n                        csvRow.ccis = value;\n                        break;\n                    case 'groupid':\n                        csvRow.groupId = value;\n                        break;\n                    case 'ruleid':\n                        csvRow.ruleId = value;\n                        break;\n                    case 'status':\n                        csvRow.status = value;\n                        break;\n                }\n            }\n        });\n        // Convert to our internal format\n        if (csvRow.stigId && csvRow.ruleTitle) {\n            const requirement = convertCsvToStigRequirement(csvRow);\n            if (familyId) {\n                requirement.family = familyId;\n            }\n            requirements.push(requirement);\n        }\n    }\n    return requirements;\n}\n// Database for managing uploaded STIG requirements\nconst uploadedStigRequirements = {};\n// Function to store uploaded STIG requirements\nfunction storeStigRequirements(familyId, requirements) {\n    uploadedStigRequirements[familyId] = requirements;\n}\n// Function to get stored STIG requirements\nfunction getStoredStigRequirements(familyId) {\n    return uploadedStigRequirements[familyId] || [];\n}\n// Function to get all stored STIG requirements across all families\nfunction getAllStoredStigRequirements() {\n    const allRequirements = [];\n    Object.keys(uploadedStigRequirements).forEach((familyId)=>{\n        const familyRequirements = uploadedStigRequirements[familyId];\n        familyRequirements.forEach((req, index)=>{\n            allRequirements.push({\n                id: \"\".concat(familyId, \"-\").concat(Date.now(), \"-\").concat(index),\n                family: req.family || familyId,\n                ...req,\n                createdAt: new Date(),\n                updatedAt: new Date()\n            });\n        });\n    });\n    return allRequirements;\n}\n// Function to clear stored STIG requirements\nfunction clearStoredStigRequirements(familyId) {\n    if (familyId) {\n        delete uploadedStigRequirements[familyId];\n    } else {\n        // Clear all\n        Object.keys(uploadedStigRequirements).forEach((key)=>{\n            delete uploadedStigRequirements[key];\n        });\n    }\n}\n/**\r\n * Get detailed STIG requirements for a given STIG family ID\r\n * Now supports uploaded CSV data\r\n */ function getDetailedStigRequirements(stigFamilyId) {\n    // Return stored uploaded requirements\n    return getStoredStigRequirements(stigFamilyId);\n}\n/**\r\n * Convert STIG requirements to the format expected by the traceability matrix\r\n */ function convertStigRequirementsToMatrix(stigFamilyIds) {\n    console.log('Converting STIG requirements for families:', stigFamilyIds);\n    const allRequirements = [];\n    stigFamilyIds.forEach((familyId)=>{\n        const detailedRequirements = getStoredStigRequirements(familyId);\n        console.log(\"Found \".concat(detailedRequirements.length, \" requirements for family: \").concat(familyId));\n        detailedRequirements.forEach((req, index)=>{\n            allRequirements.push({\n                id: \"\".concat(familyId, \"-\").concat(Date.now(), \"-\").concat(index),\n                ...req,\n                createdAt: new Date(),\n                updatedAt: new Date()\n            });\n        });\n    });\n    console.log(\"Total converted requirements: \".concat(allRequirements.length));\n    return allRequirements;\n}\n// New: Fetch STIG from stigviewer and convert to requirements\nasync function fetchAndConvertStigRequirements(familyIds) {\n    // Use internal API route to fetch STIG data (avoids CORS/network errors)\n    const allRequirements = [];\n    const failedFetches = [];\n    for (const familyId of familyIds){\n        // Map internal ID to stigviewer.com ID\n        const stigviewerId = mapToStigViewerId(familyId);\n        const apiUrl =  true ? \"\".concat(window.location.origin, \"/api/import-stig?stigId=\").concat(encodeURIComponent(stigviewerId)) : 0;\n        console.log(\"\\uD83D\\uDD0D Fetching STIG: \".concat(familyId, \" → \").concat(stigviewerId));\n        try {\n            const apiRes = await fetch(apiUrl);\n            const result = await apiRes.json();\n            if (!apiRes.ok || !result.success) {\n                // API returned error (503 = stigviewer.com unavailable)\n                console.warn(\"⚠️ Could not fetch \".concat(familyId, \" (\").concat(stigviewerId, \"): \").concat(result.error || result.message));\n                failedFetches.push(\"\".concat(familyId, \" → \").concat(stigviewerId));\n                continue;\n            }\n            if (result.success && result.requirements) {\n                console.log(\"\\uD83D\\uDCCA API returned \".concat(result.requirements.length, \" requirements\"));\n                // Log severity distribution from API\n                const severityCounts = {};\n                result.requirements.forEach((req)=>{\n                    const sev = req.severity || 'unknown';\n                    severityCounts[sev] = (severityCounts[sev] || 0) + 1;\n                });\n                console.log(\"\\uD83D\\uDCCA Severity distribution from API:\", severityCounts);\n                // Convert the API format to DetailedStigRequirement format\n                const converted = result.requirements.map((req)=>{\n                    // Normalize severity - API returns 'high', 'medium', 'low'\n                    let severity = 'CAT II';\n                    const sevText = (req.severity || 'medium').toLowerCase();\n                    if (sevText === 'high' || sevText === 'cat i' || sevText.includes('cat i')) {\n                        severity = 'CAT I';\n                    } else if (sevText === 'low' || sevText === 'cat iii' || sevText.includes('cat iii')) {\n                        severity = 'CAT III';\n                    } else {\n                        severity = 'CAT II';\n                    }\n                    return {\n                        stigId: req.vulnId || req.ruleId || 'UNKNOWN',\n                        vulnId: req.vulnId,\n                        ruleId: req.ruleId,\n                        severity,\n                        title: req.title || 'Untitled Requirement',\n                        description: req.description || 'No description provided',\n                        checkText: req.checkText || 'No check procedure provided',\n                        fixText: req.fixText || 'No fix procedure provided',\n                        applicability: 'Applicable',\n                        status: 'Not Started',\n                        implementationStatus: 'Open',\n                        cciRef: req.cci && req.cci.length > 0 ? req.cci : [\n                            'CCI-000366'\n                        ],\n                        family: familyId\n                    };\n                });\n                // Log severity distribution after conversion\n                const convertedCounts = {};\n                converted.forEach((req)=>{\n                    convertedCounts[req.severity] = (convertedCounts[req.severity] || 0) + 1;\n                });\n                console.log(\"\\uD83D\\uDCCA Severity distribution after conversion:\", convertedCounts);\n                allRequirements.push(...converted);\n                console.log(\"✅ Successfully loaded \".concat(converted.length, \" requirements for \").concat(familyId));\n            }\n        } catch (err) {\n            console.error(\"❌ Error fetching STIG for \".concat(familyId, \":\"), err);\n            failedFetches.push(\"\".concat(familyId, \" → \").concat(stigviewerId));\n        }\n    }\n    // Show user-friendly message if fetches failed\n    if (failedFetches.length > 0 && \"object\" !== 'undefined') {\n        console.warn(\"\\n⚠️ STIG IMPORT ISSUE\\n\" + \"Failed to automatically fetch \".concat(failedFetches.length, \" STIG(s):\\n\") + failedFetches.map((f)=>\"  • \".concat(f)).join('\\n') + '\\n\\n' + \"Possible reasons:\\n\" + \"  • STIG ID mapping may be incorrect for stigviewer.com\\n\" + \"  • STIG may not be available on stigviewer.com\\n\" + \"  • Network connectivity issues\\n\\n\" + \"MANUAL UPLOAD OPTIONS:\\n\" + \"  1. Download STIG XML from DISA: https://public.cyber.mil/stigs/downloads/\\n\" + \"  2. Or browse STIGs: https://stigviewer.com/stigs\\n\" + \"  3. Use the STIG Import component to upload the XCCDF XML file\\n\");\n    }\n    return allRequirements;\n}\n// New: Fetch and convert STIG CSVs directly to the matrix format (StigRequirement[])\nasync function fetchAndConvertStigRequirementsToMatrix(familyIds) {\n    const detailed = await fetchAndConvertStigRequirements(familyIds);\n    const all = [];\n    detailed.forEach((req, index)=>{\n        const familyId = req.family || 'unknown';\n        all.push({\n            id: \"\".concat(familyId, \"-\").concat(Date.now(), \"-\").concat(index),\n            ...req,\n            createdAt: new Date(),\n            updatedAt: new Date()\n        });\n    });\n    return all;\n}\n// Legacy function name support\nconst convertToStigRequirements = convertStigRequirementsToMatrix;\n// Empty database for backward compatibility\nconst stigRequirementsDatabase = {};\n/**\r\n * Group STIG requirements by title to avoid duplicate display\r\n * Requirements with the same title are grouped together with a count\r\n */ function groupStigRequirementsByTitle(requirements) {\n    const groupedMap = new Map();\n    requirements.forEach((req)=>{\n        const key = req.title.trim();\n        if (groupedMap.has(key)) {\n            const existing = groupedMap.get(key);\n            existing.count += 1;\n            existing.stigIds.push(req.stigId);\n            existing.requirements.push(req);\n            // Update status to highest priority status\n            if (req.status === 'Completed' && existing.status !== 'Completed') {\n                existing.status = 'Completed';\n            } else if (req.status === 'In Progress' && existing.status === 'Not Started') {\n                existing.status = 'In Progress';\n            } else if (req.status === 'Exception Requested') {\n                existing.status = 'Exception Requested';\n            }\n            // Update implementation status to most severe\n            if (req.implementationStatus === 'Open' && existing.implementationStatus !== 'Open') {\n                existing.implementationStatus = 'Open';\n            } else if (req.implementationStatus === 'NotAFinding' && existing.implementationStatus === 'Not_Applicable') {\n                existing.implementationStatus = 'NotAFinding';\n            }\n        } else {\n            groupedMap.set(key, {\n                title: req.title,\n                count: 1,\n                family: req.family,\n                severity: req.severity,\n                description: req.description,\n                checkText: req.checkText,\n                fixText: req.fixText,\n                stigIds: [\n                    req.stigId\n                ],\n                requirements: [\n                    req\n                ],\n                status: req.status,\n                implementationStatus: req.implementationStatus\n            });\n        }\n    });\n    return Array.from(groupedMap.values()).sort((a, b)=>{\n        // Sort by severity first (CAT I > CAT II > CAT III), then by title\n        const severityOrder = {\n            'CAT I': 1,\n            'CAT II': 2,\n            'CAT III': 3\n        };\n        const severityDiff = severityOrder[a.severity] - severityOrder[b.severity];\n        if (severityDiff !== 0) return severityDiff;\n        return a.title.localeCompare(b.title);\n    });\n}\n/**\r\n * Get unique count of STIG requirements by title for a family\r\n */ function getUniqueStigRequirementCount(familyId) {\n    const requirements = getStoredStigRequirements(familyId);\n    const titleSet = new Set(requirements.map((req)=>{\n        var _req_title;\n        return (_req_title = req.title) === null || _req_title === void 0 ? void 0 : _req_title.trim();\n    }).filter(Boolean));\n    return titleSet.size;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./utils/detailedStigRequirements.ts\n"));

/***/ })

});