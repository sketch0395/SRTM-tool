"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./utils/detailedStigRequirements.ts":
/*!*******************************************!*\
  !*** ./utils/detailedStigRequirements.ts ***!
  \*******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearStoredStigRequirements: () => (/* binding */ clearStoredStigRequirements),\n/* harmony export */   convertCsvToStigRequirement: () => (/* binding */ convertCsvToStigRequirement),\n/* harmony export */   convertStigRequirementsToMatrix: () => (/* binding */ convertStigRequirementsToMatrix),\n/* harmony export */   convertToStigRequirements: () => (/* binding */ convertToStigRequirements),\n/* harmony export */   fetchAndConvertStigRequirements: () => (/* binding */ fetchAndConvertStigRequirements),\n/* harmony export */   fetchAndConvertStigRequirementsToMatrix: () => (/* binding */ fetchAndConvertStigRequirementsToMatrix),\n/* harmony export */   getAllStoredStigRequirements: () => (/* binding */ getAllStoredStigRequirements),\n/* harmony export */   getDetailedStigRequirements: () => (/* binding */ getDetailedStigRequirements),\n/* harmony export */   getStoredStigRequirements: () => (/* binding */ getStoredStigRequirements),\n/* harmony export */   parseStigCsv: () => (/* binding */ parseStigCsv),\n/* harmony export */   stigRequirementsDatabase: () => (/* binding */ stigRequirementsDatabase),\n/* harmony export */   storeStigRequirements: () => (/* binding */ storeStigRequirements),\n/* harmony export */   uploadedStigRequirements: () => (/* binding */ uploadedStigRequirements)\n/* harmony export */ });\n/**\r\n * STIG CSV Upload and Management\r\n * Handles parsing and processing of STIG CSV files\r\n */ // Function to convert CSV STIG data to our internal format\nfunction convertCsvToStigRequirement(csvRow) {\n    // Normalize severity values\n    const normalizeSeverity = (severity)=>{\n        const sev = severity.toLowerCase();\n        if (sev === 'high' || sev === 'cat i') return 'CAT I';\n        if (sev === 'medium' || sev === 'cat ii') return 'CAT II';\n        if (sev === 'low' || sev === 'cat iii') return 'CAT III';\n        return 'CAT II'; // default\n    };\n    // Extract CCI references\n    const cciRefs = csvRow.ccis ? csvRow.ccis.split('\\n').filter((line)=>line.includes('CCI-')).map((line)=>{\n        const match = line.match(/CCI-\\d+/);\n        return match ? match[0] : '';\n    }).filter((cci)=>cci) : [\n        'CCI-000366'\n    ];\n    // Normalize status values\n    const normalizeStatus = (status)=>{\n        if (!status) return 'Not Started';\n        const stat = status.toLowerCase();\n        if (stat.includes('progress') || stat.includes('ongoing')) return 'In Progress';\n        if (stat.includes('complete') || stat.includes('done')) return 'Completed';\n        if (stat.includes('exception') || stat.includes('waiver')) return 'Exception Requested';\n        return 'Not Started';\n    };\n    return {\n        stigId: csvRow.stigId || csvRow.ruleId || 'UNKNOWN',\n        vulnId: csvRow.groupId || undefined,\n        severity: normalizeSeverity(csvRow.severity),\n        title: csvRow.ruleTitle || 'Untitled Requirement',\n        description: csvRow.discussion || 'No description provided',\n        checkText: csvRow.checkContent || 'No check procedure provided',\n        fixText: csvRow.fixText || 'No fix procedure provided',\n        applicability: 'Applicable',\n        status: normalizeStatus(csvRow.status),\n        implementationStatus: 'Open',\n        cciRef: cciRefs\n    };\n}\n// Parse CSV content and return STIG requirements\nfunction parseStigCsv(csvContent, familyId) {\n    const lines = csvContent.split('\\n');\n    if (lines.length < 2) return [];\n    // Parse header row\n    const headers = lines[0].split(',').map((h)=>h.replace(/\"/g, '').trim().toLowerCase().replace(/\\s+/g, ''));\n    const requirements = [];\n    for(let i = 1; i < lines.length; i++){\n        const line = lines[i].trim();\n        if (!line) continue;\n        // Parse CSV row (handling quoted fields)\n        const values = [];\n        let current = '';\n        let inQuotes = false;\n        for(let j = 0; j < line.length; j++){\n            const char = line[j];\n            if (char === '\"') {\n                inQuotes = !inQuotes;\n            } else if (char === ',' && !inQuotes) {\n                values.push(current.trim());\n                current = '';\n            } else {\n                current += char;\n            }\n        }\n        values.push(current.trim()); // Add the last value\n        // Create CSV STIG object\n        const csvRow = {\n            severity: 'medium',\n            stigId: '',\n            ruleTitle: '',\n            fixText: '',\n            discussion: '',\n            checkContent: ''\n        };\n        // Map values to CSV STIG object based on headers\n        headers.forEach((header, index)=>{\n            if (values[index]) {\n                const value = values[index].replace(/^\"|\"$/g, ''); // Remove surrounding quotes\n                switch(header){\n                    case 'benchmarkname':\n                        csvRow.benchmarkName = value;\n                        break;\n                    case 'benchmarkid':\n                        csvRow.benchmarkId = value;\n                        break;\n                    case 'severity':\n                        csvRow.severity = value;\n                        break;\n                    case 'stigid':\n                        csvRow.stigId = value;\n                        break;\n                    case 'ruletitle':\n                        csvRow.ruleTitle = value;\n                        break;\n                    case 'fixtext':\n                        csvRow.fixText = value;\n                        break;\n                    case 'discussion':\n                        csvRow.discussion = value;\n                        break;\n                    case 'checkcontent':\n                        csvRow.checkContent = value;\n                        break;\n                    case 'ccis':\n                        csvRow.ccis = value;\n                        break;\n                    case 'groupid':\n                        csvRow.groupId = value;\n                        break;\n                    case 'ruleid':\n                        csvRow.ruleId = value;\n                        break;\n                    case 'status':\n                        csvRow.status = value;\n                        break;\n                }\n            }\n        });\n        // Convert to our internal format\n        if (csvRow.stigId && csvRow.ruleTitle) {\n            const requirement = convertCsvToStigRequirement(csvRow);\n            if (familyId) {\n                requirement.family = familyId;\n            }\n            requirements.push(requirement);\n        }\n    }\n    return requirements;\n}\n// Database for managing uploaded STIG requirements\nconst uploadedStigRequirements = {};\n// Function to store uploaded STIG requirements\nfunction storeStigRequirements(familyId, requirements) {\n    uploadedStigRequirements[familyId] = requirements;\n}\n// Function to get stored STIG requirements\nfunction getStoredStigRequirements(familyId) {\n    return uploadedStigRequirements[familyId] || [];\n}\n// Function to get all stored STIG requirements across all families\nfunction getAllStoredStigRequirements() {\n    const allRequirements = [];\n    Object.keys(uploadedStigRequirements).forEach((familyId)=>{\n        const familyRequirements = uploadedStigRequirements[familyId];\n        familyRequirements.forEach((req, index)=>{\n            allRequirements.push({\n                id: \"\".concat(familyId, \"-\").concat(Date.now(), \"-\").concat(index),\n                family: req.family || familyId,\n                ...req,\n                createdAt: new Date(),\n                updatedAt: new Date()\n            });\n        });\n    });\n    return allRequirements;\n}\n// Function to clear stored STIG requirements\nfunction clearStoredStigRequirements(familyId) {\n    if (familyId) {\n        delete uploadedStigRequirements[familyId];\n    } else {\n        // Clear all\n        Object.keys(uploadedStigRequirements).forEach((key)=>{\n            delete uploadedStigRequirements[key];\n        });\n    }\n}\n/**\r\n * Get detailed STIG requirements for a given STIG family ID\r\n * Now supports uploaded CSV data\r\n */ function getDetailedStigRequirements(stigFamilyId) {\n    // Return stored uploaded requirements\n    return getStoredStigRequirements(stigFamilyId);\n}\n/**\r\n * Convert STIG requirements to the format expected by the traceability matrix\r\n */ function convertStigRequirementsToMatrix(stigFamilyIds) {\n    console.log('Converting STIG requirements for families:', stigFamilyIds);\n    const allRequirements = [];\n    stigFamilyIds.forEach((familyId)=>{\n        const detailedRequirements = getStoredStigRequirements(familyId);\n        console.log(\"Found \".concat(detailedRequirements.length, \" requirements for family: \").concat(familyId));\n        detailedRequirements.forEach((req, index)=>{\n            allRequirements.push({\n                id: \"\".concat(familyId, \"-\").concat(Date.now(), \"-\").concat(index),\n                ...req,\n                createdAt: new Date(),\n                updatedAt: new Date()\n            });\n        });\n    });\n    console.log(\"Total converted requirements: \".concat(allRequirements.length));\n    return allRequirements;\n}\n// New: Fetch STIG CSV from stigviewer and convert to requirements\nasync function fetchAndConvertStigRequirements(familyIds) {\n    // Use internal API route to fetch multiple STIG CSVs (avoids CORS/network errors)\n    const allRequirements = [];\n    const param = encodeURIComponent(familyIds.join(','));\n    const apiUrl =  true ? \"\".concat(window.location.origin, \"/api/fetch-stig-csv?familyIds=\").concat(param) : 0;\n    try {\n        const apiRes = await fetch(apiUrl);\n        if (!apiRes.ok) {\n            console.error(\"Failed to fetch STIG CSVs from API: \".concat(apiRes.status));\n            return allRequirements;\n        }\n        const csvResults = await apiRes.json();\n        for (const familyId of familyIds){\n            const csvText = csvResults[familyId];\n            if (csvText) {\n                const detailed = parseStigCsv(csvText, familyId);\n                allRequirements.push(...detailed);\n            } else {\n                console.warn(\"No CSV data returned for \".concat(familyId));\n            }\n        }\n    } catch (err) {\n        console.error('Error fetching STIG CSVs via API:', err);\n    }\n    return allRequirements;\n}\n// New: Fetch and convert STIG CSVs directly to the matrix format (StigRequirement[])\nasync function fetchAndConvertStigRequirementsToMatrix(familyIds) {\n    const detailed = await fetchAndConvertStigRequirements(familyIds);\n    const all = [];\n    detailed.forEach((req, index)=>{\n        const familyId = req.family || 'unknown';\n        all.push({\n            id: \"\".concat(familyId, \"-\").concat(Date.now(), \"-\").concat(index),\n            ...req,\n            createdAt: new Date(),\n            updatedAt: new Date()\n        });\n    });\n    return all;\n}\n// Legacy function name support\nconst convertToStigRequirements = convertStigRequirementsToMatrix;\n// Empty database for backward compatibility\nconst stigRequirementsDatabase = {};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./utils/detailedStigRequirements.ts\n"));

/***/ })

});