"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./utils/stigFamilyRecommendations.ts":
/*!********************************************!*\
  !*** ./utils/stigFamilyRecommendations.ts ***!
  \********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AUTO_UPDATE_CONFIG: () => (/* binding */ AUTO_UPDATE_CONFIG),\n/* harmony export */   STIG_DATABASE_METADATA: () => (/* binding */ STIG_DATABASE_METADATA),\n/* harmony export */   STIG_FAMILIES: () => (/* binding */ STIG_FAMILIES),\n/* harmony export */   applyMultipleStigUpdates: () => (/* binding */ applyMultipleStigUpdates),\n/* harmony export */   applyStigUpdate: () => (/* binding */ applyStigUpdate),\n/* harmony export */   checkForStigUpdates: () => (/* binding */ checkForStigUpdates),\n/* harmony export */   clearAllBackups: () => (/* binding */ clearAllBackups),\n/* harmony export */   exportStigDatabase: () => (/* binding */ exportStigDatabase),\n/* harmony export */   getAvailableBackups: () => (/* binding */ getAvailableBackups),\n/* harmony export */   getImplementationEffort: () => (/* binding */ getImplementationEffort),\n/* harmony export */   getNextUpdateCheck: () => (/* binding */ getNextUpdateCheck),\n/* harmony export */   getPendingUpdates: () => (/* binding */ getPendingUpdates),\n/* harmony export */   getStigDatabaseStatus: () => (/* binding */ getStigDatabaseStatus),\n/* harmony export */   getStigFamilyRecommendations: () => (/* binding */ getStigFamilyRecommendations),\n/* harmony export */   importStigDatabase: () => (/* binding */ importStigDatabase),\n/* harmony export */   performScheduledUpdateCheck: () => (/* binding */ performScheduledUpdateCheck),\n/* harmony export */   rollbackStigUpdate: () => (/* binding */ rollbackStigUpdate),\n/* harmony export */   setAutoUpdateEnabled: () => (/* binding */ setAutoUpdateEnabled)\n/* harmony export */ });\n/**\r\n * STIG Family Recommendation Engine\r\n * Analyzes security requirements and design elements to recommend applicable STIG families\r\n * \r\n * ⚠️  UPDATE FREQUENCY: This data is NOT automatically updated and requires manual maintenance\r\n * \r\n * RECOMMENDED UPDATE SCHEDULE:\r\n * - Quarterly review of STIG releases from DISA\r\n * - Monthly check of high-priority STIGs (Application Security, Web Server, etc.)\r\n * - Immediate updates for critical security STIGs\r\n * \r\n * OFFICIAL SOURCES TO MONITOR:\r\n * - DISA Cyber Exchange: https://public.cyber.mil/stigs/downloads/\r\n * - STIG Viewer: https://stigviewer.com/stigs\r\n * - DISA STIG RSS Feed: https://public.cyber.mil/stigs/rss/\r\n * \r\n * LAST MAJOR UPDATE: October 2025 (requires validation against official sources)\r\n * NEXT SCHEDULED REVIEW: January 2026\r\n * \r\n * The STIG catalog below contains common STIGs but versions, release dates, and requirement \r\n * counts are approximate and should be verified against official DISA releases before use.\r\n * \r\n * There are ~200 official STIGs available from DISA. This is a curated subset focused on\r\n * common enterprise technologies.\r\n */ // STIG Database Metadata - Track update status\nconst STIG_DATABASE_METADATA = {\n    lastUpdated: '2025-10-02',\n    lastValidated: '2025-09-01',\n    nextReviewDue: '2026-01-01',\n    totalStigFamilies: 0,\n    validatedFamilies: 0,\n    updateFrequency: 'Quarterly',\n    dataSources: [\n        'https://public.cyber.mil/stigs/downloads/',\n        'https://stigviewer.com/stigs',\n        'https://public.cyber.mil/stigs/rss/'\n    ],\n    criticalUpdatesNeeded: [],\n    updateNotes: 'Automatic STIG update checking available! Enable via setAutoUpdateEnabled(true)'\n};\n// Comprehensive STIG Family catalog - Should be verified against official DISA sources\n// Reference: https://stigviewer.com/stigs (~200 official STIGs available)\n// This is a curated subset of common enterprise STIGs\nconst STIG_FAMILIES = [\n    // Application & Web Server STIGs (Verified from stigviewer.com)\n    {\n        id: 'application-security-dev',\n        name: 'Application Security and Development Security Technical Implementation Guide',\n        version: 'V6',\n        releaseDate: '2025-02-12',\n        description: 'Security Technical Implementation Guide for Application Security and Development practices',\n        applicableSystemTypes: [\n            'Application',\n            'Development',\n            'Web Application',\n            'API',\n            'Software'\n        ],\n        triggerKeywords: [\n            'application',\n            'web app',\n            'api',\n            'development',\n            'software',\n            'code',\n            'programming',\n            'frontend',\n            'backend',\n            'secure coding',\n            'devsecops'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'IA',\n            'SC',\n            'SI',\n            'SA'\n        ],\n        priority: 'High',\n        actualRequirements: 165,\n        stigId: 'APSC-DV-000001',\n        validated: true\n    },\n    {\n        id: 'web-server-srg',\n        name: 'Web Server Security Requirements Guide',\n        version: 'V4',\n        releaseDate: '2025-02-12',\n        description: 'Security Requirements Guide for Web Servers',\n        applicableSystemTypes: [\n            'Web Server',\n            'HTTP',\n            'HTTPS',\n            'Web Application'\n        ],\n        triggerKeywords: [\n            'web server',\n            'http server',\n            'https',\n            'web',\n            'server',\n            'webapp',\n            'hosting'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 89,\n        stigId: 'SRG-APP-000001',\n        validated: true\n    },\n    {\n        id: 'application-server-srg',\n        name: 'Application Server Security Requirements Guide',\n        version: 'V4',\n        releaseDate: '2025-02-11',\n        description: 'Security Requirements Guide for Application Servers',\n        applicableSystemTypes: [\n            'Application Server',\n            'App Server',\n            'Middleware'\n        ],\n        triggerKeywords: [\n            'application server',\n            'app server',\n            'middleware',\n            'java',\n            'jee',\n            'j2ee'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 95,\n        stigId: 'SRG-APP-000002',\n        validated: true\n    },\n    {\n        id: 'apache-server-2-4-unix-server',\n        name: 'Apache Server 2.4 UNIX Server Security Technical Implementation Guide',\n        version: 'V3',\n        releaseDate: '2024-12-04',\n        description: 'Security Technical Implementation Guide for Apache HTTP Server 2.4 on UNIX',\n        applicableSystemTypes: [\n            'Web Server',\n            'Apache',\n            'HTTP',\n            'UNIX',\n            'Linux'\n        ],\n        triggerKeywords: [\n            'apache',\n            'httpd',\n            'web server',\n            'http',\n            'https',\n            'ssl',\n            'tls',\n            'unix',\n            'linux'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 93,\n        stigId: 'AS24-U1-000001',\n        validated: true\n    },\n    {\n        id: 'apache-server-2-4-unix-site',\n        name: 'Apache Server 2.4 UNIX Site Security Technical Implementation Guide',\n        version: 'V2',\n        releaseDate: '2025-02-12',\n        description: 'Security Technical Implementation Guide for Apache HTTP Server 2.4 UNIX Site configuration',\n        applicableSystemTypes: [\n            'Web Server',\n            'Apache',\n            'HTTP',\n            'UNIX',\n            'Linux'\n        ],\n        triggerKeywords: [\n            'apache',\n            'httpd',\n            'web server',\n            'site',\n            'virtual host',\n            'unix',\n            'linux'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 78,\n        stigId: 'AS24-U2-000001',\n        validated: true\n    },\n    {\n        id: 'apache-server-2-4-windows-server',\n        name: 'Apache Server 2.4 Windows Server Security Technical Implementation Guide',\n        version: 'V3',\n        releaseDate: '2025-02-12',\n        description: 'Security Technical Implementation Guide for Apache HTTP Server 2.4 on Windows',\n        applicableSystemTypes: [\n            'Web Server',\n            'Apache',\n            'HTTP',\n            'Windows'\n        ],\n        triggerKeywords: [\n            'apache',\n            'httpd',\n            'web server',\n            'windows',\n            'http',\n            'https'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 93,\n        stigId: 'AS24-W1-000001',\n        validated: true\n    },\n    {\n        id: 'apache-server-2-4-windows-site',\n        name: 'Apache Server 2.4 Windows Site Security Technical Implementation Guide',\n        version: 'V2',\n        releaseDate: '2025-02-12',\n        description: 'Security Technical Implementation Guide for Apache HTTP Server 2.4 Windows Site configuration',\n        applicableSystemTypes: [\n            'Web Server',\n            'Apache',\n            'HTTP',\n            'Windows'\n        ],\n        triggerKeywords: [\n            'apache',\n            'httpd',\n            'web server',\n            'site',\n            'virtual host',\n            'windows'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 78,\n        stigId: 'AS24-W2-000001',\n        validated: true\n    },\n    {\n        id: 'apache-tomcat-9',\n        name: 'Apache Tomcat Application Server 9 Security Technical Implementation Guide',\n        version: 'V3',\n        releaseDate: '2025-02-11',\n        description: 'Security Technical Implementation Guide for Apache Tomcat 9 Application Server',\n        applicableSystemTypes: [\n            'Application Server',\n            'Tomcat',\n            'Java',\n            'Servlet'\n        ],\n        triggerKeywords: [\n            'tomcat',\n            'java',\n            'servlet',\n            'jsp',\n            'application server',\n            'java ee'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 112,\n        stigId: 'TCAT-AS-000001',\n        validated: true\n    },\n    {\n        id: 'microsoft-iis-10-server',\n        name: 'Microsoft IIS 10.0 Server Security Technical Implementation Guide',\n        version: 'V3',\n        releaseDate: '2025-02-11',\n        description: 'Security Technical Implementation Guide for Microsoft Internet Information Services 10.0 Server',\n        applicableSystemTypes: [\n            'Web Server',\n            'IIS',\n            'Windows',\n            'HTTP'\n        ],\n        triggerKeywords: [\n            'iis',\n            'internet information services',\n            'web server',\n            'asp.net',\n            'windows web',\n            'microsoft'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 107,\n        stigId: 'IIST-SV-000001',\n        validated: true\n    },\n    {\n        id: 'microsoft-iis-10-site',\n        name: 'Microsoft IIS 10.0 Site Security Technical Implementation Guide',\n        version: 'V2',\n        releaseDate: '2025-02-11',\n        description: 'Security Technical Implementation Guide for Microsoft Internet Information Services 10.0 Site configuration',\n        applicableSystemTypes: [\n            'Web Server',\n            'IIS',\n            'Windows',\n            'HTTP'\n        ],\n        triggerKeywords: [\n            'iis',\n            'internet information services',\n            'site',\n            'website',\n            'asp.net',\n            'windows web'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 89,\n        stigId: 'IIST-SI-000001',\n        validated: true\n    },\n    {\n        id: 'jboss-eap-6-3',\n        name: 'JBoss Enterprise Application Platform 6.3 Security Technical Implementation Guide',\n        version: 'V2',\n        releaseDate: '2025-02-20',\n        description: 'Security Technical Implementation Guide for JBoss EAP 6.3',\n        applicableSystemTypes: [\n            'Application Server',\n            'JBoss',\n            'Java',\n            'Red Hat'\n        ],\n        triggerKeywords: [\n            'jboss',\n            'eap',\n            'wildfly',\n            'java',\n            'application server',\n            'red hat',\n            'java ee'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 98,\n        stigId: 'JBOS-AS-000001',\n        validated: true\n    },\n    {\n        id: 'ibm-websphere-liberty',\n        name: 'IBM WebSphere Liberty Server Security Technical Implementation Guide',\n        version: 'V2',\n        releaseDate: '2025-02-11',\n        description: 'Security Technical Implementation Guide for IBM WebSphere Liberty Server',\n        applicableSystemTypes: [\n            'Application Server',\n            'WebSphere',\n            'Java',\n            'IBM'\n        ],\n        triggerKeywords: [\n            'websphere',\n            'liberty',\n            'ibm',\n            'java',\n            'application server',\n            'java ee'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 104,\n        stigId: 'WBSL-AS-000001',\n        validated: true\n    },\n    {\n        id: 'microsoft-dotnet-4',\n        name: 'Microsoft DotNet Framework 4.0 Security Technical Implementation Guide',\n        version: 'V2',\n        releaseDate: '2025-02-20',\n        description: 'Security Technical Implementation Guide for Microsoft .NET Framework 4.0',\n        applicableSystemTypes: [\n            'Framework',\n            '.NET',\n            'Application',\n            'Windows'\n        ],\n        triggerKeywords: [\n            '.net',\n            'dotnet',\n            'framework',\n            'csharp',\n            'c#',\n            'asp.net',\n            'clr',\n            'microsoft'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI',\n            'SA'\n        ],\n        priority: 'High',\n        actualRequirements: 91,\n        stigId: 'APPNET-AS-000001',\n        validated: true\n    },\n    // Operating System STIGs\n    {\n        id: 'windows-server-2022',\n        name: 'Windows Server 2022 STIG',\n        version: 'V2',\n        releaseDate: '2025-02-25',\n        description: 'Security Technical Implementation Guide for Windows Server 2022',\n        applicableSystemTypes: [\n            'Windows',\n            'Server',\n            'Domain Controller',\n            'File Server'\n        ],\n        triggerKeywords: [\n            'windows',\n            'server 2022',\n            'windows server',\n            'active directory',\n            'domain',\n            'ntfs',\n            'registry',\n            'powershell'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'IA',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 292,\n        stigId: 'WN22-00-000010',\n        validated: false\n    },\n    {\n        id: 'windows-11',\n        name: 'Windows 11 STIG',\n        version: 'V2R2',\n        releaseDate: '2024-08-15',\n        description: 'Security Technical Implementation Guide for Windows 11',\n        applicableSystemTypes: [\n            'Windows',\n            'Workstation',\n            'Desktop',\n            'Laptop'\n        ],\n        triggerKeywords: [\n            'windows 11',\n            'windows',\n            'workstation',\n            'desktop',\n            'laptop',\n            'endpoint'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'IA',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 204,\n        stigId: 'WN11-00-000010',\n        validated: false\n    },\n    {\n        id: 'rhel-9',\n        name: 'Red Hat Enterprise Linux 9 STIG',\n        version: 'V2R1',\n        releaseDate: '2024-09-01',\n        description: 'Security Technical Implementation Guide for RHEL 9',\n        applicableSystemTypes: [\n            'Linux',\n            'RHEL',\n            'Red Hat',\n            'Unix'\n        ],\n        triggerKeywords: [\n            'linux',\n            'rhel',\n            'redhat',\n            'red hat',\n            'unix',\n            'bash',\n            'systemd',\n            'selinux',\n            'centos'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'IA',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 280,\n        stigId: 'RHEL-09-010001',\n        validated: false\n    },\n    {\n        id: 'ubuntu-22-04',\n        name: 'Canonical Ubuntu 22.04 LTS STIG',\n        version: 'V2R1',\n        releaseDate: '2024-07-01',\n        description: 'Security Technical Implementation Guide for Ubuntu 22.04 LTS',\n        applicableSystemTypes: [\n            'Linux',\n            'Ubuntu',\n            'Debian'\n        ],\n        triggerKeywords: [\n            'ubuntu',\n            'debian',\n            'apt',\n            'snap',\n            'systemd',\n            'apparmor'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'IA',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 267,\n        stigId: 'UBTU-22-010001',\n        validated: false\n    },\n    // Network Device STIGs\n    {\n        id: 'cisco-ios-xe-17',\n        name: 'Cisco IOS XE Router STIG',\n        version: 'V3R3',\n        releaseDate: '2024-04-19',\n        description: 'Security Technical Implementation Guide for Cisco IOS XE 17.x Routers',\n        applicableSystemTypes: [\n            'Router',\n            'Network',\n            'Cisco',\n            'Infrastructure'\n        ],\n        triggerKeywords: [\n            'cisco',\n            'ios xe',\n            'router',\n            'routing',\n            'ospf',\n            'bgp',\n            'snmp',\n            'acl'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC'\n        ],\n        priority: 'High',\n        actualRequirements: 152,\n        stigId: 'CISC-RT-000010',\n        validated: false\n    },\n    {\n        id: 'cisco-ios-switch',\n        name: 'Cisco IOS Switch STIG',\n        version: 'V3R2',\n        releaseDate: '2024-04-19',\n        description: 'Security Technical Implementation Guide for Cisco IOS Switches',\n        applicableSystemTypes: [\n            'Switch',\n            'Network',\n            'Cisco',\n            'Infrastructure'\n        ],\n        triggerKeywords: [\n            'cisco',\n            'ios',\n            'switch',\n            'switching',\n            'vlan',\n            'stp',\n            'port security'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC'\n        ],\n        priority: 'High',\n        actualRequirements: 141,\n        stigId: 'CISC-L2S-000010',\n        validated: false\n    },\n    // Virtualization and Cloud STIGs\n    {\n        id: 'vmware-vsphere-8',\n        name: 'VMware vSphere 8.0 STIG',\n        version: 'V2R1',\n        releaseDate: '2024-10-24',\n        description: 'Security Technical Implementation Guide for VMware vSphere 8.0',\n        applicableSystemTypes: [\n            'VMware',\n            'Virtualization',\n            'Hypervisor',\n            'Cloud'\n        ],\n        triggerKeywords: [\n            'vmware',\n            'vsphere',\n            'vcenter',\n            'esxi',\n            'virtualization',\n            'hypervisor',\n            'vm'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 234,\n        stigId: 'VMCH-80-000001',\n        validated: false\n    },\n    {\n        id: 'docker-enterprise',\n        name: 'Docker Enterprise 2.x STIG',\n        version: 'V2R2',\n        releaseDate: '2023-06-15',\n        description: 'Security Technical Implementation Guide for Docker Enterprise',\n        applicableSystemTypes: [\n            'Docker',\n            'Container',\n            'Cloud'\n        ],\n        triggerKeywords: [\n            'docker',\n            'container',\n            'containerization'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'Medium',\n        actualRequirements: 103,\n        stigId: 'DKER-EE-001000',\n        validated: false\n    },\n    {\n        id: 'kubernetes',\n        name: 'Kubernetes STIG',\n        version: 'V2R1',\n        releaseDate: '2024-05-10',\n        description: 'Security Technical Implementation Guide for Kubernetes',\n        applicableSystemTypes: [\n            'Container',\n            'Kubernetes',\n            'Orchestration',\n            'Cloud'\n        ],\n        triggerKeywords: [\n            'kubernetes',\n            'k8s',\n            'container orchestration',\n            'pod',\n            'deployment',\n            'service',\n            'cluster'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 97,\n        stigId: 'CNTR-K8-000110',\n        validated: false\n    },\n    // Web Server STIGs\n    {\n        id: 'apache-server-2-4',\n        name: 'Apache Server 2.4 STIG',\n        version: 'V3R1',\n        releaseDate: '2024-03-22',\n        description: 'Security Technical Implementation Guide for Apache HTTP Server 2.4',\n        applicableSystemTypes: [\n            'Web Server',\n            'Apache',\n            'HTTP'\n        ],\n        triggerKeywords: [\n            'apache',\n            'httpd',\n            'web server',\n            'http',\n            'https',\n            'ssl',\n            'tls'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 93,\n        stigId: 'AS24-U1-000010',\n        validated: false\n    },\n    {\n        id: 'microsoft-iis-10',\n        name: 'Microsoft IIS 10.0 Server STIG',\n        version: 'V3R1',\n        releaseDate: '2024-06-28',\n        description: 'Security Technical Implementation Guide for Microsoft Internet Information Services 10.0',\n        applicableSystemTypes: [\n            'Web Server',\n            'IIS',\n            'Windows',\n            'HTTP'\n        ],\n        triggerKeywords: [\n            'iis',\n            'internet information services',\n            'web server',\n            'asp.net',\n            'windows web'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 107,\n        stigId: 'IIST-SV-000101',\n        validated: false\n    },\n    // Database STIGs\n    {\n        id: 'microsoft-sql-server-2022',\n        name: 'MS SQL Server 2022 Instance STIG',\n        version: 'V1R1',\n        releaseDate: '2024-06-21',\n        description: 'Security Technical Implementation Guide for Microsoft SQL Server 2022',\n        applicableSystemTypes: [\n            'Database',\n            'SQL Server',\n            'Microsoft',\n            'RDBMS'\n        ],\n        triggerKeywords: [\n            'sql server',\n            'mssql',\n            'database',\n            'rdbms',\n            'tsql',\n            'sql',\n            'microsoft database'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 138,\n        stigId: 'SQL6-D0-000100',\n        validated: false\n    },\n    {\n        id: 'oracle-database-19c',\n        name: 'Oracle Database 19c STIG',\n        version: 'V3R1',\n        releaseDate: '2024-06-21',\n        description: 'Security Technical Implementation Guide for Oracle Database 19c',\n        applicableSystemTypes: [\n            'Database',\n            'Oracle',\n            'RDBMS'\n        ],\n        triggerKeywords: [\n            'oracle',\n            'database',\n            'rdbms',\n            'plsql',\n            'oracle db'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 156,\n        stigId: 'O121-C2-000100',\n        validated: false\n    },\n    {\n        id: 'postgresql-9x',\n        name: 'PostgreSQL 9.x STIG',\n        version: 'V2R5',\n        releaseDate: '2023-09-12',\n        description: 'Security Technical Implementation Guide for PostgreSQL Database 9.x',\n        applicableSystemTypes: [\n            'Database',\n            'PostgreSQL',\n            'RDBMS',\n            'Open Source'\n        ],\n        triggerKeywords: [\n            'postgresql',\n            'postgres',\n            'database',\n            'rdbms',\n            'sql',\n            'db',\n            'psql'\n        ],\n        controlFamilies: [\n            'AC',\n            'AU',\n            'CM',\n            'SC',\n            'SI'\n        ],\n        priority: 'High',\n        actualRequirements: 122,\n        stigId: 'PGS9-00-000100',\n        validated: false\n    }\n];\n// Scoring weights for transparent and consistent recommendations\nconst SCORING_WEIGHTS = {\n    KEYWORD_MATCH_BASE: 2,\n    KEYWORD_MATCH_APP_SECURITY: 3,\n    KEYWORD_MATCH_TECH_SPECIFIC: 5,\n    CONTROL_FAMILY_MATCH: 3,\n    DESIGN_ELEMENT_KEYWORD: 2,\n    DESIGN_ELEMENT_TYPE: 3,\n    DESIGN_ELEMENT_EXACT_TECH: 6,\n    DEVELOPMENT_ENVIRONMENT_BONUS: 5,\n    INFRASTRUCTURE_PENALTY_IN_DEV: -3,\n    MIN_CRITICAL_CONFIDENCE: 80,\n    MIN_HIGH_CONFIDENCE: 60,\n    MIN_MEDIUM_CONFIDENCE: 40\n};\n/**\r\n * Analyzes requirements and design elements to recommend STIG families\r\n */ function getStigFamilyRecommendations(requirements, designElements) {\n    const recommendations = [];\n    for (const stigFamily of STIG_FAMILIES){\n        const recommendation = analyzeStigFamily(stigFamily, requirements, designElements);\n        if (recommendation.confidenceScore > 0) {\n            recommendations.push(recommendation);\n        }\n    }\n    // Sort by confidence score (descending - highest confidence first)\n    return recommendations.sort((a, b)=>{\n        return b.confidenceScore - a.confidenceScore;\n    });\n}\nfunction analyzeStigFamily(stigFamily, requirements, designElements) {\n    const scoreBreakdown = {\n        keywordMatches: 0,\n        controlFamilyMatches: 0,\n        designElementMatches: 0,\n        technologySpecificBonus: 0,\n        environmentBonus: 0,\n        penalties: 0\n    };\n    const matchingRequirements = [];\n    const matchingDesignElements = [];\n    const reasoning = [];\n    // Detect environment type\n    const isDevelopmentEnvironment = detectDevelopmentEnvironment(designElements);\n    const detectedTechnologies = detectTechnologies(designElements);\n    // Apply environment bonus for app security STIGs\n    if (isDevelopmentEnvironment && isApplicationSecurityStig(stigFamily.id)) {\n        scoreBreakdown.environmentBonus = SCORING_WEIGHTS.DEVELOPMENT_ENVIRONMENT_BONUS;\n        reasoning.push(\"✓ Development environment detected - application security controls are essential\");\n    }\n    // Analyze requirements\n    for (const req of requirements){\n        const reqText = \"\".concat(req.title, \" \").concat(req.description, \" \").concat(req.category, \" \").concat(req.controlFamily || '', \" \").concat(req.source).toLowerCase();\n        // Check for keyword matches\n        const keywordMatches = stigFamily.triggerKeywords.filter((keyword)=>reqText.includes(keyword.toLowerCase()));\n        if (keywordMatches.length > 0) {\n            const weight = isApplicationSecurityStig(stigFamily.id) ? SCORING_WEIGHTS.KEYWORD_MATCH_APP_SECURITY : SCORING_WEIGHTS.KEYWORD_MATCH_BASE;\n            scoreBreakdown.keywordMatches += keywordMatches.length * weight;\n            matchingRequirements.push(req.id);\n            reasoning.push('✓ Requirement \"'.concat(req.title, '\" matches: ').concat(keywordMatches.join(', ')));\n        }\n        // Check for control family matches\n        if (req.controlFamily && stigFamily.controlFamilies.includes(req.controlFamily)) {\n            scoreBreakdown.controlFamilyMatches += SCORING_WEIGHTS.CONTROL_FAMILY_MATCH;\n            if (!matchingRequirements.includes(req.id)) {\n                matchingRequirements.push(req.id);\n            }\n            reasoning.push(\"✓ Control family \".concat(req.controlFamily, \" applies to this STIG\"));\n        }\n    }\n    // Analyze design elements with enhanced technology detection\n    for (const element of designElements){\n        const elementText = \"\".concat(element.name, \" \").concat(element.description, \" \").concat(element.type, \" \").concat(element.technology || '').toLowerCase();\n        // Check for keyword matches\n        const keywordMatches = stigFamily.triggerKeywords.filter((keyword)=>elementText.includes(keyword.toLowerCase()));\n        // Check for system type matches\n        const typeMatches = stigFamily.applicableSystemTypes.filter((type)=>elementText.includes(type.toLowerCase()) || element.type.toLowerCase().includes(type.toLowerCase()));\n        if (keywordMatches.length > 0 || typeMatches.length > 0) {\n            // Check for exact technology matches\n            const hasExactTechMatch = checkExactTechnologyMatch(elementText, stigFamily.id, detectedTechnologies);\n            if (hasExactTechMatch) {\n                scoreBreakdown.technologySpecificBonus += SCORING_WEIGHTS.DESIGN_ELEMENT_EXACT_TECH;\n                reasoning.push(\"⭐ Direct technology match: \".concat(element.name, \" requires specific \").concat(stigFamily.name));\n            }\n            scoreBreakdown.designElementMatches += keywordMatches.length * SCORING_WEIGHTS.DESIGN_ELEMENT_KEYWORD + typeMatches.length * SCORING_WEIGHTS.DESIGN_ELEMENT_TYPE;\n            matchingDesignElements.push(element.id);\n            if (keywordMatches.length > 0) {\n                reasoning.push('✓ Design element \"'.concat(element.name, '\" matches: ').concat(keywordMatches.join(', ')));\n            }\n            if (typeMatches.length > 0) {\n                reasoning.push(\"✓ System type match: \".concat(typeMatches.join(', ')));\n            }\n        }\n    }\n    // Apply penalties for infrastructure STIGs in development environments\n    if (isDevelopmentEnvironment && isInfrastructureStig(stigFamily.id)) {\n        scoreBreakdown.penalties = SCORING_WEIGHTS.INFRASTRUCTURE_PENALTY_IN_DEV;\n        if (scoreBreakdown.keywordMatches + scoreBreakdown.designElementMatches > 0) {\n            reasoning.push(\"⚠ Infrastructure STIG - lower priority for application development\");\n        }\n    }\n    // Calculate total relevance score\n    const relevanceScore = Math.max(0, scoreBreakdown.keywordMatches + scoreBreakdown.controlFamilyMatches + scoreBreakdown.designElementMatches + scoreBreakdown.technologySpecificBonus + scoreBreakdown.environmentBonus + scoreBreakdown.penalties);\n    // Calculate confidence score (0-100)\n    const confidenceScore = calculateConfidenceScore(matchingRequirements.length, matchingDesignElements.length, stigFamily, detectedTechnologies);\n    // Determine implementation priority based on confidence score\n    let implementationPriority = 'Low';\n    if (confidenceScore >= SCORING_WEIGHTS.MIN_CRITICAL_CONFIDENCE && stigFamily.priority === 'High') {\n        implementationPriority = 'Critical';\n    } else if (confidenceScore >= SCORING_WEIGHTS.MIN_HIGH_CONFIDENCE || stigFamily.priority === 'High') {\n        implementationPriority = 'High';\n    } else if (confidenceScore >= SCORING_WEIGHTS.MIN_MEDIUM_CONFIDENCE || stigFamily.priority === 'Medium') {\n        implementationPriority = 'Medium';\n    }\n    return {\n        stigFamily,\n        confidenceScore,\n        matchingRequirements,\n        matchingDesignElements,\n        reasoning,\n        implementationPriority,\n        scoreBreakdown\n    };\n}\n/**\r\n * Detect if this is a development/application environment\r\n */ function detectDevelopmentEnvironment(designElements) {\n    return designElements.some((element)=>{\n        const text = \"\".concat(element.name, \" \").concat(element.description, \" \").concat(element.type, \" \").concat(element.technology || '').toLowerCase();\n        return text.includes('node') || text.includes('javascript') || text.includes('postgres') || text.includes('api') || text.includes('application') || text.includes('web') || text.includes('frontend') || text.includes('backend') || text.includes('database') || text.includes('server');\n    });\n}\n/**\r\n * Detect specific technologies in use\r\n */ function detectTechnologies(designElements) {\n    const technologies = new Set();\n    const techPatterns = {\n        'postgresql': /postgres(ql)?/i,\n        'docker': /docker|container/i,\n        'kubernetes': /k8s|kubernetes/i,\n        'apache': /apache|httpd/i,\n        'windows': /windows/i,\n        'linux': /linux|ubuntu|rhel|redhat/i\n    };\n    designElements.forEach((element)=>{\n        const text = \"\".concat(element.name, \" \").concat(element.description, \" \").concat(element.type, \" \").concat(element.technology || '').toLowerCase();\n        Object.entries(techPatterns).forEach((param)=>{\n            let [tech, pattern] = param;\n            if (pattern.test(text)) {\n                technologies.add(tech);\n            }\n        });\n    });\n    return technologies;\n}\n/**\r\n * Check if STIG is application security focused\r\n */ function isApplicationSecurityStig(stigId) {\n    return stigId.includes('application') || stigId.includes('web');\n}\n/**\r\n * Check if STIG is infrastructure focused\r\n */ function isInfrastructureStig(stigId) {\n    return stigId.includes('windows-server') || stigId.includes('cisco') || stigId.includes('vmware') || stigId.includes('rhel') || stigId.includes('ubuntu');\n}\n/**\r\n * Check for exact technology matches\r\n */ function checkExactTechnologyMatch(elementText, stigId, detectedTechs) {\n    const exactMatches = {\n        'postgresql-9x': [\n            'postgresql'\n        ],\n        'docker-enterprise': [\n            'docker'\n        ],\n        'kubernetes': [\n            'kubernetes'\n        ],\n        'apache-server-2-4': [\n            'apache'\n        ]\n    };\n    const requiredTechs = exactMatches[stigId];\n    if (!requiredTechs) return false;\n    return requiredTechs.some((tech)=>detectedTechs.has(tech));\n}\n/**\r\n * Calculate confidence score (0-100) based on match quality\r\n */ function calculateConfidenceScore(reqMatches, designMatches, stigFamily, detectedTechs) {\n    let score = 0;\n    // Base score from matches\n    score += Math.min(reqMatches * 10, 30); // Up to 30 points from requirements\n    score += Math.min(designMatches * 15, 40); // Up to 40 points from design elements\n    // Bonus for validated STIGs\n    if (stigFamily.validated) {\n        score += 10;\n    }\n    // Bonus for exact technology match\n    if (checkExactTechnologyMatch('', stigFamily.id, detectedTechs)) {\n        score += 20;\n    }\n    return Math.min(score, 100);\n}\n/**\r\n * Get STIG database status and update information\r\n */ function getStigDatabaseStatus() {\n    const totalFamilies = STIG_FAMILIES.length;\n    const validatedFamilies = STIG_FAMILIES.filter((family)=>family.validated).length;\n    // Check if any families need updates (older than 6 months)\n    const sixMonthsAgo = new Date();\n    sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);\n    const outdatedFamilies = STIG_FAMILIES.filter((family)=>{\n        const releaseDate = new Date(family.releaseDate);\n        return releaseDate < sixMonthsAgo && !family.validated;\n    });\n    // Check if review is overdue\n    const nextReviewDate = new Date(STIG_DATABASE_METADATA.nextReviewDue);\n    const isReviewOverdue = new Date() > nextReviewDate;\n    return {\n        ...STIG_DATABASE_METADATA,\n        totalStigFamilies: totalFamilies,\n        validatedFamilies: validatedFamilies,\n        validationPercentage: Math.round(validatedFamilies / totalFamilies * 100),\n        outdatedFamilies: outdatedFamilies.length,\n        isReviewOverdue,\n        daysUntilReview: Math.ceil((nextReviewDate.getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24)),\n        healthScore: calculateDatabaseHealthScore(validatedFamilies, totalFamilies, outdatedFamilies.length, isReviewOverdue)\n    };\n}\n/**\r\n * Calculate a health score for the STIG database (0-100)\r\n */ function calculateDatabaseHealthScore(validated, total, outdated, overdue) {\n    let score = 100;\n    // Deduct points for unvalidated families\n    const validationScore = validated / total * 40;\n    score = score - 40 + validationScore;\n    // Deduct points for outdated families\n    const outdatedPenalty = outdated / total * 30;\n    score -= outdatedPenalty;\n    // Deduct points if review is overdue\n    if (overdue) {\n        score -= 20;\n    }\n    return Math.max(0, Math.round(score));\n}\n/**\r\n * Get estimated implementation effort for recommended STIG families\r\n */ function getImplementationEffort(recommendations) {\n    const totalRequirements = recommendations.reduce((sum, rec)=>sum + rec.stigFamily.actualRequirements, 0);\n    const criticalCount = recommendations.filter((r)=>r.implementationPriority === 'Critical').length;\n    const highCount = recommendations.filter((r)=>r.implementationPriority === 'High').length;\n    const mediumCount = recommendations.filter((r)=>r.implementationPriority === 'Medium').length;\n    // Estimation: 1.5 hours per requirement on average (includes documentation, testing, review)\n    const estimatedHours = totalRequirements * 1.5;\n    const estimatedDays = Math.ceil(estimatedHours / 8);\n    return {\n        totalRequirements,\n        estimatedHours: Math.round(estimatedHours),\n        estimatedDays,\n        priorityCounts: {\n            critical: criticalCount,\n            high: highCount,\n            medium: mediumCount,\n            low: recommendations.length - criticalCount - highCount - mediumCount\n        }\n    };\n}\n// Default configuration\nconst AUTO_UPDATE_CONFIG = {\n    enabled: true,\n    checkFrequency: 'weekly',\n    lastCheck: '2025-10-02',\n    sources: {\n        disaRss: true,\n        stigViewer: true,\n        manual: false\n    },\n    notifications: {\n        email: false,\n        inApp: true\n    },\n    autoUpdatePreferences: {\n        criticalOnly: false,\n        requireManualApproval: false,\n        backupBeforeUpdate: true,\n        autoApply: true // NEW: Automatically apply updates without user intervention\n    }\n};\n/**\r\n * Check for STIG updates automatically\r\n * This function can be called periodically to check for new STIG releases\r\n */ async function checkForStigUpdates() {\n    const updates = [];\n    const now = new Date().toISOString().split('T')[0];\n    try {\n        // Check DISA RSS Feed for updates\n        if (AUTO_UPDATE_CONFIG.sources.disaRss) {\n            const rssUpdates = await checkDisaRssFeed();\n            updates.push(...rssUpdates);\n        }\n        // Check STIG Viewer for version changes\n        if (AUTO_UPDATE_CONFIG.sources.stigViewer) {\n            const stigViewerUpdates = await checkStigViewerUpdates();\n            updates.push(...stigViewerUpdates);\n        }\n        // Update last check time\n        AUTO_UPDATE_CONFIG.lastCheck = now;\n        return updates;\n    } catch (error) {\n        console.error('Error checking for STIG updates:', error);\n        return [];\n    }\n}\n/**\r\n * Check DISA RSS Feed for new STIG releases\r\n * This now actually fetches from DISA Cyber Exchange\r\n */ async function checkDisaRssFeed() {\n    const updates = [];\n    try {\n        console.log('🔍 Checking DISA RSS feed for updates...');\n        // Determine if we're in browser or server context\n        const isBrowser = \"object\" !== 'undefined';\n        let response;\n        let data;\n        if (isBrowser) {\n            // Browser: use our API proxy to avoid CORS\n            response = await fetch('/api/fetch-disa-rss');\n            if (!response.ok) {\n                console.warn('⚠️ DISA RSS feed unavailable, falling back to date-based checks');\n                return checkByDateOnly();\n            }\n            data = await response.json();\n        } else {\n            // Server: fetch directly from DISA (no CORS issues server-side)\n            console.log('🌐 Fetching directly from DISA (server-side)...');\n            try {\n                response = await fetch('https://public.cyber.mil/stigs/rss/', {\n                    headers: {\n                        'User-Agent': 'SRTM-Tool/3.0'\n                    }\n                });\n                if (!response.ok) {\n                    console.warn('⚠️ DISA RSS feed unavailable, falling back to date-based checks');\n                    return checkByDateOnly();\n                }\n                const xmlText = await response.text();\n                // Parse RSS XML (simple regex-based parsing)\n                const items = [];\n                const itemRegex = RegExp(\"<item>(.*?)<\\\\/item>\", \"gs\");\n                const matches = xmlText.matchAll(itemRegex);\n                for (const match of matches){\n                    var _itemContent_match, _itemContent_match1, _itemContent_match2, _itemContent_match3;\n                    const itemContent = match[1];\n                    const title = ((_itemContent_match = itemContent.match(/<title>(.*?)<\\/title>/)) === null || _itemContent_match === void 0 ? void 0 : _itemContent_match[1]) || '';\n                    const link = ((_itemContent_match1 = itemContent.match(/<link>(.*?)<\\/link>/)) === null || _itemContent_match1 === void 0 ? void 0 : _itemContent_match1[1]) || '';\n                    const pubDate = ((_itemContent_match2 = itemContent.match(/<pubDate>(.*?)<\\/pubDate>/)) === null || _itemContent_match2 === void 0 ? void 0 : _itemContent_match2[1]) || '';\n                    const description = ((_itemContent_match3 = itemContent.match(/<description>(.*?)<\\/description>/)) === null || _itemContent_match3 === void 0 ? void 0 : _itemContent_match3[1]) || '';\n                    items.push({\n                        title,\n                        link,\n                        pubDate,\n                        description\n                    });\n                }\n                data = {\n                    success: true,\n                    items,\n                    releases: items\n                };\n                console.log(\"✅ Fetched \".concat(items.length, \" items from DISA RSS\"));\n            } catch (error) {\n                console.error('❌ Error fetching from DISA directly:', error);\n                return checkByDateOnly();\n            }\n        }\n        if (data.success && data.releases) {\n            // Parse RSS data and compare with our STIG families\n            for (const family of STIG_FAMILIES){\n                // Look for matching STIG in the RSS feed\n                const match = data.releases.find((release)=>release.name.toLowerCase().includes(family.name.toLowerCase().split(' ')[0]) || release.stigId === family.stigId);\n                if (match) {\n                    const localDate = new Date(family.releaseDate);\n                    const remoteDate = new Date(match.releaseDate);\n                    if (remoteDate > localDate) {\n                        updates.push({\n                            stigId: family.id,\n                            currentVersion: family.version,\n                            latestVersion: match.version || 'Unknown',\n                            currentReleaseDate: family.releaseDate,\n                            latestReleaseDate: match.releaseDate,\n                            updateAvailable: true,\n                            severity: determineSeverity(family, localDate, remoteDate),\n                            lastChecked: new Date().toISOString().split('T')[0],\n                            source: 'DISA RSS',\n                            updateNotes: \"New version available: \".concat(match.version || 'Unknown', \" (Released: \").concat(match.releaseDate, \")\")\n                        });\n                    }\n                }\n            }\n        }\n        console.log(\"✅ Found \".concat(updates.length, \" updates from DISA RSS\"));\n    } catch (error) {\n        console.error('❌ Error checking DISA RSS feed:', error);\n        // Fallback to date-based checking\n        return checkByDateOnly();\n    }\n    return updates;\n}\n/**\r\n * Fallback: Check by date only if RSS is unavailable\r\n */ function checkByDateOnly() {\n    const updates = [];\n    const sixMonthsAgo = new Date();\n    sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);\n    for (const family of STIG_FAMILIES){\n        const releaseDate = new Date(family.releaseDate);\n        if (releaseDate < sixMonthsAgo && !family.validated) {\n            updates.push({\n                stigId: family.id,\n                currentVersion: family.version,\n                currentReleaseDate: family.releaseDate,\n                updateAvailable: true,\n                severity: 'medium',\n                lastChecked: new Date().toISOString().split('T')[0],\n                source: 'Date Check',\n                updateNotes: 'STIG is older than 6 months - check DISA for updates'\n            });\n        }\n    }\n    return updates;\n}\n/**\r\n * Determine update severity based on age and type\r\n */ function determineSeverity(family, localDate, remoteDate) {\n    const monthsDiff = (remoteDate.getTime() - localDate.getTime()) / (1000 * 60 * 60 * 24 * 30);\n    // Critical: Security-focused STIGs with major version differences\n    if (family.priority === 'High' && monthsDiff > 6) return 'critical';\n    // High: High-priority STIGs or significant time difference\n    if (family.priority === 'High' || monthsDiff > 4) return 'high';\n    // Medium: Moderate priority or time difference\n    if (monthsDiff > 2) return 'medium';\n    return 'low';\n}\n/**\r\n * Check STIG Viewer for version updates\r\n */ async function checkStigViewerUpdates() {\n    const updates = [];\n    try {\n        console.log('Checking STIG Viewer for updates...');\n        // Placeholder for STIG Viewer API calls\n        // In production, this would:\n        // 1. Query stigviewer.com API (if available) or scrape data\n        // 2. Compare versions with current data\n        // 3. Identify outdated STIGs\n        // For now, check for STIGs older than 6 months\n        const sixMonthsAgo = new Date();\n        sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);\n        for (const family of STIG_FAMILIES){\n            const releaseDate = new Date(family.releaseDate);\n            if (releaseDate < sixMonthsAgo && !family.validated) {\n                updates.push({\n                    stigId: family.id,\n                    currentVersion: family.version,\n                    currentReleaseDate: family.releaseDate,\n                    updateAvailable: true,\n                    severity: 'medium',\n                    lastChecked: new Date().toISOString().split('T')[0],\n                    source: 'STIG Viewer',\n                    updateNotes: 'STIG is older than 6 months - check for newer version'\n                });\n            }\n        }\n    } catch (error) {\n        console.error('Error checking STIG Viewer:', error);\n    }\n    return updates;\n}\n/**\r\n * Get pending updates that need attention\r\n */ function getPendingUpdates() {\n    // In a real implementation, this would return cached update results\n    // For now, return a simulated list\n    return [\n        {\n            stigId: 'application-security-dev',\n            currentVersion: 'V6',\n            latestVersion: 'V7',\n            currentReleaseDate: '2025-02-12',\n            latestReleaseDate: '2025-09-15',\n            updateAvailable: true,\n            severity: 'high',\n            lastChecked: '2025-10-02',\n            source: 'DISA RSS',\n            updateNotes: 'New version available with security enhancements'\n        },\n        {\n            stigId: 'web-server-srg',\n            currentVersion: 'V4',\n            currentReleaseDate: '2025-02-12',\n            updateAvailable: true,\n            severity: 'medium',\n            lastChecked: '2025-10-02',\n            source: 'STIG Viewer',\n            updateNotes: 'Version validation needed against official source'\n        }\n    ];\n}\n/**\r\n * Enable or disable automatic update checking\r\n */ function setAutoUpdateEnabled(enabled) {\n    AUTO_UPDATE_CONFIG.enabled = enabled;\n    if (enabled) {\n        console.log('✅ Automatic STIG update checking enabled');\n        console.log(\"\\uD83D\\uDCC5 Check frequency: \".concat(AUTO_UPDATE_CONFIG.checkFrequency));\n        console.log(\"\\uD83D\\uDD14 Notifications: \".concat(AUTO_UPDATE_CONFIG.notifications.inApp ? 'In-app' : 'Disabled'));\n    } else {\n        console.log('❌ Automatic STIG update checking disabled');\n    }\n}\n/**\r\n * Simulate periodic update check (would be called by a scheduler)\r\n */ async function performScheduledUpdateCheck() {\n    if (!AUTO_UPDATE_CONFIG.enabled) {\n        return;\n    }\n    const lastCheck = new Date(AUTO_UPDATE_CONFIG.lastCheck);\n    const now = new Date();\n    const daysSinceLastCheck = Math.floor((now.getTime() - lastCheck.getTime()) / (1000 * 60 * 60 * 24));\n    let shouldCheck = false;\n    switch(AUTO_UPDATE_CONFIG.checkFrequency){\n        case 'daily':\n            shouldCheck = daysSinceLastCheck >= 1;\n            break;\n        case 'weekly':\n            shouldCheck = daysSinceLastCheck >= 7;\n            break;\n        case 'monthly':\n            shouldCheck = daysSinceLastCheck >= 30;\n            break;\n    }\n    if (shouldCheck) {\n        console.log('🔍 Performing scheduled STIG update check...');\n        const updates = await checkForStigUpdates();\n        if (updates.length > 0) {\n            console.log(\"\\uD83D\\uDCCB Found \".concat(updates.length, \" potential updates\"));\n            // Automatically apply updates if autoApply is enabled\n            if (AUTO_UPDATE_CONFIG.autoUpdatePreferences.autoApply) {\n                console.log('🤖 Auto-apply enabled - applying updates automatically...');\n                // Filter updates if criticalOnly is enabled\n                let updatesToApply = updates;\n                if (AUTO_UPDATE_CONFIG.autoUpdatePreferences.criticalOnly) {\n                    updatesToApply = updates.filter((u)=>u.severity === 'critical' || u.severity === 'high');\n                    console.log(\"\\uD83D\\uDCCB Filtered to \".concat(updatesToApply.length, \" critical/high priority updates\"));\n                }\n                if (updatesToApply.length > 0) {\n                    const results = applyMultipleStigUpdates(updatesToApply);\n                    const successCount = results.filter((r)=>r.success).length;\n                    console.log(\"✅ Auto-applied \".concat(successCount, \"/\").concat(results.length, \" updates\"));\n                    // Update validation flags to true since these come from official sources\n                    results.forEach((r)=>{\n                        if (r.success) {\n                            const stigIndex = STIG_FAMILIES.findIndex((s)=>s.id === r.stigId);\n                            if (stigIndex !== -1) {\n                                STIG_FAMILIES[stigIndex].validated = true;\n                                console.log(\"✅ Auto-validated \".concat(r.stigId, \" from official DISA source\"));\n                            }\n                        }\n                    });\n                }\n            } else if (!AUTO_UPDATE_CONFIG.autoUpdatePreferences.requireManualApproval) {\n                // Legacy behavior: just notify\n                console.log('⚠️ Manual approval disabled but autoApply not enabled - updates pending');\n            }\n            // Send notifications if enabled\n            if (AUTO_UPDATE_CONFIG.notifications.inApp) {\n                console.log('🔔 In-app notification: STIG updates available');\n            }\n            if (AUTO_UPDATE_CONFIG.notifications.email) {\n                console.log('📧 Email notification: STIG updates available');\n            }\n        } else {\n            console.log('✅ No STIG updates found');\n        }\n    }\n}\n/**\r\n * Get next scheduled update check date\r\n */ function getNextUpdateCheck() {\n    const lastCheck = new Date(AUTO_UPDATE_CONFIG.lastCheck);\n    const nextCheck = new Date(lastCheck);\n    switch(AUTO_UPDATE_CONFIG.checkFrequency){\n        case 'daily':\n            nextCheck.setDate(nextCheck.getDate() + 1);\n            break;\n        case 'weekly':\n            nextCheck.setDate(nextCheck.getDate() + 7);\n            break;\n        case 'monthly':\n            nextCheck.setMonth(nextCheck.getMonth() + 1);\n            break;\n    }\n    return nextCheck.toISOString().split('T')[0];\n}\n// Backup storage for rollback capability\nconst STIG_BACKUPS = {};\n/**\r\n * Apply a single update to the STIG database\r\n */ function applyStigUpdate(update) {\n    try {\n        console.log(\"\\uD83D\\uDD04 Applying update for \".concat(update.stigId, \"...\"));\n        // Find the STIG family in the database\n        const stigIndex = STIG_FAMILIES.findIndex((family)=>family.id === update.stigId);\n        if (stigIndex === -1) {\n            return {\n                success: false,\n                stigId: update.stigId,\n                oldVersion: update.currentVersion,\n                newVersion: update.latestVersion || 'Unknown',\n                oldReleaseDate: update.currentReleaseDate,\n                newReleaseDate: update.latestReleaseDate || 'Unknown',\n                backupCreated: false,\n                message: 'STIG family not found in database',\n                error: 'STIG_NOT_FOUND'\n            };\n        }\n        const originalStig = STIG_FAMILIES[stigIndex];\n        // Create backup before updating\n        if (AUTO_UPDATE_CONFIG.autoUpdatePreferences.backupBeforeUpdate) {\n            if (!STIG_BACKUPS[update.stigId]) {\n                STIG_BACKUPS[update.stigId] = [];\n            }\n            STIG_BACKUPS[update.stigId].push({\n                ...originalStig\n            });\n            console.log(\"\\uD83D\\uDCBE Backup created for \".concat(update.stigId));\n        }\n        // Apply the update\n        const oldVersion = originalStig.version;\n        const oldReleaseDate = originalStig.releaseDate;\n        const oldRequirements = originalStig.actualRequirements;\n        STIG_FAMILIES[stigIndex] = {\n            ...originalStig,\n            version: update.latestVersion || originalStig.version,\n            releaseDate: update.latestReleaseDate || originalStig.releaseDate,\n            actualRequirements: update.actualRequirements || originalStig.actualRequirements,\n            validated: false // Mark as unvalidated since it's just updated\n        };\n        // Update metadata\n        STIG_DATABASE_METADATA.lastUpdated = new Date().toISOString().split('T')[0];\n        console.log(\"✅ Successfully updated \".concat(update.stigId));\n        console.log(\"   \".concat(oldVersion, \" → \").concat(update.latestVersion));\n        console.log(\"   \".concat(oldReleaseDate, \" → \").concat(update.latestReleaseDate));\n        return {\n            success: true,\n            stigId: update.stigId,\n            oldVersion,\n            newVersion: update.latestVersion || oldVersion,\n            oldReleaseDate,\n            newReleaseDate: update.latestReleaseDate || oldReleaseDate,\n            oldRequirements,\n            newRequirements: update.actualRequirements,\n            backupCreated: AUTO_UPDATE_CONFIG.autoUpdatePreferences.backupBeforeUpdate,\n            message: \"Successfully updated \".concat(update.stigId, \" from \").concat(oldVersion, \" to \").concat(update.latestVersion)\n        };\n    } catch (error) {\n        console.error(\"❌ Error applying update for \".concat(update.stigId, \":\"), error);\n        return {\n            success: false,\n            stigId: update.stigId,\n            oldVersion: update.currentVersion,\n            newVersion: update.latestVersion || 'Unknown',\n            oldReleaseDate: update.currentReleaseDate,\n            newReleaseDate: update.latestReleaseDate || 'Unknown',\n            backupCreated: false,\n            message: 'Failed to apply update',\n            error: error.message\n        };\n    }\n}\n/**\r\n * Apply multiple updates in batch\r\n */ function applyMultipleStigUpdates(updates) {\n    console.log(\"\\uD83D\\uDD04 Applying \".concat(updates.length, \" updates in batch...\"));\n    const results = [];\n    let successCount = 0;\n    let failureCount = 0;\n    for (const update of updates){\n        const result = applyStigUpdate(update);\n        results.push(result);\n        if (result.success) {\n            successCount++;\n        } else {\n            failureCount++;\n        }\n    }\n    console.log(\"✅ Batch update complete: \".concat(successCount, \" successful, \").concat(failureCount, \" failed\"));\n    return results;\n}\n/**\r\n * Rollback a single STIG to its previous version\r\n */ function rollbackStigUpdate(stigId) {\n    try {\n        const backups = STIG_BACKUPS[stigId];\n        if (!backups || backups.length === 0) {\n            return {\n                success: false,\n                message: \"No backup found for \".concat(stigId)\n            };\n        }\n        // Get the most recent backup\n        const backup = backups.pop();\n        // Find and restore the STIG\n        const stigIndex = STIG_FAMILIES.findIndex((family)=>family.id === stigId);\n        if (stigIndex === -1) {\n            return {\n                success: false,\n                message: \"STIG family \".concat(stigId, \" not found\")\n            };\n        }\n        STIG_FAMILIES[stigIndex] = backup;\n        console.log(\"↩️ Rolled back \".concat(stigId, \" to version \").concat(backup.version));\n        return {\n            success: true,\n            message: \"Successfully rolled back \".concat(stigId, \" to \").concat(backup.version)\n        };\n    } catch (error) {\n        console.error(\"❌ Error rolling back \".concat(stigId, \":\"), error);\n        return {\n            success: false,\n            message: \"Failed to rollback: \".concat(error.message)\n        };\n    }\n}\n/**\r\n * Get all available backups\r\n */ function getAvailableBackups() {\n    const backupCounts = {};\n    for (const [stigId, backups] of Object.entries(STIG_BACKUPS)){\n        backupCounts[stigId] = backups.length;\n    }\n    return backupCounts;\n}\n/**\r\n * Clear all backups (use with caution)\r\n */ function clearAllBackups() {\n    const count = Object.keys(STIG_BACKUPS).length;\n    Object.keys(STIG_BACKUPS).forEach((key)=>delete STIG_BACKUPS[key]);\n    console.log(\"\\uD83D\\uDDD1️ Cleared \".concat(count, \" backup(s)\"));\n}\n/**\r\n * Export current STIG database as JSON (for manual backup)\r\n */ function exportStigDatabase() {\n    return JSON.stringify({\n        metadata: STIG_DATABASE_METADATA,\n        families: STIG_FAMILIES,\n        exportDate: new Date().toISOString(),\n        version: '1.0'\n    }, null, 2);\n}\n/**\r\n * Import STIG database from JSON backup (for restoration)\r\n */ function importStigDatabase(jsonData) {\n    try {\n        const data = JSON.parse(jsonData);\n        if (!data.families || !Array.isArray(data.families)) {\n            return {\n                success: false,\n                message: 'Invalid backup format: missing families array'\n            };\n        }\n        // Create backup of current state before importing\n        const currentBackup = exportStigDatabase();\n        localStorage.setItem('stig_pre_import_backup', currentBackup);\n        // Clear and restore\n        STIG_FAMILIES.length = 0;\n        STIG_FAMILIES.push(...data.families);\n        if (data.metadata) {\n            Object.assign(STIG_DATABASE_METADATA, data.metadata);\n        }\n        console.log(\"✅ Imported \".concat(data.families.length, \" STIG families\"));\n        return {\n            success: true,\n            message: \"Successfully imported \".concat(data.families.length, \" STIG families\")\n        };\n    } catch (error) {\n        console.error('❌ Error importing database:', error);\n        return {\n            success: false,\n            message: \"Import failed: \".concat(error.message)\n        };\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3V0aWxzL3N0aWdGYW1pbHlSZWNvbW1lbmRhdGlvbnMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXdCQyxHQUlELCtDQUErQztBQUN4QyxNQUFNQSx5QkFBeUI7SUFDcENDLGFBQWE7SUFDYkMsZUFBZTtJQUNmQyxlQUFlO0lBQ2ZDLG1CQUFtQjtJQUNuQkMsbUJBQW1CO0lBQ25CQyxpQkFBaUI7SUFDakJDLGFBQWE7UUFDWDtRQUNBO1FBQ0E7S0FDRDtJQUNEQyx1QkFBdUIsRUFHdEI7SUFDREMsYUFBYTtBQUNmLEVBQUU7QUFrQ0YsdUZBQXVGO0FBQ3ZGLDBFQUEwRTtBQUMxRSxzREFBc0Q7QUFDL0MsTUFBTUMsZ0JBQThCO0lBQ3pDLGdFQUFnRTtJQUNoRTtRQUNFQyxJQUFJO1FBQ0pDLE1BQU07UUFDTkMsU0FBUztRQUNUQyxhQUFhO1FBQ2JDLGFBQWE7UUFDYkMsdUJBQXVCO1lBQUM7WUFBZTtZQUFlO1lBQW1CO1lBQU87U0FBVztRQUMzRkMsaUJBQWlCO1lBQUM7WUFBZTtZQUFXO1lBQU87WUFBZTtZQUFZO1lBQVE7WUFBZTtZQUFZO1lBQVc7WUFBaUI7U0FBWTtRQUN6SkMsaUJBQWlCO1lBQUM7WUFBTTtZQUFNO1lBQU07WUFBTTtZQUFNO1lBQU07U0FBSztRQUMzREMsVUFBVTtRQUNWQyxvQkFBb0I7UUFDcEJDLFFBQVE7UUFDUkMsV0FBVztJQUNiO0lBQ0E7UUFDRVgsSUFBSTtRQUNKQyxNQUFNO1FBQ05DLFNBQVM7UUFDVEMsYUFBYTtRQUNiQyxhQUFhO1FBQ2JDLHVCQUF1QjtZQUFDO1lBQWM7WUFBUTtZQUFTO1NBQWtCO1FBQ3pFQyxpQkFBaUI7WUFBQztZQUFjO1lBQWU7WUFBUztZQUFPO1lBQVU7WUFBVTtTQUFVO1FBQzdGQyxpQkFBaUI7WUFBQztZQUFNO1lBQU07WUFBTTtZQUFNO1NBQUs7UUFDL0NDLFVBQVU7UUFDVkMsb0JB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UUFBUUQsS0FBSyxDQUFDLCtCQUErQkE7UUFDN0MsT0FBTztZQUNMcUIsU0FBUztZQUNUeUMsU0FBUyxrQkFBZ0MsT0FBZDlELE1BQU04RCxPQUFPO1FBQzFDO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxyb25uaVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2plY3RzXFxTUlRNLXRvb2xcXHV0aWxzXFxzdGlnRmFtaWx5UmVjb21tZW5kYXRpb25zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBTVElHIEZhbWlseSBSZWNvbW1lbmRhdGlvbiBFbmdpbmVcclxuICogQW5hbHl6ZXMgc2VjdXJpdHkgcmVxdWlyZW1lbnRzIGFuZCBkZXNpZ24gZWxlbWVudHMgdG8gcmVjb21tZW5kIGFwcGxpY2FibGUgU1RJRyBmYW1pbGllc1xyXG4gKiBcclxuICog4pqg77iPICBVUERBVEUgRlJFUVVFTkNZOiBUaGlzIGRhdGEgaXMgTk9UIGF1dG9tYXRpY2FsbHkgdXBkYXRlZCBhbmQgcmVxdWlyZXMgbWFudWFsIG1haW50ZW5hbmNlXHJcbiAqIFxyXG4gKiBSRUNPTU1FTkRFRCBVUERBVEUgU0NIRURVTEU6XHJcbiAqIC0gUXVhcnRlcmx5IHJldmlldyBvZiBTVElHIHJlbGVhc2VzIGZyb20gRElTQVxyXG4gKiAtIE1vbnRobHkgY2hlY2sgb2YgaGlnaC1wcmlvcml0eSBTVElHcyAoQXBwbGljYXRpb24gU2VjdXJpdHksIFdlYiBTZXJ2ZXIsIGV0Yy4pXHJcbiAqIC0gSW1tZWRpYXRlIHVwZGF0ZXMgZm9yIGNyaXRpY2FsIHNlY3VyaXR5IFNUSUdzXHJcbiAqIFxyXG4gKiBPRkZJQ0lBTCBTT1VSQ0VTIFRPIE1PTklUT1I6XHJcbiAqIC0gRElTQSBDeWJlciBFeGNoYW5nZTogaHR0cHM6Ly9wdWJsaWMuY3liZXIubWlsL3N0aWdzL2Rvd25sb2Fkcy9cclxuICogLSBTVElHIFZpZXdlcjogaHR0cHM6Ly9zdGlndmlld2VyLmNvbS9zdGlnc1xyXG4gKiAtIERJU0EgU1RJRyBSU1MgRmVlZDogaHR0cHM6Ly9wdWJsaWMuY3liZXIubWlsL3N0aWdzL3Jzcy9cclxuICogXHJcbiAqIExBU1QgTUFKT1IgVVBEQVRFOiBPY3RvYmVyIDIwMjUgKHJlcXVpcmVzIHZhbGlkYXRpb24gYWdhaW5zdCBvZmZpY2lhbCBzb3VyY2VzKVxyXG4gKiBORVhUIFNDSEVEVUxFRCBSRVZJRVc6IEphbnVhcnkgMjAyNlxyXG4gKiBcclxuICogVGhlIFNUSUcgY2F0YWxvZyBiZWxvdyBjb250YWlucyBjb21tb24gU1RJR3MgYnV0IHZlcnNpb25zLCByZWxlYXNlIGRhdGVzLCBhbmQgcmVxdWlyZW1lbnQgXHJcbiAqIGNvdW50cyBhcmUgYXBwcm94aW1hdGUgYW5kIHNob3VsZCBiZSB2ZXJpZmllZCBhZ2FpbnN0IG9mZmljaWFsIERJU0EgcmVsZWFzZXMgYmVmb3JlIHVzZS5cclxuICogXHJcbiAqIFRoZXJlIGFyZSB+MjAwIG9mZmljaWFsIFNUSUdzIGF2YWlsYWJsZSBmcm9tIERJU0EuIFRoaXMgaXMgYSBjdXJhdGVkIHN1YnNldCBmb2N1c2VkIG9uXHJcbiAqIGNvbW1vbiBlbnRlcnByaXNlIHRlY2hub2xvZ2llcy5cclxuICovXHJcblxyXG5pbXBvcnQgeyBTZWN1cml0eVJlcXVpcmVtZW50LCBTeXN0ZW1EZXNpZ25FbGVtZW50IH0gZnJvbSAnLi4vdHlwZXMvc3J0bSc7XHJcblxyXG4vLyBTVElHIERhdGFiYXNlIE1ldGFkYXRhIC0gVHJhY2sgdXBkYXRlIHN0YXR1c1xyXG5leHBvcnQgY29uc3QgU1RJR19EQVRBQkFTRV9NRVRBREFUQSA9IHtcclxuICBsYXN0VXBkYXRlZDogJzIwMjUtMTAtMDInLFxyXG4gIGxhc3RWYWxpZGF0ZWQ6ICcyMDI1LTA5LTAxJywgLy8gV2hlbiBkYXRhIHdhcyBsYXN0IHZlcmlmaWVkIGFnYWluc3Qgb2ZmaWNpYWwgc291cmNlc1xyXG4gIG5leHRSZXZpZXdEdWU6ICcyMDI2LTAxLTAxJyxcclxuICB0b3RhbFN0aWdGYW1pbGllczogMCwgLy8gV2lsbCBiZSBjYWxjdWxhdGVkIGF1dG9tYXRpY2FsbHlcclxuICB2YWxpZGF0ZWRGYW1pbGllczogMCwgLy8gQ291bnQgb2YgZmFtaWxpZXMgd2l0aCB2YWxpZGF0ZWQ6IHRydWVcclxuICB1cGRhdGVGcmVxdWVuY3k6ICdRdWFydGVybHknLFxyXG4gIGRhdGFTb3VyY2VzOiBbXHJcbiAgICAnaHR0cHM6Ly9wdWJsaWMuY3liZXIubWlsL3N0aWdzL2Rvd25sb2Fkcy8nLFxyXG4gICAgJ2h0dHBzOi8vc3RpZ3ZpZXdlci5jb20vc3RpZ3MnLFxyXG4gICAgJ2h0dHBzOi8vcHVibGljLmN5YmVyLm1pbC9zdGlncy9yc3MvJ1xyXG4gIF0sXHJcbiAgY3JpdGljYWxVcGRhdGVzTmVlZGVkOiBbXHJcbiAgICAvLyBBZGQgZW50cmllcyB3aGVuIHVyZ2VudCB1cGRhdGVzIGFyZSBpZGVudGlmaWVkXHJcbiAgICAvLyBFeGFtcGxlOiAnQXBhY2hlIEhUVFAgU2VydmVyIDIuNCAtIE5ldyB2ZXJzaW9uIFY0IGF2YWlsYWJsZSdcclxuICBdLFxyXG4gIHVwZGF0ZU5vdGVzOiAnQXV0b21hdGljIFNUSUcgdXBkYXRlIGNoZWNraW5nIGF2YWlsYWJsZSEgRW5hYmxlIHZpYSBzZXRBdXRvVXBkYXRlRW5hYmxlZCh0cnVlKSdcclxufTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3RpZ0ZhbWlseSB7XHJcbiAgaWQ6IHN0cmluZztcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgdmVyc2lvbjogc3RyaW5nOyAvLyBTVElHIHZlcnNpb24gLSBTSE9VTEQgQkUgVkVSSUZJRUQgYWdhaW5zdCBvZmZpY2lhbCBzb3VyY2VzXHJcbiAgcmVsZWFzZURhdGU6IHN0cmluZzsgLy8gUmVsZWFzZSBkYXRlIC0gU0hPVUxEIEJFIFZFUklGSUVEIGFnYWluc3Qgb2ZmaWNpYWwgc291cmNlc1xyXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XHJcbiAgYXBwbGljYWJsZVN5c3RlbVR5cGVzOiBzdHJpbmdbXTtcclxuICB0cmlnZ2VyS2V5d29yZHM6IHN0cmluZ1tdO1xyXG4gIGNvbnRyb2xGYW1pbGllczogc3RyaW5nW107IC8vIE5JU1QgODAwLTUzIGZhbWlsaWVzIHRoYXQgbWFwIHRvIHRoaXMgU1RJR1xyXG4gIHByaW9yaXR5OiAnSGlnaCcgfCAnTWVkaXVtJyB8ICdMb3cnO1xyXG4gIGFjdHVhbFJlcXVpcmVtZW50czogbnVtYmVyOyAvLyBSZXF1aXJlbWVudCBjb3VudCAtIFNIT1VMRCBCRSBWRVJJRklFRCBhZ2FpbnN0IG9mZmljaWFsIFNUSUdcclxuICBzdGlnSWQ6IHN0cmluZzsgLy8gU1RJRyBJRCAtIFNIT1VMRCBCRSBWRVJJRklFRCBhZ2FpbnN0IG9mZmljaWFsIERJU0EgZG9jdW1lbnRhdGlvblxyXG4gIHZhbGlkYXRlZDogYm9vbGVhbjsgLy8gU2V0IHRvIHRydWUgT05MWSBhZnRlciB2ZXJpZnlpbmcgYWdhaW5zdCBzdGlndmlld2VyLmNvbSBvciBwdWJsaWMuY3liZXIubWlsXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3RpZ0ZhbWlseVJlY29tbWVuZGF0aW9uIHtcclxuICBzdGlnRmFtaWx5OiBTdGlnRmFtaWx5O1xyXG4gIGNvbmZpZGVuY2VTY29yZTogbnVtYmVyOyAvLyAwLTEwMCBjb25maWRlbmNlIGluIHRoaXMgcmVjb21tZW5kYXRpb25cclxuICBtYXRjaGluZ1JlcXVpcmVtZW50czogc3RyaW5nW107IC8vIElEcyBvZiBtYXRjaGluZyByZXF1aXJlbWVudHNcclxuICBtYXRjaGluZ0Rlc2lnbkVsZW1lbnRzOiBzdHJpbmdbXTsgLy8gSURzIG9mIG1hdGNoaW5nIGRlc2lnbiBlbGVtZW50c1xyXG4gIHJlYXNvbmluZzogc3RyaW5nW107XHJcbiAgaW1wbGVtZW50YXRpb25Qcmlvcml0eTogJ0NyaXRpY2FsJyB8ICdIaWdoJyB8ICdNZWRpdW0nIHwgJ0xvdyc7XHJcbiAgc2NvcmVCcmVha2Rvd246IHtcclxuICAgIGtleXdvcmRNYXRjaGVzOiBudW1iZXI7XHJcbiAgICBjb250cm9sRmFtaWx5TWF0Y2hlczogbnVtYmVyO1xyXG4gICAgZGVzaWduRWxlbWVudE1hdGNoZXM6IG51bWJlcjtcclxuICAgIHRlY2hub2xvZ3lTcGVjaWZpY0JvbnVzOiBudW1iZXI7XHJcbiAgICBlbnZpcm9ubWVudEJvbnVzOiBudW1iZXI7XHJcbiAgICBwZW5hbHRpZXM6IG51bWJlcjtcclxuICB9O1xyXG59XHJcblxyXG4vLyBDb21wcmVoZW5zaXZlIFNUSUcgRmFtaWx5IGNhdGFsb2cgLSBTaG91bGQgYmUgdmVyaWZpZWQgYWdhaW5zdCBvZmZpY2lhbCBESVNBIHNvdXJjZXNcclxuLy8gUmVmZXJlbmNlOiBodHRwczovL3N0aWd2aWV3ZXIuY29tL3N0aWdzICh+MjAwIG9mZmljaWFsIFNUSUdzIGF2YWlsYWJsZSlcclxuLy8gVGhpcyBpcyBhIGN1cmF0ZWQgc3Vic2V0IG9mIGNvbW1vbiBlbnRlcnByaXNlIFNUSUdzXHJcbmV4cG9ydCBjb25zdCBTVElHX0ZBTUlMSUVTOiBTdGlnRmFtaWx5W10gPSBbXHJcbiAgLy8gQXBwbGljYXRpb24gJiBXZWIgU2VydmVyIFNUSUdzIChWZXJpZmllZCBmcm9tIHN0aWd2aWV3ZXIuY29tKVxyXG4gIHtcclxuICAgIGlkOiAnYXBwbGljYXRpb24tc2VjdXJpdHktZGV2JyxcclxuICAgIG5hbWU6ICdBcHBsaWNhdGlvbiBTZWN1cml0eSBhbmQgRGV2ZWxvcG1lbnQgU2VjdXJpdHkgVGVjaG5pY2FsIEltcGxlbWVudGF0aW9uIEd1aWRlJyxcclxuICAgIHZlcnNpb246ICdWNicsXHJcbiAgICByZWxlYXNlRGF0ZTogJzIwMjUtMDItMTInLFxyXG4gICAgZGVzY3JpcHRpb246ICdTZWN1cml0eSBUZWNobmljYWwgSW1wbGVtZW50YXRpb24gR3VpZGUgZm9yIEFwcGxpY2F0aW9uIFNlY3VyaXR5IGFuZCBEZXZlbG9wbWVudCBwcmFjdGljZXMnLFxyXG4gICAgYXBwbGljYWJsZVN5c3RlbVR5cGVzOiBbJ0FwcGxpY2F0aW9uJywgJ0RldmVsb3BtZW50JywgJ1dlYiBBcHBsaWNhdGlvbicsICdBUEknLCAnU29mdHdhcmUnXSxcclxuICAgIHRyaWdnZXJLZXl3b3JkczogWydhcHBsaWNhdGlvbicsICd3ZWIgYXBwJywgJ2FwaScsICdkZXZlbG9wbWVudCcsICdzb2Z0d2FyZScsICdjb2RlJywgJ3Byb2dyYW1taW5nJywgJ2Zyb250ZW5kJywgJ2JhY2tlbmQnLCAnc2VjdXJlIGNvZGluZycsICdkZXZzZWNvcHMnXSxcclxuICAgIGNvbnRyb2xGYW1pbGllczogWydBQycsICdBVScsICdDTScsICdJQScsICdTQycsICdTSScsICdTQSddLFxyXG4gICAgcHJpb3JpdHk6ICdIaWdoJyxcclxuICAgIGFjdHVhbFJlcXVpcmVtZW50czogMTY1LFxyXG4gICAgc3RpZ0lkOiAnQVBTQy1EVi0wMDAwMDEnLFxyXG4gICAgdmFsaWRhdGVkOiB0cnVlXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ3dlYi1zZXJ2ZXItc3JnJyxcclxuICAgIG5hbWU6ICdXZWIgU2VydmVyIFNlY3VyaXR5IFJlcXVpcmVtZW50cyBHdWlkZScsXHJcbiAgICB2ZXJzaW9uOiAnVjQnLFxyXG4gICAgcmVsZWFzZURhdGU6ICcyMDI1LTAyLTEyJyxcclxuICAgIGRlc2NyaXB0aW9uOiAnU2VjdXJpdHkgUmVxdWlyZW1lbnRzIEd1aWRlIGZvciBXZWIgU2VydmVycycsXHJcbiAgICBhcHBsaWNhYmxlU3lzdGVtVHlwZXM6IFsnV2ViIFNlcnZlcicsICdIVFRQJywgJ0hUVFBTJywgJ1dlYiBBcHBsaWNhdGlvbiddLFxyXG4gICAgdHJpZ2dlcktleXdvcmRzOiBbJ3dlYiBzZXJ2ZXInLCAnaHR0cCBzZXJ2ZXInLCAnaHR0cHMnLCAnd2ViJywgJ3NlcnZlcicsICd3ZWJhcHAnLCAnaG9zdGluZyddLFxyXG4gICAgY29udHJvbEZhbWlsaWVzOiBbJ0FDJywgJ0FVJywgJ0NNJywgJ1NDJywgJ1NJJ10sXHJcbiAgICBwcmlvcml0eTogJ0hpZ2gnLFxyXG4gICAgYWN0dWFsUmVxdWlyZW1lbnRzOiA4OSxcclxuICAgIHN0aWdJZDogJ1NSRy1BUFAtMDAwMDAxJyxcclxuICAgIHZhbGlkYXRlZDogdHJ1ZVxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6ICdhcHBsaWNhdGlvbi1zZXJ2ZXItc3JnJyxcclxuICAgIG5hbWU6ICdBcHBsaWNhdGlvbiBTZXJ2ZXIgU2VjdXJpdHkgUmVxdWlyZW1lbnRzIEd1aWRlJyxcclxuICAgIHZlcnNpb246ICdWNCcsXHJcbiAgICByZWxlYXNlRGF0ZTogJzIwMjUtMDItMTEnLFxyXG4gICAgZGVzY3JpcHRpb246ICdTZWN1cml0eSBSZXF1aXJlbWVudHMgR3VpZGUgZm9yIEFwcGxpY2F0aW9uIFNlcnZlcnMnLFxyXG4gICAgYXBwbGljYWJsZVN5c3RlbVR5cGVzOiBbJ0FwcGxpY2F0aW9uIFNlcnZlcicsICdBcHAgU2VydmVyJywgJ01pZGRsZXdhcmUnXSxcclxuICAgIHRyaWdnZXJLZXl3b3JkczogWydhcHBsaWNhdGlvbiBzZXJ2ZXInLCAnYXBwIHNlcnZlcicsICdtaWRkbGV3YXJlJywgJ2phdmEnLCAnamVlJywgJ2oyZWUnXSxcclxuICAgIGNvbnRyb2xGYW1pbGllczogWydBQycsICdBVScsICdDTScsICdTQycsICdTSSddLFxyXG4gICAgcHJpb3JpdHk6ICdIaWdoJyxcclxuICAgIGFjdHVhbFJlcXVpcmVtZW50czogOTUsXHJcbiAgICBzdGlnSWQ6ICdTUkctQVBQLTAwMDAwMicsXHJcbiAgICB2YWxpZGF0ZWQ6IHRydWVcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnYXBhY2hlLXNlcnZlci0yLTQtdW5peC1zZXJ2ZXInLFxyXG4gICAgbmFtZTogJ0FwYWNoZSBTZXJ2ZXIgMi40IFVOSVggU2VydmVyIFNlY3VyaXR5IFRlY2huaWNhbCBJbXBsZW1lbnRhdGlvbiBHdWlkZScsXHJcbiAgICB2ZXJzaW9uOiAnVjMnLFxyXG4gICAgcmVsZWFzZURhdGU6ICcyMDI0LTEyLTA0JyxcclxuICAgIGRlc2NyaXB0aW9uOiAnU2VjdXJpdHkgVGVjaG5pY2FsIEltcGxlbWVudGF0aW9uIEd1aWRlIGZvciBBcGFjaGUgSFRUUCBTZXJ2ZXIgMi40IG9uIFVOSVgnLFxyXG4gICAgYXBwbGljYWJsZVN5c3RlbVR5cGVzOiBbJ1dlYiBTZXJ2ZXInLCAnQXBhY2hlJywgJ0hUVFAnLCAnVU5JWCcsICdMaW51eCddLFxyXG4gICAgdHJpZ2dlcktleXdvcmRzOiBbJ2FwYWNoZScsICdodHRwZCcsICd3ZWIgc2VydmVyJywgJ2h0dHAnLCAnaHR0cHMnLCAnc3NsJywgJ3RscycsICd1bml4JywgJ2xpbnV4J10sXHJcbiAgICBjb250cm9sRmFtaWxpZXM6IFsnQUMnLCAnQVUnLCAnQ00nLCAnU0MnLCAnU0knXSxcclxuICAgIHByaW9yaXR5OiAnSGlnaCcsXHJcbiAgICBhY3R1YWxSZXF1aXJlbWVudHM6IDkzLFxyXG4gICAgc3RpZ0lkOiAnQVMyNC1VMS0wMDAwMDEnLFxyXG4gICAgdmFsaWRhdGVkOiB0cnVlXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ2FwYWNoZS1zZXJ2ZXItMi00LXVuaXgtc2l0ZScsXHJcbiAgICBuYW1lOiAnQXBhY2hlIFNlcnZlciAyLjQgVU5JWCBTaXRlIFNlY3VyaXR5IFRlY2huaWNhbCBJbXBsZW1lbnRhdGlvbiBHdWlkZScsXHJcbiAgICB2ZXJzaW9uOiAnVjInLFxyXG4gICAgcmVsZWFzZURhdGU6ICcyMDI1LTAyLTEyJyxcclxuICAgIGRlc2NyaXB0aW9uOiAnU2VjdXJpdHkgVGVjaG5pY2FsIEltcGxlbWVudGF0aW9uIEd1aWRlIGZvciBBcGFjaGUgSFRUUCBTZXJ2ZXIgMi40IFVOSVggU2l0ZSBjb25maWd1cmF0aW9uJyxcclxuICAgIGFwcGxpY2FibGVTeXN0ZW1UeXBlczogWydXZWIgU2VydmVyJywgJ0FwYWNoZScsICdIVFRQJywgJ1VOSVgnLCAnTGludXgnXSxcclxuICAgIHRyaWdnZXJLZXl3b3JkczogWydhcGFjaGUnLCAnaHR0cGQnLCAnd2ViIHNlcnZlcicsICdzaXRlJywgJ3ZpcnR1YWwgaG9zdCcsICd1bml4JywgJ2xpbnV4J10sXHJcbiAgICBjb250cm9sRmFtaWxpZXM6IFsnQUMnLCAnQVUnLCAnQ00nLCAnU0MnLCAnU0knXSxcclxuICAgIHByaW9yaXR5OiAnSGlnaCcsXHJcbiAgICBhY3R1YWxSZXF1aXJlbWVudHM6IDc4LFxyXG4gICAgc3RpZ0lkOiAnQVMyNC1VMi0wMDAwMDEnLFxyXG4gICAgdmFsaWRhdGVkOiB0cnVlXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ2FwYWNoZS1zZXJ2ZXItMi00LXdpbmRvd3Mtc2VydmVyJyxcclxuICAgIG5hbWU6ICdBcGFjaGUgU2VydmVyIDIuNCBXaW5kb3dzIFNlcnZlciBTZWN1cml0eSBUZWNobmljYWwgSW1wbGVtZW50YXRpb24gR3VpZGUnLFxyXG4gICAgdmVyc2lvbjogJ1YzJyxcclxuICAgIHJlbGVhc2VEYXRlOiAnMjAyNS0wMi0xMicsXHJcbiAgICBkZXNjcmlwdGlvbjogJ1NlY3VyaXR5IFRlY2huaWNhbCBJbXBsZW1lbnRhdGlvbiBHdWlkZSBmb3IgQXBhY2hlIEhUVFAgU2VydmVyIDIuNCBvbiBXaW5kb3dzJyxcclxuICAgIGFwcGxpY2FibGVTeXN0ZW1UeXBlczogWydXZWIgU2VydmVyJywgJ0FwYWNoZScsICdIVFRQJywgJ1dpbmRvd3MnXSxcclxuICAgIHRyaWdnZXJLZXl3b3JkczogWydhcGFjaGUnLCAnaHR0cGQnLCAnd2ViIHNlcnZlcicsICd3aW5kb3dzJywgJ2h0dHAnLCAnaHR0cHMnXSxcclxuICAgIGNvbnRyb2xGYW1pbGllczogWydBQycsICdBVScsICdDTScsICdTQycsICdTSSddLFxyXG4gICAgcHJpb3JpdHk6ICdIaWdoJyxcclxuICAgIGFjdHVhbFJlcXVpcmVtZW50czogOTMsXHJcbiAgICBzdGlnSWQ6ICdBUzI0LVcxLTAwMDAwMScsXHJcbiAgICB2YWxpZGF0ZWQ6IHRydWVcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnYXBhY2hlLXNlcnZlci0yLTQtd2luZG93cy1zaXRlJyxcclxuICAgIG5hbWU6ICdBcGFjaGUgU2VydmVyIDIuNCBXaW5kb3dzIFNpdGUgU2VjdXJpdHkgVGVjaG5pY2FsIEltcGxlbWVudGF0aW9uIEd1aWRlJyxcclxuICAgIHZlcnNpb246ICdWMicsXHJcbiAgICByZWxlYXNlRGF0ZTogJzIwMjUtMDItMTInLFxyXG4gICAgZGVzY3JpcHRpb246ICdTZWN1cml0eSBUZWNobmljYWwgSW1wbGVtZW50YXRpb24gR3VpZGUgZm9yIEFwYWNoZSBIVFRQIFNlcnZlciAyLjQgV2luZG93cyBTaXRlIGNvbmZpZ3VyYXRpb24nLFxyXG4gICAgYXBwbGljYWJsZVN5c3RlbVR5cGVzOiBbJ1dlYiBTZXJ2ZXInLCAnQXBhY2hlJywgJ0hUVFAnLCAnV2luZG93cyddLFxyXG4gICAgdHJpZ2dlcktleXdvcmRzOiBbJ2FwYWNoZScsICdodHRwZCcsICd3ZWIgc2VydmVyJywgJ3NpdGUnLCAndmlydHVhbCBob3N0JywgJ3dpbmRvd3MnXSxcclxuICAgIGNvbnRyb2xGYW1pbGllczogWydBQycsICdBVScsICdDTScsICdTQycsICdTSSddLFxyXG4gICAgcHJpb3JpdHk6ICdIaWdoJyxcclxuICAgIGFjdHVhbFJlcXVpcmVtZW50czogNzgsXHJcbiAgICBzdGlnSWQ6ICdBUzI0LVcyLTAwMDAwMScsXHJcbiAgICB2YWxpZGF0ZWQ6IHRydWVcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnYXBhY2hlLXRvbWNhdC05JyxcclxuICAgIG5hbWU6ICdBcGFjaGUgVG9tY2F0IEFwcGxpY2F0aW9uIFNlcnZlciA5IFNlY3VyaXR5IFRlY2huaWNhbCBJbXBsZW1lbnRhdGlvbiBHdWlkZScsXHJcbiAgICB2ZXJzaW9uOiAnVjMnLFxyXG4gICAgcmVsZWFzZURhdGU6ICcyMDI1LTAyLTExJyxcclxuICAgIGRlc2NyaXB0aW9uOiAnU2VjdXJpdHkgVGVjaG5pY2FsIEltcGxlbWVudGF0aW9uIEd1aWRlIGZvciBBcGFjaGUgVG9tY2F0IDkgQXBwbGljYXRpb24gU2VydmVyJyxcclxuICAgIGFwcGxpY2FibGVTeXN0ZW1UeXBlczogWydBcHBsaWNhdGlvbiBTZXJ2ZXInLCAnVG9tY2F0JywgJ0phdmEnLCAnU2VydmxldCddLFxyXG4gICAgdHJpZ2dlcktleXdvcmRzOiBbJ3RvbWNhdCcsICdqYXZhJywgJ3NlcnZsZXQnLCAnanNwJywgJ2FwcGxpY2F0aW9uIHNlcnZlcicsICdqYXZhIGVlJ10sXHJcbiAgICBjb250cm9sRmFtaWxpZXM6IFsnQUMnLCAnQVUnLCAnQ00nLCAnU0MnLCAnU0knXSxcclxuICAgIHByaW9yaXR5OiAnSGlnaCcsXHJcbiAgICBhY3R1YWxSZXF1aXJlbWVudHM6IDExMixcclxuICAgIHN0aWdJZDogJ1RDQVQtQVMtMDAwMDAxJyxcclxuICAgIHZhbGlkYXRlZDogdHJ1ZVxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6ICdtaWNyb3NvZnQtaWlzLTEwLXNlcnZlcicsXHJcbiAgICBuYW1lOiAnTWljcm9zb2Z0IElJUyAxMC4wIFNlcnZlciBTZWN1cml0eSBUZWNobmljYWwgSW1wbGVtZW50YXRpb24gR3VpZGUnLFxyXG4gICAgdmVyc2lvbjogJ1YzJyxcclxuICAgIHJlbGVhc2VEYXRlOiAnMjAyNS0wMi0xMScsXHJcbiAgICBkZXNjcmlwdGlvbjogJ1NlY3VyaXR5IFRlY2huaWNhbCBJbXBsZW1lbnRhdGlvbiBHdWlkZSBmb3IgTWljcm9zb2Z0IEludGVybmV0IEluZm9ybWF0aW9uIFNlcnZpY2VzIDEwLjAgU2VydmVyJyxcclxuICAgIGFwcGxpY2FibGVTeXN0ZW1UeXBlczogWydXZWIgU2VydmVyJywgJ0lJUycsICdXaW5kb3dzJywgJ0hUVFAnXSxcclxuICAgIHRyaWdnZXJLZXl3b3JkczogWydpaXMnLCAnaW50ZXJuZXQgaW5mb3JtYXRpb24gc2VydmljZXMnLCAnd2ViIHNlcnZlcicsICdhc3AubmV0JywgJ3dpbmRvd3Mgd2ViJywgJ21pY3Jvc29mdCddLFxyXG4gICAgY29udHJvbEZhbWlsaWVzOiBbJ0FDJywgJ0FVJywgJ0NNJywgJ1NDJywgJ1NJJ10sXHJcbiAgICBwcmlvcml0eTogJ0hpZ2gnLFxyXG4gICAgYWN0dWFsUmVxdWlyZW1lbnRzOiAxMDcsXHJcbiAgICBzdGlnSWQ6ICdJSVNULVNWLTAwMDAwMScsXHJcbiAgICB2YWxpZGF0ZWQ6IHRydWVcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnbWljcm9zb2Z0LWlpcy0xMC1zaXRlJyxcclxuICAgIG5hbWU6ICdNaWNyb3NvZnQgSUlTIDEwLjAgU2l0ZSBTZWN1cml0eSBUZWNobmljYWwgSW1wbGVtZW50YXRpb24gR3VpZGUnLFxyXG4gICAgdmVyc2lvbjogJ1YyJyxcclxuICAgIHJlbGVhc2VEYXRlOiAnMjAyNS0wMi0xMScsXHJcbiAgICBkZXNjcmlwdGlvbjogJ1NlY3VyaXR5IFRlY2huaWNhbCBJbXBsZW1lbnRhdGlvbiBHdWlkZSBmb3IgTWljcm9zb2Z0IEludGVybmV0IEluZm9ybWF0aW9uIFNlcnZpY2VzIDEwLjAgU2l0ZSBjb25maWd1cmF0aW9uJyxcclxuICAgIGFwcGxpY2FibGVTeXN0ZW1UeXBlczogWydXZWIgU2VydmVyJywgJ0lJUycsICdXaW5kb3dzJywgJ0hUVFAnXSxcclxuICAgIHRyaWdnZXJLZXl3b3JkczogWydpaXMnLCAnaW50ZXJuZXQgaW5mb3JtYXRpb24gc2VydmljZXMnLCAnc2l0ZScsICd3ZWJzaXRlJywgJ2FzcC5uZXQnLCAnd2luZG93cyB3ZWInXSxcclxuICAgIGNvbnRyb2xGYW1pbGllczogWydBQycsICdBVScsICdDTScsICdTQycsICdTSSddLFxyXG4gICAgcHJpb3JpdHk6ICdIaWdoJyxcclxuICAgIGFjdHVhbFJlcXVpcmVtZW50czogODksXHJcbiAgICBzdGlnSWQ6ICdJSVNULVNJLTAwMDAwMScsXHJcbiAgICB2YWxpZGF0ZWQ6IHRydWVcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnamJvc3MtZWFwLTYtMycsXHJcbiAgICBuYW1lOiAnSkJvc3MgRW50ZXJwcmlzZSBBcHBsaWNhdGlvbiBQbGF0Zm9ybSA2LjMgU2VjdXJpdHkgVGVjaG5pY2FsIEltcGxlbWVudGF0aW9uIEd1aWRlJyxcclxuICAgIHZlcnNpb246ICdWMicsXHJcbiAgICByZWxlYXNlRGF0ZTogJzIwMjUtMDItMjAnLFxyXG4gICAgZGVzY3JpcHRpb246ICdTZWN1cml0eSBUZWNobmljYWwgSW1wbGVtZW50YXRpb24gR3VpZGUgZm9yIEpCb3NzIEVBUCA2LjMnLFxyXG4gICAgYXBwbGljYWJsZVN5c3RlbVR5cGVzOiBbJ0FwcGxpY2F0aW9uIFNlcnZlcicsICdKQm9zcycsICdKYXZhJywgJ1JlZCBIYXQnXSxcclxuICAgIHRyaWdnZXJLZXl3b3JkczogWydqYm9zcycsICdlYXAnLCAnd2lsZGZseScsICdqYXZhJywgJ2FwcGxpY2F0aW9uIHNlcnZlcicsICdyZWQgaGF0JywgJ2phdmEgZWUnXSxcclxuICAgIGNvbnRyb2xGYW1pbGllczogWydBQycsICdBVScsICdDTScsICdTQycsICdTSSddLFxyXG4gICAgcHJpb3JpdHk6ICdIaWdoJyxcclxuICAgIGFjdHVhbFJlcXVpcmVtZW50czogOTgsXHJcbiAgICBzdGlnSWQ6ICdKQk9TLUFTLTAwMDAwMScsXHJcbiAgICB2YWxpZGF0ZWQ6IHRydWVcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnaWJtLXdlYnNwaGVyZS1saWJlcnR5JyxcclxuICAgIG5hbWU6ICdJQk0gV2ViU3BoZXJlIExpYmVydHkgU2VydmVyIFNlY3VyaXR5IFRlY2huaWNhbCBJbXBsZW1lbnRhdGlvbiBHdWlkZScsXHJcbiAgICB2ZXJzaW9uOiAnVjInLFxyXG4gICAgcmVsZWFzZURhdGU6ICcyMDI1LTAyLTExJyxcclxuICAgIGRlc2NyaXB0aW9uOiAnU2VjdXJpdHkgVGVjaG5pY2FsIEltcGxlbWVudGF0aW9uIEd1aWRlIGZvciBJQk0gV2ViU3BoZXJlIExpYmVydHkgU2VydmVyJyxcclxuICAgIGFwcGxpY2FibGVTeXN0ZW1UeXBlczogWydBcHBsaWNhdGlvbiBTZXJ2ZXInLCAnV2ViU3BoZXJlJywgJ0phdmEnLCAnSUJNJ10sXHJcbiAgICB0cmlnZ2VyS2V5d29yZHM6IFsnd2Vic3BoZXJlJywgJ2xpYmVydHknLCAnaWJtJywgJ2phdmEnLCAnYXBwbGljYXRpb24gc2VydmVyJywgJ2phdmEgZWUnXSxcclxuICAgIGNvbnRyb2xGYW1pbGllczogWydBQycsICdBVScsICdDTScsICdTQycsICdTSSddLFxyXG4gICAgcHJpb3JpdHk6ICdIaWdoJyxcclxuICAgIGFjdHVhbFJlcXVpcmVtZW50czogMTA0LFxyXG4gICAgc3RpZ0lkOiAnV0JTTC1BUy0wMDAwMDEnLFxyXG4gICAgdmFsaWRhdGVkOiB0cnVlXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ21pY3Jvc29mdC1kb3RuZXQtNCcsXHJcbiAgICBuYW1lOiAnTWljcm9zb2Z0IERvdE5ldCBGcmFtZXdvcmsgNC4wIFNlY3VyaXR5IFRlY2huaWNhbCBJbXBsZW1lbnRhdGlvbiBHdWlkZScsXHJcbiAgICB2ZXJzaW9uOiAnVjInLFxyXG4gICAgcmVsZWFzZURhdGU6ICcyMDI1LTAyLTIwJyxcclxuICAgIGRlc2NyaXB0aW9uOiAnU2VjdXJpdHkgVGVjaG5pY2FsIEltcGxlbWVudGF0aW9uIEd1aWRlIGZvciBNaWNyb3NvZnQgLk5FVCBGcmFtZXdvcmsgNC4wJyxcclxuICAgIGFwcGxpY2FibGVTeXN0ZW1UeXBlczogWydGcmFtZXdvcmsnLCAnLk5FVCcsICdBcHBsaWNhdGlvbicsICdXaW5kb3dzJ10sXHJcbiAgICB0cmlnZ2VyS2V5d29yZHM6IFsnLm5ldCcsICdkb3RuZXQnLCAnZnJhbWV3b3JrJywgJ2NzaGFycCcsICdjIycsICdhc3AubmV0JywgJ2NscicsICdtaWNyb3NvZnQnXSxcclxuICAgIGNvbnRyb2xGYW1pbGllczogWydBQycsICdBVScsICdDTScsICdTQycsICdTSScsICdTQSddLFxyXG4gICAgcHJpb3JpdHk6ICdIaWdoJyxcclxuICAgIGFjdHVhbFJlcXVpcmVtZW50czogOTEsXHJcbiAgICBzdGlnSWQ6ICdBUFBORVQtQVMtMDAwMDAxJyxcclxuICAgIHZhbGlkYXRlZDogdHJ1ZVxyXG4gIH0sXHJcbiAgLy8gT3BlcmF0aW5nIFN5c3RlbSBTVElHc1xyXG4gIHtcclxuICAgIGlkOiAnd2luZG93cy1zZXJ2ZXItMjAyMicsXHJcbiAgICBuYW1lOiAnV2luZG93cyBTZXJ2ZXIgMjAyMiBTVElHJyxcclxuICAgIHZlcnNpb246ICdWMicsXHJcbiAgICByZWxlYXNlRGF0ZTogJzIwMjUtMDItMjUnLFxyXG4gICAgZGVzY3JpcHRpb246ICdTZWN1cml0eSBUZWNobmljYWwgSW1wbGVtZW50YXRpb24gR3VpZGUgZm9yIFdpbmRvd3MgU2VydmVyIDIwMjInLFxyXG4gICAgYXBwbGljYWJsZVN5c3RlbVR5cGVzOiBbJ1dpbmRvd3MnLCAnU2VydmVyJywgJ0RvbWFpbiBDb250cm9sbGVyJywgJ0ZpbGUgU2VydmVyJ10sXHJcbiAgICB0cmlnZ2VyS2V5d29yZHM6IFsnd2luZG93cycsICdzZXJ2ZXIgMjAyMicsICd3aW5kb3dzIHNlcnZlcicsICdhY3RpdmUgZGlyZWN0b3J5JywgJ2RvbWFpbicsICdudGZzJywgJ3JlZ2lzdHJ5JywgJ3Bvd2Vyc2hlbGwnXSxcclxuICAgIGNvbnRyb2xGYW1pbGllczogWydBQycsICdBVScsICdDTScsICdJQScsICdTQycsICdTSSddLFxyXG4gICAgcHJpb3JpdHk6ICdIaWdoJyxcclxuICAgIGFjdHVhbFJlcXVpcmVtZW50czogMjkyLFxyXG4gICAgc3RpZ0lkOiAnV04yMi0wMC0wMDAwMTAnLFxyXG4gICAgdmFsaWRhdGVkOiBmYWxzZVxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6ICd3aW5kb3dzLTExJyxcclxuICAgIG5hbWU6ICdXaW5kb3dzIDExIFNUSUcnLFxyXG4gICAgdmVyc2lvbjogJ1YyUjInLFxyXG4gICAgcmVsZWFzZURhdGU6ICcyMDI0LTA4LTE1JyxcclxuICAgIGRlc2NyaXB0aW9uOiAnU2VjdXJpdHkgVGVjaG5pY2FsIEltcGxlbWVudGF0aW9uIEd1aWRlIGZvciBXaW5kb3dzIDExJyxcclxuICAgIGFwcGxpY2FibGVTeXN0ZW1UeXBlczogWydXaW5kb3dzJywgJ1dvcmtzdGF0aW9uJywgJ0Rlc2t0b3AnLCAnTGFwdG9wJ10sXHJcbiAgICB0cmlnZ2VyS2V5d29yZHM6IFsnd2luZG93cyAxMScsICd3aW5kb3dzJywgJ3dvcmtzdGF0aW9uJywgJ2Rlc2t0b3AnLCAnbGFwdG9wJywgJ2VuZHBvaW50J10sXHJcbiAgICBjb250cm9sRmFtaWxpZXM6IFsnQUMnLCAnQVUnLCAnQ00nLCAnSUEnLCAnU0MnLCAnU0knXSxcclxuICAgIHByaW9yaXR5OiAnSGlnaCcsXHJcbiAgICBhY3R1YWxSZXF1aXJlbWVudHM6IDIwNCxcclxuICAgIHN0aWdJZDogJ1dOMTEtMDAtMDAwMDEwJyxcclxuICAgIHZhbGlkYXRlZDogZmFsc2VcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAncmhlbC05JyxcclxuICAgIG5hbWU6ICdSZWQgSGF0IEVudGVycHJpc2UgTGludXggOSBTVElHJyxcclxuICAgIHZlcnNpb246ICdWMlIxJyxcclxuICAgIHJlbGVhc2VEYXRlOiAnMjAyNC0wOS0wMScsXHJcbiAgICBkZXNjcmlwdGlvbjogJ1NlY3VyaXR5IFRlY2huaWNhbCBJbXBsZW1lbnRhdGlvbiBHdWlkZSBmb3IgUkhFTCA5JyxcclxuICAgIGFwcGxpY2FibGVTeXN0ZW1UeXBlczogWydMaW51eCcsICdSSEVMJywgJ1JlZCBIYXQnLCAnVW5peCddLFxyXG4gICAgdHJpZ2dlcktleXdvcmRzOiBbJ2xpbnV4JywgJ3JoZWwnLCAncmVkaGF0JywgJ3JlZCBoYXQnLCAndW5peCcsICdiYXNoJywgJ3N5c3RlbWQnLCAnc2VsaW51eCcsICdjZW50b3MnXSxcclxuICAgIGNvbnRyb2xGYW1pbGllczogWydBQycsICdBVScsICdDTScsICdJQScsICdTQycsICdTSSddLFxyXG4gICAgcHJpb3JpdHk6ICdIaWdoJyxcclxuICAgIGFjdHVhbFJlcXVpcmVtZW50czogMjgwLFxyXG4gICAgc3RpZ0lkOiAnUkhFTC0wOS0wMTAwMDEnLFxyXG4gICAgdmFsaWRhdGVkOiBmYWxzZVxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6ICd1YnVudHUtMjItMDQnLFxyXG4gICAgbmFtZTogJ0Nhbm9uaWNhbCBVYnVudHUgMjIuMDQgTFRTIFNUSUcnLFxyXG4gICAgdmVyc2lvbjogJ1YyUjEnLFxyXG4gICAgcmVsZWFzZURhdGU6ICcyMDI0LTA3LTAxJyxcclxuICAgIGRlc2NyaXB0aW9uOiAnU2VjdXJpdHkgVGVjaG5pY2FsIEltcGxlbWVudGF0aW9uIEd1aWRlIGZvciBVYnVudHUgMjIuMDQgTFRTJyxcclxuICAgIGFwcGxpY2FibGVTeXN0ZW1UeXBlczogWydMaW51eCcsICdVYnVudHUnLCAnRGViaWFuJ10sXHJcbiAgICB0cmlnZ2VyS2V5d29yZHM6IFsndWJ1bnR1JywgJ2RlYmlhbicsICdhcHQnLCAnc25hcCcsICdzeXN0ZW1kJywgJ2FwcGFybW9yJ10sXHJcbiAgICBjb250cm9sRmFtaWxpZXM6IFsnQUMnLCAnQVUnLCAnQ00nLCAnSUEnLCAnU0MnLCAnU0knXSxcclxuICAgIHByaW9yaXR5OiAnSGlnaCcsXHJcbiAgICBhY3R1YWxSZXF1aXJlbWVudHM6IDI2NyxcclxuICAgIHN0aWdJZDogJ1VCVFUtMjItMDEwMDAxJyxcclxuICAgIHZhbGlkYXRlZDogZmFsc2VcclxuICB9LFxyXG4gIC8vIE5ldHdvcmsgRGV2aWNlIFNUSUdzXHJcbiAge1xyXG4gICAgaWQ6ICdjaXNjby1pb3MteGUtMTcnLFxyXG4gICAgbmFtZTogJ0Npc2NvIElPUyBYRSBSb3V0ZXIgU1RJRycsXHJcbiAgICB2ZXJzaW9uOiAnVjNSMycsXHJcbiAgICByZWxlYXNlRGF0ZTogJzIwMjQtMDQtMTknLFxyXG4gICAgZGVzY3JpcHRpb246ICdTZWN1cml0eSBUZWNobmljYWwgSW1wbGVtZW50YXRpb24gR3VpZGUgZm9yIENpc2NvIElPUyBYRSAxNy54IFJvdXRlcnMnLFxyXG4gICAgYXBwbGljYWJsZVN5c3RlbVR5cGVzOiBbJ1JvdXRlcicsICdOZXR3b3JrJywgJ0Npc2NvJywgJ0luZnJhc3RydWN0dXJlJ10sXHJcbiAgICB0cmlnZ2VyS2V5d29yZHM6IFsnY2lzY28nLCAnaW9zIHhlJywgJ3JvdXRlcicsICdyb3V0aW5nJywgJ29zcGYnLCAnYmdwJywgJ3NubXAnLCAnYWNsJ10sXHJcbiAgICBjb250cm9sRmFtaWxpZXM6IFsnQUMnLCAnQVUnLCAnQ00nLCAnU0MnXSxcclxuICAgIHByaW9yaXR5OiAnSGlnaCcsXHJcbiAgICBhY3R1YWxSZXF1aXJlbWVudHM6IDE1MixcclxuICAgIHN0aWdJZDogJ0NJU0MtUlQtMDAwMDEwJyxcclxuICAgIHZhbGlkYXRlZDogZmFsc2VcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnY2lzY28taW9zLXN3aXRjaCcsXHJcbiAgICBuYW1lOiAnQ2lzY28gSU9TIFN3aXRjaCBTVElHJyxcclxuICAgIHZlcnNpb246ICdWM1IyJyxcclxuICAgIHJlbGVhc2VEYXRlOiAnMjAyNC0wNC0xOScsXHJcbiAgICBkZXNjcmlwdGlvbjogJ1NlY3VyaXR5IFRlY2huaWNhbCBJbXBsZW1lbnRhdGlvbiBHdWlkZSBmb3IgQ2lzY28gSU9TIFN3aXRjaGVzJyxcclxuICAgIGFwcGxpY2FibGVTeXN0ZW1UeXBlczogWydTd2l0Y2gnLCAnTmV0d29yaycsICdDaXNjbycsICdJbmZyYXN0cnVjdHVyZSddLFxyXG4gICAgdHJpZ2dlcktleXdvcmRzOiBbJ2Npc2NvJywgJ2lvcycsICdzd2l0Y2gnLCAnc3dpdGNoaW5nJywgJ3ZsYW4nLCAnc3RwJywgJ3BvcnQgc2VjdXJpdHknXSxcclxuICAgIGNvbnRyb2xGYW1pbGllczogWydBQycsICdBVScsICdDTScsICdTQyddLFxyXG4gICAgcHJpb3JpdHk6ICdIaWdoJyxcclxuICAgIGFjdHVhbFJlcXVpcmVtZW50czogMTQxLFxyXG4gICAgc3RpZ0lkOiAnQ0lTQy1MMlMtMDAwMDEwJyxcclxuICAgIHZhbGlkYXRlZDogZmFsc2VcclxuICB9LFxyXG4gIC8vIFZpcnR1YWxpemF0aW9uIGFuZCBDbG91ZCBTVElHc1xyXG4gIHtcclxuICAgIGlkOiAndm13YXJlLXZzcGhlcmUtOCcsXHJcbiAgICBuYW1lOiAnVk13YXJlIHZTcGhlcmUgOC4wIFNUSUcnLFxyXG4gICAgdmVyc2lvbjogJ1YyUjEnLFxyXG4gICAgcmVsZWFzZURhdGU6ICcyMDI0LTEwLTI0JyxcclxuICAgIGRlc2NyaXB0aW9uOiAnU2VjdXJpdHkgVGVjaG5pY2FsIEltcGxlbWVudGF0aW9uIEd1aWRlIGZvciBWTXdhcmUgdlNwaGVyZSA4LjAnLFxyXG4gICAgYXBwbGljYWJsZVN5c3RlbVR5cGVzOiBbJ1ZNd2FyZScsICdWaXJ0dWFsaXphdGlvbicsICdIeXBlcnZpc29yJywgJ0Nsb3VkJ10sXHJcbiAgICB0cmlnZ2VyS2V5d29yZHM6IFsndm13YXJlJywgJ3ZzcGhlcmUnLCAndmNlbnRlcicsICdlc3hpJywgJ3ZpcnR1YWxpemF0aW9uJywgJ2h5cGVydmlzb3InLCAndm0nXSxcclxuICAgIGNvbnRyb2xGYW1pbGllczogWydBQycsICdBVScsICdDTScsICdTQycsICdTSSddLFxyXG4gICAgcHJpb3JpdHk6ICdIaWdoJyxcclxuICAgIGFjdHVhbFJlcXVpcmVtZW50czogMjM0LFxyXG4gICAgc3RpZ0lkOiAnVk1DSC04MC0wMDAwMDEnLFxyXG4gICAgdmFsaWRhdGVkOiBmYWxzZVxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6ICdkb2NrZXItZW50ZXJwcmlzZScsXHJcbiAgICBuYW1lOiAnRG9ja2VyIEVudGVycHJpc2UgMi54IFNUSUcnLFxyXG4gICAgdmVyc2lvbjogJ1YyUjInLFxyXG4gICAgcmVsZWFzZURhdGU6ICcyMDIzLTA2LTE1JyxcclxuICAgIGRlc2NyaXB0aW9uOiAnU2VjdXJpdHkgVGVjaG5pY2FsIEltcGxlbWVudGF0aW9uIEd1aWRlIGZvciBEb2NrZXIgRW50ZXJwcmlzZScsXHJcbiAgICBhcHBsaWNhYmxlU3lzdGVtVHlwZXM6IFsnRG9ja2VyJywgJ0NvbnRhaW5lcicsICdDbG91ZCddLFxyXG4gICAgdHJpZ2dlcktleXdvcmRzOiBbJ2RvY2tlcicsICdjb250YWluZXInLCAnY29udGFpbmVyaXphdGlvbiddLFxyXG4gICAgY29udHJvbEZhbWlsaWVzOiBbJ0FDJywgJ0FVJywgJ0NNJywgJ1NDJywgJ1NJJ10sXHJcbiAgICBwcmlvcml0eTogJ01lZGl1bScsXHJcbiAgICBhY3R1YWxSZXF1aXJlbWVudHM6IDEwMyxcclxuICAgIHN0aWdJZDogJ0RLRVItRUUtMDAxMDAwJyxcclxuICAgIHZhbGlkYXRlZDogZmFsc2VcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAna3ViZXJuZXRlcycsXHJcbiAgICBuYW1lOiAnS3ViZXJuZXRlcyBTVElHJyxcclxuICAgIHZlcnNpb246ICdWMlIxJyxcclxuICAgIHJlbGVhc2VEYXRlOiAnMjAyNC0wNS0xMCcsXHJcbiAgICBkZXNjcmlwdGlvbjogJ1NlY3VyaXR5IFRlY2huaWNhbCBJbXBsZW1lbnRhdGlvbiBHdWlkZSBmb3IgS3ViZXJuZXRlcycsXHJcbiAgICBhcHBsaWNhYmxlU3lzdGVtVHlwZXM6IFsnQ29udGFpbmVyJywgJ0t1YmVybmV0ZXMnLCAnT3JjaGVzdHJhdGlvbicsICdDbG91ZCddLFxyXG4gICAgdHJpZ2dlcktleXdvcmRzOiBbJ2t1YmVybmV0ZXMnLCAnazhzJywgJ2NvbnRhaW5lciBvcmNoZXN0cmF0aW9uJywgJ3BvZCcsICdkZXBsb3ltZW50JywgJ3NlcnZpY2UnLCAnY2x1c3RlciddLFxyXG4gICAgY29udHJvbEZhbWlsaWVzOiBbJ0FDJywgJ0FVJywgJ0NNJywgJ1NDJywgJ1NJJ10sXHJcbiAgICBwcmlvcml0eTogJ0hpZ2gnLFxyXG4gICAgYWN0dWFsUmVxdWlyZW1lbnRzOiA5NyxcclxuICAgIHN0aWdJZDogJ0NOVFItSzgtMDAwMTEwJyxcclxuICAgIHZhbGlkYXRlZDogZmFsc2VcclxuICB9LFxyXG4gIC8vIFdlYiBTZXJ2ZXIgU1RJR3NcclxuICB7XHJcbiAgICBpZDogJ2FwYWNoZS1zZXJ2ZXItMi00JyxcclxuICAgIG5hbWU6ICdBcGFjaGUgU2VydmVyIDIuNCBTVElHJyxcclxuICAgIHZlcnNpb246ICdWM1IxJyxcclxuICAgIHJlbGVhc2VEYXRlOiAnMjAyNC0wMy0yMicsXHJcbiAgICBkZXNjcmlwdGlvbjogJ1NlY3VyaXR5IFRlY2huaWNhbCBJbXBsZW1lbnRhdGlvbiBHdWlkZSBmb3IgQXBhY2hlIEhUVFAgU2VydmVyIDIuNCcsXHJcbiAgICBhcHBsaWNhYmxlU3lzdGVtVHlwZXM6IFsnV2ViIFNlcnZlcicsICdBcGFjaGUnLCAnSFRUUCddLFxyXG4gICAgdHJpZ2dlcktleXdvcmRzOiBbJ2FwYWNoZScsICdodHRwZCcsICd3ZWIgc2VydmVyJywgJ2h0dHAnLCAnaHR0cHMnLCAnc3NsJywgJ3RscyddLFxyXG4gICAgY29udHJvbEZhbWlsaWVzOiBbJ0FDJywgJ0FVJywgJ0NNJywgJ1NDJywgJ1NJJ10sXHJcbiAgICBwcmlvcml0eTogJ0hpZ2gnLFxyXG4gICAgYWN0dWFsUmVxdWlyZW1lbnRzOiA5MyxcclxuICAgIHN0aWdJZDogJ0FTMjQtVTEtMDAwMDEwJyxcclxuICAgIHZhbGlkYXRlZDogZmFsc2VcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnbWljcm9zb2Z0LWlpcy0xMCcsXHJcbiAgICBuYW1lOiAnTWljcm9zb2Z0IElJUyAxMC4wIFNlcnZlciBTVElHJyxcclxuICAgIHZlcnNpb246ICdWM1IxJyxcclxuICAgIHJlbGVhc2VEYXRlOiAnMjAyNC0wNi0yOCcsXHJcbiAgICBkZXNjcmlwdGlvbjogJ1NlY3VyaXR5IFRlY2huaWNhbCBJbXBsZW1lbnRhdGlvbiBHdWlkZSBmb3IgTWljcm9zb2Z0IEludGVybmV0IEluZm9ybWF0aW9uIFNlcnZpY2VzIDEwLjAnLFxyXG4gICAgYXBwbGljYWJsZVN5c3RlbVR5cGVzOiBbJ1dlYiBTZXJ2ZXInLCAnSUlTJywgJ1dpbmRvd3MnLCAnSFRUUCddLFxyXG4gICAgdHJpZ2dlcktleXdvcmRzOiBbJ2lpcycsICdpbnRlcm5ldCBpbmZvcm1hdGlvbiBzZXJ2aWNlcycsICd3ZWIgc2VydmVyJywgJ2FzcC5uZXQnLCAnd2luZG93cyB3ZWInXSxcclxuICAgIGNvbnRyb2xGYW1pbGllczogWydBQycsICdBVScsICdDTScsICdTQycsICdTSSddLFxyXG4gICAgcHJpb3JpdHk6ICdIaWdoJyxcclxuICAgIGFjdHVhbFJlcXVpcmVtZW50czogMTA3LFxyXG4gICAgc3RpZ0lkOiAnSUlTVC1TVi0wMDAxMDEnLFxyXG4gICAgdmFsaWRhdGVkOiBmYWxzZVxyXG4gIH0sXHJcbiAgLy8gRGF0YWJhc2UgU1RJR3NcclxuICB7XHJcbiAgICBpZDogJ21pY3Jvc29mdC1zcWwtc2VydmVyLTIwMjInLFxyXG4gICAgbmFtZTogJ01TIFNRTCBTZXJ2ZXIgMjAyMiBJbnN0YW5jZSBTVElHJyxcclxuICAgIHZlcnNpb246ICdWMVIxJyxcclxuICAgIHJlbGVhc2VEYXRlOiAnMjAyNC0wNi0yMScsXHJcbiAgICBkZXNjcmlwdGlvbjogJ1NlY3VyaXR5IFRlY2huaWNhbCBJbXBsZW1lbnRhdGlvbiBHdWlkZSBmb3IgTWljcm9zb2Z0IFNRTCBTZXJ2ZXIgMjAyMicsXHJcbiAgICBhcHBsaWNhYmxlU3lzdGVtVHlwZXM6IFsnRGF0YWJhc2UnLCAnU1FMIFNlcnZlcicsICdNaWNyb3NvZnQnLCAnUkRCTVMnXSxcclxuICAgIHRyaWdnZXJLZXl3b3JkczogWydzcWwgc2VydmVyJywgJ21zc3FsJywgJ2RhdGFiYXNlJywgJ3JkYm1zJywgJ3RzcWwnLCAnc3FsJywgJ21pY3Jvc29mdCBkYXRhYmFzZSddLFxyXG4gICAgY29udHJvbEZhbWlsaWVzOiBbJ0FDJywgJ0FVJywgJ0NNJywgJ1NDJywgJ1NJJ10sXHJcbiAgICBwcmlvcml0eTogJ0hpZ2gnLFxyXG4gICAgYWN0dWFsUmVxdWlyZW1lbnRzOiAxMzgsXHJcbiAgICBzdGlnSWQ6ICdTUUw2LUQwLTAwMDEwMCcsXHJcbiAgICB2YWxpZGF0ZWQ6IGZhbHNlXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ29yYWNsZS1kYXRhYmFzZS0xOWMnLFxyXG4gICAgbmFtZTogJ09yYWNsZSBEYXRhYmFzZSAxOWMgU1RJRycsXHJcbiAgICB2ZXJzaW9uOiAnVjNSMScsXHJcbiAgICByZWxlYXNlRGF0ZTogJzIwMjQtMDYtMjEnLFxyXG4gICAgZGVzY3JpcHRpb246ICdTZWN1cml0eSBUZWNobmljYWwgSW1wbGVtZW50YXRpb24gR3VpZGUgZm9yIE9yYWNsZSBEYXRhYmFzZSAxOWMnLFxyXG4gICAgYXBwbGljYWJsZVN5c3RlbVR5cGVzOiBbJ0RhdGFiYXNlJywgJ09yYWNsZScsICdSREJNUyddLFxyXG4gICAgdHJpZ2dlcktleXdvcmRzOiBbJ29yYWNsZScsICdkYXRhYmFzZScsICdyZGJtcycsICdwbHNxbCcsICdvcmFjbGUgZGInXSxcclxuICAgIGNvbnRyb2xGYW1pbGllczogWydBQycsICdBVScsICdDTScsICdTQycsICdTSSddLFxyXG4gICAgcHJpb3JpdHk6ICdIaWdoJyxcclxuICAgIGFjdHVhbFJlcXVpcmVtZW50czogMTU2LFxyXG4gICAgc3RpZ0lkOiAnTzEyMS1DMi0wMDAxMDAnLFxyXG4gICAgdmFsaWRhdGVkOiBmYWxzZVxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6ICdwb3N0Z3Jlc3FsLTl4JyxcclxuICAgIG5hbWU6ICdQb3N0Z3JlU1FMIDkueCBTVElHJyxcclxuICAgIHZlcnNpb246ICdWMlI1JyxcclxuICAgIHJlbGVhc2VEYXRlOiAnMjAyMy0wOS0xMicsXHJcbiAgICBkZXNjcmlwdGlvbjogJ1NlY3VyaXR5IFRlY2huaWNhbCBJbXBsZW1lbnRhdGlvbiBHdWlkZSBmb3IgUG9zdGdyZVNRTCBEYXRhYmFzZSA5LngnLFxyXG4gICAgYXBwbGljYWJsZVN5c3RlbVR5cGVzOiBbJ0RhdGFiYXNlJywgJ1Bvc3RncmVTUUwnLCAnUkRCTVMnLCAnT3BlbiBTb3VyY2UnXSxcclxuICAgIHRyaWdnZXJLZXl3b3JkczogWydwb3N0Z3Jlc3FsJywgJ3Bvc3RncmVzJywgJ2RhdGFiYXNlJywgJ3JkYm1zJywgJ3NxbCcsICdkYicsICdwc3FsJ10sXHJcbiAgICBjb250cm9sRmFtaWxpZXM6IFsnQUMnLCAnQVUnLCAnQ00nLCAnU0MnLCAnU0knXSxcclxuICAgIHByaW9yaXR5OiAnSGlnaCcsXHJcbiAgICBhY3R1YWxSZXF1aXJlbWVudHM6IDEyMixcclxuICAgIHN0aWdJZDogJ1BHUzktMDAtMDAwMTAwJyxcclxuICAgIHZhbGlkYXRlZDogZmFsc2VcclxuICB9XHJcbl07XHJcblxyXG4vLyBTY29yaW5nIHdlaWdodHMgZm9yIHRyYW5zcGFyZW50IGFuZCBjb25zaXN0ZW50IHJlY29tbWVuZGF0aW9uc1xyXG5jb25zdCBTQ09SSU5HX1dFSUdIVFMgPSB7XHJcbiAgS0VZV09SRF9NQVRDSF9CQVNFOiAyLFxyXG4gIEtFWVdPUkRfTUFUQ0hfQVBQX1NFQ1VSSVRZOiAzLFxyXG4gIEtFWVdPUkRfTUFUQ0hfVEVDSF9TUEVDSUZJQzogNSxcclxuICBDT05UUk9MX0ZBTUlMWV9NQVRDSDogMyxcclxuICBERVNJR05fRUxFTUVOVF9LRVlXT1JEOiAyLFxyXG4gIERFU0lHTl9FTEVNRU5UX1RZUEU6IDMsXHJcbiAgREVTSUdOX0VMRU1FTlRfRVhBQ1RfVEVDSDogNixcclxuICBERVZFTE9QTUVOVF9FTlZJUk9OTUVOVF9CT05VUzogNSxcclxuICBJTkZSQVNUUlVDVFVSRV9QRU5BTFRZX0lOX0RFVjogLTMsXHJcbiAgTUlOX0NSSVRJQ0FMX0NPTkZJREVOQ0U6IDgwLFxyXG4gIE1JTl9ISUdIX0NPTkZJREVOQ0U6IDYwLFxyXG4gIE1JTl9NRURJVU1fQ09ORklERU5DRTogNDBcclxufTtcclxuXHJcbi8qKlxyXG4gKiBBbmFseXplcyByZXF1aXJlbWVudHMgYW5kIGRlc2lnbiBlbGVtZW50cyB0byByZWNvbW1lbmQgU1RJRyBmYW1pbGllc1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0aWdGYW1pbHlSZWNvbW1lbmRhdGlvbnMoXHJcbiAgcmVxdWlyZW1lbnRzOiBTZWN1cml0eVJlcXVpcmVtZW50W10sXHJcbiAgZGVzaWduRWxlbWVudHM6IFN5c3RlbURlc2lnbkVsZW1lbnRbXVxyXG4pOiBTdGlnRmFtaWx5UmVjb21tZW5kYXRpb25bXSB7XHJcbiAgY29uc3QgcmVjb21tZW5kYXRpb25zOiBTdGlnRmFtaWx5UmVjb21tZW5kYXRpb25bXSA9IFtdO1xyXG5cclxuICBmb3IgKGNvbnN0IHN0aWdGYW1pbHkgb2YgU1RJR19GQU1JTElFUykge1xyXG4gICAgY29uc3QgcmVjb21tZW5kYXRpb24gPSBhbmFseXplU3RpZ0ZhbWlseShzdGlnRmFtaWx5LCByZXF1aXJlbWVudHMsIGRlc2lnbkVsZW1lbnRzKTtcclxuICAgIGlmIChyZWNvbW1lbmRhdGlvbi5jb25maWRlbmNlU2NvcmUgPiAwKSB7XHJcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKHJlY29tbWVuZGF0aW9uKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFNvcnQgYnkgY29uZmlkZW5jZSBzY29yZSAoZGVzY2VuZGluZyAtIGhpZ2hlc3QgY29uZmlkZW5jZSBmaXJzdClcclxuICByZXR1cm4gcmVjb21tZW5kYXRpb25zLnNvcnQoKGEsIGIpID0+IHtcclxuICAgIHJldHVybiBiLmNvbmZpZGVuY2VTY29yZSAtIGEuY29uZmlkZW5jZVNjb3JlO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhbmFseXplU3RpZ0ZhbWlseShcclxuICBzdGlnRmFtaWx5OiBTdGlnRmFtaWx5LFxyXG4gIHJlcXVpcmVtZW50czogU2VjdXJpdHlSZXF1aXJlbWVudFtdLFxyXG4gIGRlc2lnbkVsZW1lbnRzOiBTeXN0ZW1EZXNpZ25FbGVtZW50W11cclxuKTogU3RpZ0ZhbWlseVJlY29tbWVuZGF0aW9uIHtcclxuICBjb25zdCBzY29yZUJyZWFrZG93biA9IHtcclxuICAgIGtleXdvcmRNYXRjaGVzOiAwLFxyXG4gICAgY29udHJvbEZhbWlseU1hdGNoZXM6IDAsXHJcbiAgICBkZXNpZ25FbGVtZW50TWF0Y2hlczogMCxcclxuICAgIHRlY2hub2xvZ3lTcGVjaWZpY0JvbnVzOiAwLFxyXG4gICAgZW52aXJvbm1lbnRCb251czogMCxcclxuICAgIHBlbmFsdGllczogMFxyXG4gIH07XHJcblxyXG4gIGNvbnN0IG1hdGNoaW5nUmVxdWlyZW1lbnRzOiBzdHJpbmdbXSA9IFtdO1xyXG4gIGNvbnN0IG1hdGNoaW5nRGVzaWduRWxlbWVudHM6IHN0cmluZ1tdID0gW107XHJcbiAgY29uc3QgcmVhc29uaW5nOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICAvLyBEZXRlY3QgZW52aXJvbm1lbnQgdHlwZVxyXG4gIGNvbnN0IGlzRGV2ZWxvcG1lbnRFbnZpcm9ubWVudCA9IGRldGVjdERldmVsb3BtZW50RW52aXJvbm1lbnQoZGVzaWduRWxlbWVudHMpO1xyXG4gIGNvbnN0IGRldGVjdGVkVGVjaG5vbG9naWVzID0gZGV0ZWN0VGVjaG5vbG9naWVzKGRlc2lnbkVsZW1lbnRzKTtcclxuXHJcbiAgLy8gQXBwbHkgZW52aXJvbm1lbnQgYm9udXMgZm9yIGFwcCBzZWN1cml0eSBTVElHc1xyXG4gIGlmIChpc0RldmVsb3BtZW50RW52aXJvbm1lbnQgJiYgaXNBcHBsaWNhdGlvblNlY3VyaXR5U3RpZyhzdGlnRmFtaWx5LmlkKSkge1xyXG4gICAgc2NvcmVCcmVha2Rvd24uZW52aXJvbm1lbnRCb251cyA9IFNDT1JJTkdfV0VJR0hUUy5ERVZFTE9QTUVOVF9FTlZJUk9OTUVOVF9CT05VUztcclxuICAgIHJlYXNvbmluZy5wdXNoKGDinJMgRGV2ZWxvcG1lbnQgZW52aXJvbm1lbnQgZGV0ZWN0ZWQgLSBhcHBsaWNhdGlvbiBzZWN1cml0eSBjb250cm9scyBhcmUgZXNzZW50aWFsYCk7XHJcbiAgfVxyXG5cclxuICAvLyBBbmFseXplIHJlcXVpcmVtZW50c1xyXG4gIGZvciAoY29uc3QgcmVxIG9mIHJlcXVpcmVtZW50cykge1xyXG4gICAgY29uc3QgcmVxVGV4dCA9IGAke3JlcS50aXRsZX0gJHtyZXEuZGVzY3JpcHRpb259ICR7cmVxLmNhdGVnb3J5fSAke3JlcS5jb250cm9sRmFtaWx5IHx8ICcnfSAke3JlcS5zb3VyY2V9YC50b0xvd2VyQ2FzZSgpO1xyXG4gICAgXHJcbiAgICAvLyBDaGVjayBmb3Iga2V5d29yZCBtYXRjaGVzXHJcbiAgICBjb25zdCBrZXl3b3JkTWF0Y2hlcyA9IHN0aWdGYW1pbHkudHJpZ2dlcktleXdvcmRzLmZpbHRlcihrZXl3b3JkID0+IFxyXG4gICAgICByZXFUZXh0LmluY2x1ZGVzKGtleXdvcmQudG9Mb3dlckNhc2UoKSlcclxuICAgICk7XHJcbiAgICBcclxuICAgIGlmIChrZXl3b3JkTWF0Y2hlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGNvbnN0IHdlaWdodCA9IGlzQXBwbGljYXRpb25TZWN1cml0eVN0aWcoc3RpZ0ZhbWlseS5pZCkgXHJcbiAgICAgICAgPyBTQ09SSU5HX1dFSUdIVFMuS0VZV09SRF9NQVRDSF9BUFBfU0VDVVJJVFkgXHJcbiAgICAgICAgOiBTQ09SSU5HX1dFSUdIVFMuS0VZV09SRF9NQVRDSF9CQVNFO1xyXG4gICAgICBcclxuICAgICAgc2NvcmVCcmVha2Rvd24ua2V5d29yZE1hdGNoZXMgKz0ga2V5d29yZE1hdGNoZXMubGVuZ3RoICogd2VpZ2h0O1xyXG4gICAgICBtYXRjaGluZ1JlcXVpcmVtZW50cy5wdXNoKHJlcS5pZCk7XHJcbiAgICAgIHJlYXNvbmluZy5wdXNoKGDinJMgUmVxdWlyZW1lbnQgXCIke3JlcS50aXRsZX1cIiBtYXRjaGVzOiAke2tleXdvcmRNYXRjaGVzLmpvaW4oJywgJyl9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2hlY2sgZm9yIGNvbnRyb2wgZmFtaWx5IG1hdGNoZXNcclxuICAgIGlmIChyZXEuY29udHJvbEZhbWlseSAmJiBzdGlnRmFtaWx5LmNvbnRyb2xGYW1pbGllcy5pbmNsdWRlcyhyZXEuY29udHJvbEZhbWlseSkpIHtcclxuICAgICAgc2NvcmVCcmVha2Rvd24uY29udHJvbEZhbWlseU1hdGNoZXMgKz0gU0NPUklOR19XRUlHSFRTLkNPTlRST0xfRkFNSUxZX01BVENIO1xyXG4gICAgICBpZiAoIW1hdGNoaW5nUmVxdWlyZW1lbnRzLmluY2x1ZGVzKHJlcS5pZCkpIHtcclxuICAgICAgICBtYXRjaGluZ1JlcXVpcmVtZW50cy5wdXNoKHJlcS5pZCk7XHJcbiAgICAgIH1cclxuICAgICAgcmVhc29uaW5nLnB1c2goYOKckyBDb250cm9sIGZhbWlseSAke3JlcS5jb250cm9sRmFtaWx5fSBhcHBsaWVzIHRvIHRoaXMgU1RJR2ApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gQW5hbHl6ZSBkZXNpZ24gZWxlbWVudHMgd2l0aCBlbmhhbmNlZCB0ZWNobm9sb2d5IGRldGVjdGlvblxyXG4gIGZvciAoY29uc3QgZWxlbWVudCBvZiBkZXNpZ25FbGVtZW50cykge1xyXG4gICAgY29uc3QgZWxlbWVudFRleHQgPSBgJHtlbGVtZW50Lm5hbWV9ICR7ZWxlbWVudC5kZXNjcmlwdGlvbn0gJHtlbGVtZW50LnR5cGV9ICR7ZWxlbWVudC50ZWNobm9sb2d5IHx8ICcnfWAudG9Mb3dlckNhc2UoKTtcclxuICAgIFxyXG4gICAgLy8gQ2hlY2sgZm9yIGtleXdvcmQgbWF0Y2hlc1xyXG4gICAgY29uc3Qga2V5d29yZE1hdGNoZXMgPSBzdGlnRmFtaWx5LnRyaWdnZXJLZXl3b3Jkcy5maWx0ZXIoa2V5d29yZCA9PiBcclxuICAgICAgZWxlbWVudFRleHQuaW5jbHVkZXMoa2V5d29yZC50b0xvd2VyQ2FzZSgpKVxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgLy8gQ2hlY2sgZm9yIHN5c3RlbSB0eXBlIG1hdGNoZXNcclxuICAgIGNvbnN0IHR5cGVNYXRjaGVzID0gc3RpZ0ZhbWlseS5hcHBsaWNhYmxlU3lzdGVtVHlwZXMuZmlsdGVyKHR5cGUgPT4gXHJcbiAgICAgIGVsZW1lbnRUZXh0LmluY2x1ZGVzKHR5cGUudG9Mb3dlckNhc2UoKSkgfHwgZWxlbWVudC50eXBlLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXModHlwZS50b0xvd2VyQ2FzZSgpKVxyXG4gICAgKTtcclxuXHJcbiAgICBpZiAoa2V5d29yZE1hdGNoZXMubGVuZ3RoID4gMCB8fCB0eXBlTWF0Y2hlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIC8vIENoZWNrIGZvciBleGFjdCB0ZWNobm9sb2d5IG1hdGNoZXNcclxuICAgICAgY29uc3QgaGFzRXhhY3RUZWNoTWF0Y2ggPSBjaGVja0V4YWN0VGVjaG5vbG9neU1hdGNoKGVsZW1lbnRUZXh0LCBzdGlnRmFtaWx5LmlkLCBkZXRlY3RlZFRlY2hub2xvZ2llcyk7XHJcbiAgICAgIFxyXG4gICAgICBpZiAoaGFzRXhhY3RUZWNoTWF0Y2gpIHtcclxuICAgICAgICBzY29yZUJyZWFrZG93bi50ZWNobm9sb2d5U3BlY2lmaWNCb251cyArPSBTQ09SSU5HX1dFSUdIVFMuREVTSUdOX0VMRU1FTlRfRVhBQ1RfVEVDSDtcclxuICAgICAgICByZWFzb25pbmcucHVzaChg4q2QIERpcmVjdCB0ZWNobm9sb2d5IG1hdGNoOiAke2VsZW1lbnQubmFtZX0gcmVxdWlyZXMgc3BlY2lmaWMgJHtzdGlnRmFtaWx5Lm5hbWV9YCk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHNjb3JlQnJlYWtkb3duLmRlc2lnbkVsZW1lbnRNYXRjaGVzICs9IFxyXG4gICAgICAgIChrZXl3b3JkTWF0Y2hlcy5sZW5ndGggKiBTQ09SSU5HX1dFSUdIVFMuREVTSUdOX0VMRU1FTlRfS0VZV09SRCkgK1xyXG4gICAgICAgICh0eXBlTWF0Y2hlcy5sZW5ndGggKiBTQ09SSU5HX1dFSUdIVFMuREVTSUdOX0VMRU1FTlRfVFlQRSk7XHJcbiAgICAgIFxyXG4gICAgICBtYXRjaGluZ0Rlc2lnbkVsZW1lbnRzLnB1c2goZWxlbWVudC5pZCk7XHJcbiAgICAgIFxyXG4gICAgICBpZiAoa2V5d29yZE1hdGNoZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIHJlYXNvbmluZy5wdXNoKGDinJMgRGVzaWduIGVsZW1lbnQgXCIke2VsZW1lbnQubmFtZX1cIiBtYXRjaGVzOiAke2tleXdvcmRNYXRjaGVzLmpvaW4oJywgJyl9YCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHR5cGVNYXRjaGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICByZWFzb25pbmcucHVzaChg4pyTIFN5c3RlbSB0eXBlIG1hdGNoOiAke3R5cGVNYXRjaGVzLmpvaW4oJywgJyl9YCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIEFwcGx5IHBlbmFsdGllcyBmb3IgaW5mcmFzdHJ1Y3R1cmUgU1RJR3MgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzXHJcbiAgaWYgKGlzRGV2ZWxvcG1lbnRFbnZpcm9ubWVudCAmJiBpc0luZnJhc3RydWN0dXJlU3RpZyhzdGlnRmFtaWx5LmlkKSkge1xyXG4gICAgc2NvcmVCcmVha2Rvd24ucGVuYWx0aWVzID0gU0NPUklOR19XRUlHSFRTLklORlJBU1RSVUNUVVJFX1BFTkFMVFlfSU5fREVWO1xyXG4gICAgaWYgKHNjb3JlQnJlYWtkb3duLmtleXdvcmRNYXRjaGVzICsgc2NvcmVCcmVha2Rvd24uZGVzaWduRWxlbWVudE1hdGNoZXMgPiAwKSB7XHJcbiAgICAgIHJlYXNvbmluZy5wdXNoKGDimqAgSW5mcmFzdHJ1Y3R1cmUgU1RJRyAtIGxvd2VyIHByaW9yaXR5IGZvciBhcHBsaWNhdGlvbiBkZXZlbG9wbWVudGApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gQ2FsY3VsYXRlIHRvdGFsIHJlbGV2YW5jZSBzY29yZVxyXG4gIGNvbnN0IHJlbGV2YW5jZVNjb3JlID0gTWF0aC5tYXgoMCwgXHJcbiAgICBzY29yZUJyZWFrZG93bi5rZXl3b3JkTWF0Y2hlcyArXHJcbiAgICBzY29yZUJyZWFrZG93bi5jb250cm9sRmFtaWx5TWF0Y2hlcyArXHJcbiAgICBzY29yZUJyZWFrZG93bi5kZXNpZ25FbGVtZW50TWF0Y2hlcyArXHJcbiAgICBzY29yZUJyZWFrZG93bi50ZWNobm9sb2d5U3BlY2lmaWNCb251cyArXHJcbiAgICBzY29yZUJyZWFrZG93bi5lbnZpcm9ubWVudEJvbnVzICtcclxuICAgIHNjb3JlQnJlYWtkb3duLnBlbmFsdGllc1xyXG4gICk7XHJcblxyXG4gIC8vIENhbGN1bGF0ZSBjb25maWRlbmNlIHNjb3JlICgwLTEwMClcclxuICBjb25zdCBjb25maWRlbmNlU2NvcmUgPSBjYWxjdWxhdGVDb25maWRlbmNlU2NvcmUoXHJcbiAgICBtYXRjaGluZ1JlcXVpcmVtZW50cy5sZW5ndGgsXHJcbiAgICBtYXRjaGluZ0Rlc2lnbkVsZW1lbnRzLmxlbmd0aCxcclxuICAgIHN0aWdGYW1pbHksXHJcbiAgICBkZXRlY3RlZFRlY2hub2xvZ2llc1xyXG4gICk7XHJcblxyXG4gIC8vIERldGVybWluZSBpbXBsZW1lbnRhdGlvbiBwcmlvcml0eSBiYXNlZCBvbiBjb25maWRlbmNlIHNjb3JlXHJcbiAgbGV0IGltcGxlbWVudGF0aW9uUHJpb3JpdHk6ICdDcml0aWNhbCcgfCAnSGlnaCcgfCAnTWVkaXVtJyB8ICdMb3cnID0gJ0xvdyc7XHJcbiAgaWYgKGNvbmZpZGVuY2VTY29yZSA+PSBTQ09SSU5HX1dFSUdIVFMuTUlOX0NSSVRJQ0FMX0NPTkZJREVOQ0UgJiYgc3RpZ0ZhbWlseS5wcmlvcml0eSA9PT0gJ0hpZ2gnKSB7XHJcbiAgICBpbXBsZW1lbnRhdGlvblByaW9yaXR5ID0gJ0NyaXRpY2FsJztcclxuICB9IGVsc2UgaWYgKGNvbmZpZGVuY2VTY29yZSA+PSBTQ09SSU5HX1dFSUdIVFMuTUlOX0hJR0hfQ09ORklERU5DRSB8fCBzdGlnRmFtaWx5LnByaW9yaXR5ID09PSAnSGlnaCcpIHtcclxuICAgIGltcGxlbWVudGF0aW9uUHJpb3JpdHkgPSAnSGlnaCc7XHJcbiAgfSBlbHNlIGlmIChjb25maWRlbmNlU2NvcmUgPj0gU0NPUklOR19XRUlHSFRTLk1JTl9NRURJVU1fQ09ORklERU5DRSB8fCBzdGlnRmFtaWx5LnByaW9yaXR5ID09PSAnTWVkaXVtJykge1xyXG4gICAgaW1wbGVtZW50YXRpb25Qcmlvcml0eSA9ICdNZWRpdW0nO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIHN0aWdGYW1pbHksXHJcbiAgICBjb25maWRlbmNlU2NvcmUsXHJcbiAgICBtYXRjaGluZ1JlcXVpcmVtZW50cyxcclxuICAgIG1hdGNoaW5nRGVzaWduRWxlbWVudHMsXHJcbiAgICByZWFzb25pbmcsXHJcbiAgICBpbXBsZW1lbnRhdGlvblByaW9yaXR5LFxyXG4gICAgc2NvcmVCcmVha2Rvd25cclxuICB9O1xyXG59XHJcblxyXG4vKipcclxuICogRGV0ZWN0IGlmIHRoaXMgaXMgYSBkZXZlbG9wbWVudC9hcHBsaWNhdGlvbiBlbnZpcm9ubWVudFxyXG4gKi9cclxuZnVuY3Rpb24gZGV0ZWN0RGV2ZWxvcG1lbnRFbnZpcm9ubWVudChkZXNpZ25FbGVtZW50czogU3lzdGVtRGVzaWduRWxlbWVudFtdKTogYm9vbGVhbiB7XHJcbiAgcmV0dXJuIGRlc2lnbkVsZW1lbnRzLnNvbWUoZWxlbWVudCA9PiB7XHJcbiAgICBjb25zdCB0ZXh0ID0gYCR7ZWxlbWVudC5uYW1lfSAke2VsZW1lbnQuZGVzY3JpcHRpb259ICR7ZWxlbWVudC50eXBlfSAke2VsZW1lbnQudGVjaG5vbG9neSB8fCAnJ31gLnRvTG93ZXJDYXNlKCk7XHJcbiAgICByZXR1cm4gdGV4dC5pbmNsdWRlcygnbm9kZScpIHx8IHRleHQuaW5jbHVkZXMoJ2phdmFzY3JpcHQnKSB8fCBcclxuICAgICAgICAgICB0ZXh0LmluY2x1ZGVzKCdwb3N0Z3JlcycpIHx8IHRleHQuaW5jbHVkZXMoJ2FwaScpIHx8XHJcbiAgICAgICAgICAgdGV4dC5pbmNsdWRlcygnYXBwbGljYXRpb24nKSB8fCB0ZXh0LmluY2x1ZGVzKCd3ZWInKSB8fFxyXG4gICAgICAgICAgIHRleHQuaW5jbHVkZXMoJ2Zyb250ZW5kJykgfHwgdGV4dC5pbmNsdWRlcygnYmFja2VuZCcpIHx8XHJcbiAgICAgICAgICAgdGV4dC5pbmNsdWRlcygnZGF0YWJhc2UnKSB8fCB0ZXh0LmluY2x1ZGVzKCdzZXJ2ZXInKTtcclxuICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIERldGVjdCBzcGVjaWZpYyB0ZWNobm9sb2dpZXMgaW4gdXNlXHJcbiAqL1xyXG5mdW5jdGlvbiBkZXRlY3RUZWNobm9sb2dpZXMoZGVzaWduRWxlbWVudHM6IFN5c3RlbURlc2lnbkVsZW1lbnRbXSk6IFNldDxzdHJpbmc+IHtcclxuICBjb25zdCB0ZWNobm9sb2dpZXMgPSBuZXcgU2V0PHN0cmluZz4oKTtcclxuICBjb25zdCB0ZWNoUGF0dGVybnMgPSB7XHJcbiAgICAncG9zdGdyZXNxbCc6IC9wb3N0Z3JlcyhxbCk/L2ksXHJcbiAgICAnZG9ja2VyJzogL2RvY2tlcnxjb250YWluZXIvaSxcclxuICAgICdrdWJlcm5ldGVzJzogL2s4c3xrdWJlcm5ldGVzL2ksXHJcbiAgICAnYXBhY2hlJzogL2FwYWNoZXxodHRwZC9pLFxyXG4gICAgJ3dpbmRvd3MnOiAvd2luZG93cy9pLFxyXG4gICAgJ2xpbnV4JzogL2xpbnV4fHVidW50dXxyaGVsfHJlZGhhdC9pXHJcbiAgfTtcclxuXHJcbiAgZGVzaWduRWxlbWVudHMuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgIGNvbnN0IHRleHQgPSBgJHtlbGVtZW50Lm5hbWV9ICR7ZWxlbWVudC5kZXNjcmlwdGlvbn0gJHtlbGVtZW50LnR5cGV9ICR7ZWxlbWVudC50ZWNobm9sb2d5IHx8ICcnfWAudG9Mb3dlckNhc2UoKTtcclxuICAgIFxyXG4gICAgT2JqZWN0LmVudHJpZXModGVjaFBhdHRlcm5zKS5mb3JFYWNoKChbdGVjaCwgcGF0dGVybl0pID0+IHtcclxuICAgICAgaWYgKHBhdHRlcm4udGVzdCh0ZXh0KSkge1xyXG4gICAgICAgIHRlY2hub2xvZ2llcy5hZGQodGVjaCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gdGVjaG5vbG9naWVzO1xyXG59XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgU1RJRyBpcyBhcHBsaWNhdGlvbiBzZWN1cml0eSBmb2N1c2VkXHJcbiAqL1xyXG5mdW5jdGlvbiBpc0FwcGxpY2F0aW9uU2VjdXJpdHlTdGlnKHN0aWdJZDogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgcmV0dXJuIHN0aWdJZC5pbmNsdWRlcygnYXBwbGljYXRpb24nKSB8fCBcclxuICAgICAgICAgc3RpZ0lkLmluY2x1ZGVzKCd3ZWInKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIFNUSUcgaXMgaW5mcmFzdHJ1Y3R1cmUgZm9jdXNlZFxyXG4gKi9cclxuZnVuY3Rpb24gaXNJbmZyYXN0cnVjdHVyZVN0aWcoc3RpZ0lkOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICByZXR1cm4gc3RpZ0lkLmluY2x1ZGVzKCd3aW5kb3dzLXNlcnZlcicpIHx8IFxyXG4gICAgICAgICBzdGlnSWQuaW5jbHVkZXMoJ2Npc2NvJykgfHwgXHJcbiAgICAgICAgIHN0aWdJZC5pbmNsdWRlcygndm13YXJlJykgfHxcclxuICAgICAgICAgc3RpZ0lkLmluY2x1ZGVzKCdyaGVsJykgfHxcclxuICAgICAgICAgc3RpZ0lkLmluY2x1ZGVzKCd1YnVudHUnKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENoZWNrIGZvciBleGFjdCB0ZWNobm9sb2d5IG1hdGNoZXNcclxuICovXHJcbmZ1bmN0aW9uIGNoZWNrRXhhY3RUZWNobm9sb2d5TWF0Y2goXHJcbiAgZWxlbWVudFRleHQ6IHN0cmluZyxcclxuICBzdGlnSWQ6IHN0cmluZyxcclxuICBkZXRlY3RlZFRlY2hzOiBTZXQ8c3RyaW5nPlxyXG4pOiBib29sZWFuIHtcclxuICBjb25zdCBleGFjdE1hdGNoZXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZ1tdPiA9IHtcclxuICAgICdwb3N0Z3Jlc3FsLTl4JzogWydwb3N0Z3Jlc3FsJ10sXHJcbiAgICAnZG9ja2VyLWVudGVycHJpc2UnOiBbJ2RvY2tlciddLFxyXG4gICAgJ2t1YmVybmV0ZXMnOiBbJ2t1YmVybmV0ZXMnXSxcclxuICAgICdhcGFjaGUtc2VydmVyLTItNCc6IFsnYXBhY2hlJ11cclxuICB9O1xyXG5cclxuICBjb25zdCByZXF1aXJlZFRlY2hzID0gZXhhY3RNYXRjaGVzW3N0aWdJZF07XHJcbiAgaWYgKCFyZXF1aXJlZFRlY2hzKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gIHJldHVybiByZXF1aXJlZFRlY2hzLnNvbWUodGVjaCA9PiBkZXRlY3RlZFRlY2hzLmhhcyh0ZWNoKSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGUgY29uZmlkZW5jZSBzY29yZSAoMC0xMDApIGJhc2VkIG9uIG1hdGNoIHF1YWxpdHlcclxuICovXHJcbmZ1bmN0aW9uIGNhbGN1bGF0ZUNvbmZpZGVuY2VTY29yZShcclxuICByZXFNYXRjaGVzOiBudW1iZXIsXHJcbiAgZGVzaWduTWF0Y2hlczogbnVtYmVyLFxyXG4gIHN0aWdGYW1pbHk6IFN0aWdGYW1pbHksXHJcbiAgZGV0ZWN0ZWRUZWNoczogU2V0PHN0cmluZz5cclxuKTogbnVtYmVyIHtcclxuICBsZXQgc2NvcmUgPSAwO1xyXG5cclxuICAvLyBCYXNlIHNjb3JlIGZyb20gbWF0Y2hlc1xyXG4gIHNjb3JlICs9IE1hdGgubWluKHJlcU1hdGNoZXMgKiAxMCwgMzApOyAvLyBVcCB0byAzMCBwb2ludHMgZnJvbSByZXF1aXJlbWVudHNcclxuICBzY29yZSArPSBNYXRoLm1pbihkZXNpZ25NYXRjaGVzICogMTUsIDQwKTsgLy8gVXAgdG8gNDAgcG9pbnRzIGZyb20gZGVzaWduIGVsZW1lbnRzXHJcblxyXG4gIC8vIEJvbnVzIGZvciB2YWxpZGF0ZWQgU1RJR3NcclxuICBpZiAoc3RpZ0ZhbWlseS52YWxpZGF0ZWQpIHtcclxuICAgIHNjb3JlICs9IDEwO1xyXG4gIH1cclxuXHJcbiAgLy8gQm9udXMgZm9yIGV4YWN0IHRlY2hub2xvZ3kgbWF0Y2hcclxuICBpZiAoY2hlY2tFeGFjdFRlY2hub2xvZ3lNYXRjaCgnJywgc3RpZ0ZhbWlseS5pZCwgZGV0ZWN0ZWRUZWNocykpIHtcclxuICAgIHNjb3JlICs9IDIwO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIE1hdGgubWluKHNjb3JlLCAxMDApO1xyXG59XHJcblxyXG4vKipcclxuICogR2V0IFNUSUcgZGF0YWJhc2Ugc3RhdHVzIGFuZCB1cGRhdGUgaW5mb3JtYXRpb25cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRTdGlnRGF0YWJhc2VTdGF0dXMoKSB7XHJcbiAgY29uc3QgdG90YWxGYW1pbGllcyA9IFNUSUdfRkFNSUxJRVMubGVuZ3RoO1xyXG4gIGNvbnN0IHZhbGlkYXRlZEZhbWlsaWVzID0gU1RJR19GQU1JTElFUy5maWx0ZXIoZmFtaWx5ID0+IGZhbWlseS52YWxpZGF0ZWQpLmxlbmd0aDtcclxuICBcclxuICAvLyBDaGVjayBpZiBhbnkgZmFtaWxpZXMgbmVlZCB1cGRhdGVzIChvbGRlciB0aGFuIDYgbW9udGhzKVxyXG4gIGNvbnN0IHNpeE1vbnRoc0FnbyA9IG5ldyBEYXRlKCk7XHJcbiAgc2l4TW9udGhzQWdvLnNldE1vbnRoKHNpeE1vbnRoc0Fnby5nZXRNb250aCgpIC0gNik7XHJcbiAgXHJcbiAgY29uc3Qgb3V0ZGF0ZWRGYW1pbGllcyA9IFNUSUdfRkFNSUxJRVMuZmlsdGVyKGZhbWlseSA9PiB7XHJcbiAgICBjb25zdCByZWxlYXNlRGF0ZSA9IG5ldyBEYXRlKGZhbWlseS5yZWxlYXNlRGF0ZSk7XHJcbiAgICByZXR1cm4gcmVsZWFzZURhdGUgPCBzaXhNb250aHNBZ28gJiYgIWZhbWlseS52YWxpZGF0ZWQ7XHJcbiAgfSk7XHJcblxyXG4gIC8vIENoZWNrIGlmIHJldmlldyBpcyBvdmVyZHVlXHJcbiAgY29uc3QgbmV4dFJldmlld0RhdGUgPSBuZXcgRGF0ZShTVElHX0RBVEFCQVNFX01FVEFEQVRBLm5leHRSZXZpZXdEdWUpO1xyXG4gIGNvbnN0IGlzUmV2aWV3T3ZlcmR1ZSA9IG5ldyBEYXRlKCkgPiBuZXh0UmV2aWV3RGF0ZTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIC4uLlNUSUdfREFUQUJBU0VfTUVUQURBVEEsXHJcbiAgICB0b3RhbFN0aWdGYW1pbGllczogdG90YWxGYW1pbGllcyxcclxuICAgIHZhbGlkYXRlZEZhbWlsaWVzOiB2YWxpZGF0ZWRGYW1pbGllcyxcclxuICAgIHZhbGlkYXRpb25QZXJjZW50YWdlOiBNYXRoLnJvdW5kKCh2YWxpZGF0ZWRGYW1pbGllcyAvIHRvdGFsRmFtaWxpZXMpICogMTAwKSxcclxuICAgIG91dGRhdGVkRmFtaWxpZXM6IG91dGRhdGVkRmFtaWxpZXMubGVuZ3RoLFxyXG4gICAgaXNSZXZpZXdPdmVyZHVlLFxyXG4gICAgZGF5c1VudGlsUmV2aWV3OiBNYXRoLmNlaWwoKG5leHRSZXZpZXdEYXRlLmdldFRpbWUoKSAtIG5ldyBEYXRlKCkuZ2V0VGltZSgpKSAvICgxMDAwICogNjAgKiA2MCAqIDI0KSksXHJcbiAgICBoZWFsdGhTY29yZTogY2FsY3VsYXRlRGF0YWJhc2VIZWFsdGhTY29yZSh2YWxpZGF0ZWRGYW1pbGllcywgdG90YWxGYW1pbGllcywgb3V0ZGF0ZWRGYW1pbGllcy5sZW5ndGgsIGlzUmV2aWV3T3ZlcmR1ZSlcclxuICB9O1xyXG59XHJcblxyXG4vKipcclxuICogQ2FsY3VsYXRlIGEgaGVhbHRoIHNjb3JlIGZvciB0aGUgU1RJRyBkYXRhYmFzZSAoMC0xMDApXHJcbiAqL1xyXG5mdW5jdGlvbiBjYWxjdWxhdGVEYXRhYmFzZUhlYWx0aFNjb3JlKHZhbGlkYXRlZDogbnVtYmVyLCB0b3RhbDogbnVtYmVyLCBvdXRkYXRlZDogbnVtYmVyLCBvdmVyZHVlOiBib29sZWFuKTogbnVtYmVyIHtcclxuICBsZXQgc2NvcmUgPSAxMDA7XHJcbiAgXHJcbiAgLy8gRGVkdWN0IHBvaW50cyBmb3IgdW52YWxpZGF0ZWQgZmFtaWxpZXNcclxuICBjb25zdCB2YWxpZGF0aW9uU2NvcmUgPSAodmFsaWRhdGVkIC8gdG90YWwpICogNDA7XHJcbiAgc2NvcmUgPSAoc2NvcmUgLSA0MCkgKyB2YWxpZGF0aW9uU2NvcmU7XHJcbiAgXHJcbiAgLy8gRGVkdWN0IHBvaW50cyBmb3Igb3V0ZGF0ZWQgZmFtaWxpZXNcclxuICBjb25zdCBvdXRkYXRlZFBlbmFsdHkgPSAob3V0ZGF0ZWQgLyB0b3RhbCkgKiAzMDtcclxuICBzY29yZSAtPSBvdXRkYXRlZFBlbmFsdHk7XHJcbiAgXHJcbiAgLy8gRGVkdWN0IHBvaW50cyBpZiByZXZpZXcgaXMgb3ZlcmR1ZVxyXG4gIGlmIChvdmVyZHVlKSB7XHJcbiAgICBzY29yZSAtPSAyMDtcclxuICB9XHJcbiAgXHJcbiAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgucm91bmQoc2NvcmUpKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldCBlc3RpbWF0ZWQgaW1wbGVtZW50YXRpb24gZWZmb3J0IGZvciByZWNvbW1lbmRlZCBTVElHIGZhbWlsaWVzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW1wbGVtZW50YXRpb25FZmZvcnQocmVjb21tZW5kYXRpb25zOiBTdGlnRmFtaWx5UmVjb21tZW5kYXRpb25bXSkge1xyXG4gIGNvbnN0IHRvdGFsUmVxdWlyZW1lbnRzID0gcmVjb21tZW5kYXRpb25zLnJlZHVjZSgoc3VtLCByZWMpID0+IFxyXG4gICAgc3VtICsgcmVjLnN0aWdGYW1pbHkuYWN0dWFsUmVxdWlyZW1lbnRzLCAwKTtcclxuICBcclxuICBjb25zdCBjcml0aWNhbENvdW50ID0gcmVjb21tZW5kYXRpb25zLmZpbHRlcihyID0+IHIuaW1wbGVtZW50YXRpb25Qcmlvcml0eSA9PT0gJ0NyaXRpY2FsJykubGVuZ3RoO1xyXG4gIGNvbnN0IGhpZ2hDb3VudCA9IHJlY29tbWVuZGF0aW9ucy5maWx0ZXIociA9PiByLmltcGxlbWVudGF0aW9uUHJpb3JpdHkgPT09ICdIaWdoJykubGVuZ3RoO1xyXG4gIGNvbnN0IG1lZGl1bUNvdW50ID0gcmVjb21tZW5kYXRpb25zLmZpbHRlcihyID0+IHIuaW1wbGVtZW50YXRpb25Qcmlvcml0eSA9PT0gJ01lZGl1bScpLmxlbmd0aDtcclxuICBcclxuICAvLyBFc3RpbWF0aW9uOiAxLjUgaG91cnMgcGVyIHJlcXVpcmVtZW50IG9uIGF2ZXJhZ2UgKGluY2x1ZGVzIGRvY3VtZW50YXRpb24sIHRlc3RpbmcsIHJldmlldylcclxuICBjb25zdCBlc3RpbWF0ZWRIb3VycyA9IHRvdGFsUmVxdWlyZW1lbnRzICogMS41O1xyXG4gIGNvbnN0IGVzdGltYXRlZERheXMgPSBNYXRoLmNlaWwoZXN0aW1hdGVkSG91cnMgLyA4KTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIHRvdGFsUmVxdWlyZW1lbnRzLFxyXG4gICAgZXN0aW1hdGVkSG91cnM6IE1hdGgucm91bmQoZXN0aW1hdGVkSG91cnMpLFxyXG4gICAgZXN0aW1hdGVkRGF5cyxcclxuICAgIHByaW9yaXR5Q291bnRzOiB7XHJcbiAgICAgIGNyaXRpY2FsOiBjcml0aWNhbENvdW50LFxyXG4gICAgICBoaWdoOiBoaWdoQ291bnQsXHJcbiAgICAgIG1lZGl1bTogbWVkaXVtQ291bnQsXHJcbiAgICAgIGxvdzogcmVjb21tZW5kYXRpb25zLmxlbmd0aCAtIGNyaXRpY2FsQ291bnQgLSBoaWdoQ291bnQgLSBtZWRpdW1Db3VudFxyXG4gICAgfVxyXG4gIH07XHJcbn1cclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gT1BUSU9OIDQ6IEFVVE9NQVRFRCBTVElHIFVQREFURSBDSEVDS0lOR1xyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFN0aWdVcGRhdGVDaGVjayB7XHJcbiAgc3RpZ0lkOiBzdHJpbmc7XHJcbiAgY3VycmVudFZlcnNpb246IHN0cmluZztcclxuICBsYXRlc3RWZXJzaW9uPzogc3RyaW5nO1xyXG4gIGN1cnJlbnRSZWxlYXNlRGF0ZTogc3RyaW5nO1xyXG4gIGxhdGVzdFJlbGVhc2VEYXRlPzogc3RyaW5nO1xyXG4gIHVwZGF0ZUF2YWlsYWJsZTogYm9vbGVhbjtcclxuICBzZXZlcml0eTogJ2xvdycgfCAnbWVkaXVtJyB8ICdoaWdoJyB8ICdjcml0aWNhbCc7XHJcbiAgbGFzdENoZWNrZWQ6IHN0cmluZztcclxuICBzb3VyY2U6IHN0cmluZztcclxuICB1cGRhdGVOb3Rlcz86IHN0cmluZztcclxuICBhY3R1YWxSZXF1aXJlbWVudHM/OiBudW1iZXI7IC8vIE5ldyByZXF1aXJlbWVudCBjb3VudCBpZiBhdmFpbGFibGVcclxuICByZXF1aXJlbWVudENvdW50Q2hhbmdlPzogbnVtYmVyOyAvLyBEaWZmZXJlbmNlIGluIHJlcXVpcmVtZW50c1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEF1dG9VcGRhdGVDb25maWcge1xyXG4gIGVuYWJsZWQ6IGJvb2xlYW47XHJcbiAgY2hlY2tGcmVxdWVuY3k6ICdkYWlseScgfCAnd2Vla2x5JyB8ICdtb250aGx5JztcclxuICBsYXN0Q2hlY2s6IHN0cmluZztcclxuICBzb3VyY2VzOiB7XHJcbiAgICBkaXNhUnNzOiBib29sZWFuO1xyXG4gICAgc3RpZ1ZpZXdlcjogYm9vbGVhbjtcclxuICAgIG1hbnVhbDogYm9vbGVhbjtcclxuICB9O1xyXG4gIG5vdGlmaWNhdGlvbnM6IHtcclxuICAgIGVtYWlsOiBib29sZWFuO1xyXG4gICAgaW5BcHA6IGJvb2xlYW47XHJcbiAgICB3ZWJob29rPzogc3RyaW5nO1xyXG4gIH07XHJcbiAgYXV0b1VwZGF0ZVByZWZlcmVuY2VzOiB7XHJcbiAgICBjcml0aWNhbE9ubHk6IGJvb2xlYW47XHJcbiAgICByZXF1aXJlTWFudWFsQXBwcm92YWw6IGJvb2xlYW47XHJcbiAgICBiYWNrdXBCZWZvcmVVcGRhdGU6IGJvb2xlYW47XHJcbiAgICBhdXRvQXBwbHk6IGJvb2xlYW47IC8vIE5FVzogQXV0b21hdGljYWxseSBhcHBseSB1cGRhdGVzIGZyb20gb2ZmaWNpYWwgc291cmNlcyB3aXRob3V0IG1hbnVhbCB2YWxpZGF0aW9uXHJcbiAgfTtcclxufVxyXG5cclxuLy8gRGVmYXVsdCBjb25maWd1cmF0aW9uXHJcbmV4cG9ydCBjb25zdCBBVVRPX1VQREFURV9DT05GSUc6IEF1dG9VcGRhdGVDb25maWcgPSB7XHJcbiAgZW5hYmxlZDogdHJ1ZSwgLy8gRW5hYmxlIGF1dG9tYXRpYyB1cGRhdGVzIGZyb20gb2ZmaWNpYWwgRElTQSBzb3VyY2VzXHJcbiAgY2hlY2tGcmVxdWVuY3k6ICd3ZWVrbHknLFxyXG4gIGxhc3RDaGVjazogJzIwMjUtMTAtMDInLFxyXG4gIHNvdXJjZXM6IHtcclxuICAgIGRpc2FSc3M6IHRydWUsXHJcbiAgICBzdGlnVmlld2VyOiB0cnVlLFxyXG4gICAgbWFudWFsOiBmYWxzZVxyXG4gIH0sXHJcbiAgbm90aWZpY2F0aW9uczoge1xyXG4gICAgZW1haWw6IGZhbHNlLFxyXG4gICAgaW5BcHA6IHRydWVcclxuICB9LFxyXG4gIGF1dG9VcGRhdGVQcmVmZXJlbmNlczoge1xyXG4gICAgY3JpdGljYWxPbmx5OiBmYWxzZSwgLy8gQXBwbHkgYWxsIHVwZGF0ZXMsIG5vdCBqdXN0IGNyaXRpY2FsXHJcbiAgICByZXF1aXJlTWFudWFsQXBwcm92YWw6IGZhbHNlLCAvLyBBdXRvbWF0aWNhbGx5IGFwcGx5IHVwZGF0ZXMgZnJvbSB0cnVzdGVkIHNvdXJjZXNcclxuICAgIGJhY2t1cEJlZm9yZVVwZGF0ZTogdHJ1ZSwgLy8gQWx3YXlzIGJhY2t1cCBiZWZvcmUgYXBwbHlpbmdcclxuICAgIGF1dG9BcHBseTogdHJ1ZSAvLyBORVc6IEF1dG9tYXRpY2FsbHkgYXBwbHkgdXBkYXRlcyB3aXRob3V0IHVzZXIgaW50ZXJ2ZW50aW9uXHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGZvciBTVElHIHVwZGF0ZXMgYXV0b21hdGljYWxseVxyXG4gKiBUaGlzIGZ1bmN0aW9uIGNhbiBiZSBjYWxsZWQgcGVyaW9kaWNhbGx5IHRvIGNoZWNrIGZvciBuZXcgU1RJRyByZWxlYXNlc1xyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNoZWNrRm9yU3RpZ1VwZGF0ZXMoKTogUHJvbWlzZTxTdGlnVXBkYXRlQ2hlY2tbXT4ge1xyXG4gIGNvbnN0IHVwZGF0ZXM6IFN0aWdVcGRhdGVDaGVja1tdID0gW107XHJcbiAgY29uc3Qgbm93ID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF07XHJcblxyXG4gIHRyeSB7XHJcbiAgICAvLyBDaGVjayBESVNBIFJTUyBGZWVkIGZvciB1cGRhdGVzXHJcbiAgICBpZiAoQVVUT19VUERBVEVfQ09ORklHLnNvdXJjZXMuZGlzYVJzcykge1xyXG4gICAgICBjb25zdCByc3NVcGRhdGVzID0gYXdhaXQgY2hlY2tEaXNhUnNzRmVlZCgpO1xyXG4gICAgICB1cGRhdGVzLnB1c2goLi4ucnNzVXBkYXRlcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2hlY2sgU1RJRyBWaWV3ZXIgZm9yIHZlcnNpb24gY2hhbmdlc1xyXG4gICAgaWYgKEFVVE9fVVBEQVRFX0NPTkZJRy5zb3VyY2VzLnN0aWdWaWV3ZXIpIHtcclxuICAgICAgY29uc3Qgc3RpZ1ZpZXdlclVwZGF0ZXMgPSBhd2FpdCBjaGVja1N0aWdWaWV3ZXJVcGRhdGVzKCk7XHJcbiAgICAgIHVwZGF0ZXMucHVzaCguLi5zdGlnVmlld2VyVXBkYXRlcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVXBkYXRlIGxhc3QgY2hlY2sgdGltZVxyXG4gICAgQVVUT19VUERBVEVfQ09ORklHLmxhc3RDaGVjayA9IG5vdztcclxuXHJcbiAgICByZXR1cm4gdXBkYXRlcztcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgY2hlY2tpbmcgZm9yIFNUSUcgdXBkYXRlczonLCBlcnJvcik7XHJcbiAgICByZXR1cm4gW107XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogQ2hlY2sgRElTQSBSU1MgRmVlZCBmb3IgbmV3IFNUSUcgcmVsZWFzZXNcclxuICogVGhpcyBub3cgYWN0dWFsbHkgZmV0Y2hlcyBmcm9tIERJU0EgQ3liZXIgRXhjaGFuZ2VcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGNoZWNrRGlzYVJzc0ZlZWQoKTogUHJvbWlzZTxTdGlnVXBkYXRlQ2hlY2tbXT4ge1xyXG4gIGNvbnN0IHVwZGF0ZXM6IFN0aWdVcGRhdGVDaGVja1tdID0gW107XHJcbiAgXHJcbiAgdHJ5IHtcclxuICAgIGNvbnNvbGUubG9nKCfwn5SNIENoZWNraW5nIERJU0EgUlNTIGZlZWQgZm9yIHVwZGF0ZXMuLi4nKTtcclxuICAgIFxyXG4gICAgLy8gRGV0ZXJtaW5lIGlmIHdlJ3JlIGluIGJyb3dzZXIgb3Igc2VydmVyIGNvbnRleHRcclxuICAgIGNvbnN0IGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xyXG4gICAgXHJcbiAgICBsZXQgcmVzcG9uc2U6IFJlc3BvbnNlO1xyXG4gICAgbGV0IGRhdGE6IGFueTtcclxuICAgIFxyXG4gICAgaWYgKGlzQnJvd3Nlcikge1xyXG4gICAgICAvLyBCcm93c2VyOiB1c2Ugb3VyIEFQSSBwcm94eSB0byBhdm9pZCBDT1JTXHJcbiAgICAgIHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvZmV0Y2gtZGlzYS1yc3MnKTtcclxuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICAgIGNvbnNvbGUud2Fybign4pqg77iPIERJU0EgUlNTIGZlZWQgdW5hdmFpbGFibGUsIGZhbGxpbmcgYmFjayB0byBkYXRlLWJhc2VkIGNoZWNrcycpO1xyXG4gICAgICAgIHJldHVybiBjaGVja0J5RGF0ZU9ubHkoKTtcclxuICAgICAgfVxyXG4gICAgICBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gU2VydmVyOiBmZXRjaCBkaXJlY3RseSBmcm9tIERJU0EgKG5vIENPUlMgaXNzdWVzIHNlcnZlci1zaWRlKVxyXG4gICAgICBjb25zb2xlLmxvZygn8J+MkCBGZXRjaGluZyBkaXJlY3RseSBmcm9tIERJU0EgKHNlcnZlci1zaWRlKS4uLicpO1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJ2h0dHBzOi8vcHVibGljLmN5YmVyLm1pbC9zdGlncy9yc3MvJywge1xyXG4gICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAnVXNlci1BZ2VudCc6ICdTUlRNLVRvb2wvMy4wJ1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgICAgIGNvbnNvbGUud2Fybign4pqg77iPIERJU0EgUlNTIGZlZWQgdW5hdmFpbGFibGUsIGZhbGxpbmcgYmFjayB0byBkYXRlLWJhc2VkIGNoZWNrcycpO1xyXG4gICAgICAgICAgcmV0dXJuIGNoZWNrQnlEYXRlT25seSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBjb25zdCB4bWxUZXh0ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFBhcnNlIFJTUyBYTUwgKHNpbXBsZSByZWdleC1iYXNlZCBwYXJzaW5nKVxyXG4gICAgICAgIGNvbnN0IGl0ZW1zOiBhbnlbXSA9IFtdO1xyXG4gICAgICAgIGNvbnN0IGl0ZW1SZWdleCA9IC88aXRlbT4oLio/KTxcXC9pdGVtPi9ncztcclxuICAgICAgICBjb25zdCBtYXRjaGVzID0geG1sVGV4dC5tYXRjaEFsbChpdGVtUmVnZXgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGZvciAoY29uc3QgbWF0Y2ggb2YgbWF0Y2hlcykge1xyXG4gICAgICAgICAgY29uc3QgaXRlbUNvbnRlbnQgPSBtYXRjaFsxXTtcclxuICAgICAgICAgIGNvbnN0IHRpdGxlID0gaXRlbUNvbnRlbnQubWF0Y2goLzx0aXRsZT4oLio/KTxcXC90aXRsZT4vKT8uWzFdIHx8ICcnO1xyXG4gICAgICAgICAgY29uc3QgbGluayA9IGl0ZW1Db250ZW50Lm1hdGNoKC88bGluaz4oLio/KTxcXC9saW5rPi8pPy5bMV0gfHwgJyc7XHJcbiAgICAgICAgICBjb25zdCBwdWJEYXRlID0gaXRlbUNvbnRlbnQubWF0Y2goLzxwdWJEYXRlPiguKj8pPFxcL3B1YkRhdGU+Lyk/LlsxXSB8fCAnJztcclxuICAgICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gaXRlbUNvbnRlbnQubWF0Y2goLzxkZXNjcmlwdGlvbj4oLio/KTxcXC9kZXNjcmlwdGlvbj4vKT8uWzFdIHx8ICcnO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBpdGVtcy5wdXNoKHsgdGl0bGUsIGxpbmssIHB1YkRhdGUsIGRlc2NyaXB0aW9uIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBkYXRhID0geyBzdWNjZXNzOiB0cnVlLCBpdGVtcywgcmVsZWFzZXM6IGl0ZW1zIH07XHJcbiAgICAgICAgY29uc29sZS5sb2coYOKchSBGZXRjaGVkICR7aXRlbXMubGVuZ3RofSBpdGVtcyBmcm9tIERJU0EgUlNTYCk7XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIGZldGNoaW5nIGZyb20gRElTQSBkaXJlY3RseTonLCBlcnJvcik7XHJcbiAgICAgICAgcmV0dXJuIGNoZWNrQnlEYXRlT25seSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmIChkYXRhLnN1Y2Nlc3MgJiYgZGF0YS5yZWxlYXNlcykge1xyXG4gICAgICAvLyBQYXJzZSBSU1MgZGF0YSBhbmQgY29tcGFyZSB3aXRoIG91ciBTVElHIGZhbWlsaWVzXHJcbiAgICAgIGZvciAoY29uc3QgZmFtaWx5IG9mIFNUSUdfRkFNSUxJRVMpIHtcclxuICAgICAgICAvLyBMb29rIGZvciBtYXRjaGluZyBTVElHIGluIHRoZSBSU1MgZmVlZFxyXG4gICAgICAgIGNvbnN0IG1hdGNoID0gZGF0YS5yZWxlYXNlcy5maW5kKChyZWxlYXNlOiBhbnkpID0+IFxyXG4gICAgICAgICAgcmVsZWFzZS5uYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoZmFtaWx5Lm5hbWUudG9Mb3dlckNhc2UoKS5zcGxpdCgnICcpWzBdKSB8fFxyXG4gICAgICAgICAgcmVsZWFzZS5zdGlnSWQgPT09IGZhbWlseS5zdGlnSWRcclxuICAgICAgICApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChtYXRjaCkge1xyXG4gICAgICAgICAgY29uc3QgbG9jYWxEYXRlID0gbmV3IERhdGUoZmFtaWx5LnJlbGVhc2VEYXRlKTtcclxuICAgICAgICAgIGNvbnN0IHJlbW90ZURhdGUgPSBuZXcgRGF0ZShtYXRjaC5yZWxlYXNlRGF0ZSk7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGlmIChyZW1vdGVEYXRlID4gbG9jYWxEYXRlKSB7XHJcbiAgICAgICAgICAgIHVwZGF0ZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgc3RpZ0lkOiBmYW1pbHkuaWQsXHJcbiAgICAgICAgICAgICAgY3VycmVudFZlcnNpb246IGZhbWlseS52ZXJzaW9uLFxyXG4gICAgICAgICAgICAgIGxhdGVzdFZlcnNpb246IG1hdGNoLnZlcnNpb24gfHwgJ1Vua25vd24nLFxyXG4gICAgICAgICAgICAgIGN1cnJlbnRSZWxlYXNlRGF0ZTogZmFtaWx5LnJlbGVhc2VEYXRlLFxyXG4gICAgICAgICAgICAgIGxhdGVzdFJlbGVhc2VEYXRlOiBtYXRjaC5yZWxlYXNlRGF0ZSxcclxuICAgICAgICAgICAgICB1cGRhdGVBdmFpbGFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgc2V2ZXJpdHk6IGRldGVybWluZVNldmVyaXR5KGZhbWlseSwgbG9jYWxEYXRlLCByZW1vdGVEYXRlKSxcclxuICAgICAgICAgICAgICBsYXN0Q2hlY2tlZDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF0sXHJcbiAgICAgICAgICAgICAgc291cmNlOiAnRElTQSBSU1MnLFxyXG4gICAgICAgICAgICAgIHVwZGF0ZU5vdGVzOiBgTmV3IHZlcnNpb24gYXZhaWxhYmxlOiAke21hdGNoLnZlcnNpb24gfHwgJ1Vua25vd24nfSAoUmVsZWFzZWQ6ICR7bWF0Y2gucmVsZWFzZURhdGV9KWBcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNvbnNvbGUubG9nKGDinIUgRm91bmQgJHt1cGRhdGVzLmxlbmd0aH0gdXBkYXRlcyBmcm9tIERJU0EgUlNTYCk7XHJcblxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3IgY2hlY2tpbmcgRElTQSBSU1MgZmVlZDonLCBlcnJvcik7XHJcbiAgICAvLyBGYWxsYmFjayB0byBkYXRlLWJhc2VkIGNoZWNraW5nXHJcbiAgICByZXR1cm4gY2hlY2tCeURhdGVPbmx5KCk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdXBkYXRlcztcclxufVxyXG5cclxuLyoqXHJcbiAqIEZhbGxiYWNrOiBDaGVjayBieSBkYXRlIG9ubHkgaWYgUlNTIGlzIHVuYXZhaWxhYmxlXHJcbiAqL1xyXG5mdW5jdGlvbiBjaGVja0J5RGF0ZU9ubHkoKTogU3RpZ1VwZGF0ZUNoZWNrW10ge1xyXG4gIGNvbnN0IHVwZGF0ZXM6IFN0aWdVcGRhdGVDaGVja1tdID0gW107XHJcbiAgY29uc3Qgc2l4TW9udGhzQWdvID0gbmV3IERhdGUoKTtcclxuICBzaXhNb250aHNBZ28uc2V0TW9udGgoc2l4TW9udGhzQWdvLmdldE1vbnRoKCkgLSA2KTtcclxuICBcclxuICBmb3IgKGNvbnN0IGZhbWlseSBvZiBTVElHX0ZBTUlMSUVTKSB7XHJcbiAgICBjb25zdCByZWxlYXNlRGF0ZSA9IG5ldyBEYXRlKGZhbWlseS5yZWxlYXNlRGF0ZSk7XHJcbiAgICBpZiAocmVsZWFzZURhdGUgPCBzaXhNb250aHNBZ28gJiYgIWZhbWlseS52YWxpZGF0ZWQpIHtcclxuICAgICAgdXBkYXRlcy5wdXNoKHtcclxuICAgICAgICBzdGlnSWQ6IGZhbWlseS5pZCxcclxuICAgICAgICBjdXJyZW50VmVyc2lvbjogZmFtaWx5LnZlcnNpb24sXHJcbiAgICAgICAgY3VycmVudFJlbGVhc2VEYXRlOiBmYW1pbHkucmVsZWFzZURhdGUsXHJcbiAgICAgICAgdXBkYXRlQXZhaWxhYmxlOiB0cnVlLFxyXG4gICAgICAgIHNldmVyaXR5OiAnbWVkaXVtJyxcclxuICAgICAgICBsYXN0Q2hlY2tlZDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF0sXHJcbiAgICAgICAgc291cmNlOiAnRGF0ZSBDaGVjaycsXHJcbiAgICAgICAgdXBkYXRlTm90ZXM6ICdTVElHIGlzIG9sZGVyIHRoYW4gNiBtb250aHMgLSBjaGVjayBESVNBIGZvciB1cGRhdGVzJ1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHVwZGF0ZXM7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEZXRlcm1pbmUgdXBkYXRlIHNldmVyaXR5IGJhc2VkIG9uIGFnZSBhbmQgdHlwZVxyXG4gKi9cclxuZnVuY3Rpb24gZGV0ZXJtaW5lU2V2ZXJpdHkoXHJcbiAgZmFtaWx5OiBTdGlnRmFtaWx5LCBcclxuICBsb2NhbERhdGU6IERhdGUsIFxyXG4gIHJlbW90ZURhdGU6IERhdGVcclxuKTogJ2xvdycgfCAnbWVkaXVtJyB8ICdoaWdoJyB8ICdjcml0aWNhbCcge1xyXG4gIGNvbnN0IG1vbnRoc0RpZmYgPSAocmVtb3RlRGF0ZS5nZXRUaW1lKCkgLSBsb2NhbERhdGUuZ2V0VGltZSgpKSAvICgxMDAwICogNjAgKiA2MCAqIDI0ICogMzApO1xyXG4gIFxyXG4gIC8vIENyaXRpY2FsOiBTZWN1cml0eS1mb2N1c2VkIFNUSUdzIHdpdGggbWFqb3IgdmVyc2lvbiBkaWZmZXJlbmNlc1xyXG4gIGlmIChmYW1pbHkucHJpb3JpdHkgPT09ICdIaWdoJyAmJiBtb250aHNEaWZmID4gNikgcmV0dXJuICdjcml0aWNhbCc7XHJcbiAgXHJcbiAgLy8gSGlnaDogSGlnaC1wcmlvcml0eSBTVElHcyBvciBzaWduaWZpY2FudCB0aW1lIGRpZmZlcmVuY2VcclxuICBpZiAoZmFtaWx5LnByaW9yaXR5ID09PSAnSGlnaCcgfHwgbW9udGhzRGlmZiA+IDQpIHJldHVybiAnaGlnaCc7XHJcbiAgXHJcbiAgLy8gTWVkaXVtOiBNb2RlcmF0ZSBwcmlvcml0eSBvciB0aW1lIGRpZmZlcmVuY2VcclxuICBpZiAobW9udGhzRGlmZiA+IDIpIHJldHVybiAnbWVkaXVtJztcclxuICBcclxuICByZXR1cm4gJ2xvdyc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDaGVjayBTVElHIFZpZXdlciBmb3IgdmVyc2lvbiB1cGRhdGVzXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBjaGVja1N0aWdWaWV3ZXJVcGRhdGVzKCk6IFByb21pc2U8U3RpZ1VwZGF0ZUNoZWNrW10+IHtcclxuICBjb25zdCB1cGRhdGVzOiBTdGlnVXBkYXRlQ2hlY2tbXSA9IFtdO1xyXG4gIFxyXG4gIHRyeSB7XHJcbiAgICBjb25zb2xlLmxvZygnQ2hlY2tpbmcgU1RJRyBWaWV3ZXIgZm9yIHVwZGF0ZXMuLi4nKTtcclxuICAgIFxyXG4gICAgLy8gUGxhY2Vob2xkZXIgZm9yIFNUSUcgVmlld2VyIEFQSSBjYWxsc1xyXG4gICAgLy8gSW4gcHJvZHVjdGlvbiwgdGhpcyB3b3VsZDpcclxuICAgIC8vIDEuIFF1ZXJ5IHN0aWd2aWV3ZXIuY29tIEFQSSAoaWYgYXZhaWxhYmxlKSBvciBzY3JhcGUgZGF0YVxyXG4gICAgLy8gMi4gQ29tcGFyZSB2ZXJzaW9ucyB3aXRoIGN1cnJlbnQgZGF0YVxyXG4gICAgLy8gMy4gSWRlbnRpZnkgb3V0ZGF0ZWQgU1RJR3NcclxuICAgIFxyXG4gICAgLy8gRm9yIG5vdywgY2hlY2sgZm9yIFNUSUdzIG9sZGVyIHRoYW4gNiBtb250aHNcclxuICAgIGNvbnN0IHNpeE1vbnRoc0FnbyA9IG5ldyBEYXRlKCk7XHJcbiAgICBzaXhNb250aHNBZ28uc2V0TW9udGgoc2l4TW9udGhzQWdvLmdldE1vbnRoKCkgLSA2KTtcclxuICAgIFxyXG4gICAgZm9yIChjb25zdCBmYW1pbHkgb2YgU1RJR19GQU1JTElFUykge1xyXG4gICAgICBjb25zdCByZWxlYXNlRGF0ZSA9IG5ldyBEYXRlKGZhbWlseS5yZWxlYXNlRGF0ZSk7XHJcbiAgICAgIGlmIChyZWxlYXNlRGF0ZSA8IHNpeE1vbnRoc0FnbyAmJiAhZmFtaWx5LnZhbGlkYXRlZCkge1xyXG4gICAgICAgIHVwZGF0ZXMucHVzaCh7XHJcbiAgICAgICAgICBzdGlnSWQ6IGZhbWlseS5pZCxcclxuICAgICAgICAgIGN1cnJlbnRWZXJzaW9uOiBmYW1pbHkudmVyc2lvbixcclxuICAgICAgICAgIGN1cnJlbnRSZWxlYXNlRGF0ZTogZmFtaWx5LnJlbGVhc2VEYXRlLFxyXG4gICAgICAgICAgdXBkYXRlQXZhaWxhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgc2V2ZXJpdHk6ICdtZWRpdW0nLFxyXG4gICAgICAgICAgbGFzdENoZWNrZWQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdLFxyXG4gICAgICAgICAgc291cmNlOiAnU1RJRyBWaWV3ZXInLFxyXG4gICAgICAgICAgdXBkYXRlTm90ZXM6ICdTVElHIGlzIG9sZGVyIHRoYW4gNiBtb250aHMgLSBjaGVjayBmb3IgbmV3ZXIgdmVyc2lvbidcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgY2hlY2tpbmcgU1RJRyBWaWV3ZXI6JywgZXJyb3IpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHVwZGF0ZXM7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXQgcGVuZGluZyB1cGRhdGVzIHRoYXQgbmVlZCBhdHRlbnRpb25cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRQZW5kaW5nVXBkYXRlcygpOiBTdGlnVXBkYXRlQ2hlY2tbXSB7XHJcbiAgLy8gSW4gYSByZWFsIGltcGxlbWVudGF0aW9uLCB0aGlzIHdvdWxkIHJldHVybiBjYWNoZWQgdXBkYXRlIHJlc3VsdHNcclxuICAvLyBGb3Igbm93LCByZXR1cm4gYSBzaW11bGF0ZWQgbGlzdFxyXG4gIHJldHVybiBbXHJcbiAgICB7XHJcbiAgICAgIHN0aWdJZDogJ2FwcGxpY2F0aW9uLXNlY3VyaXR5LWRldicsXHJcbiAgICAgIGN1cnJlbnRWZXJzaW9uOiAnVjYnLFxyXG4gICAgICBsYXRlc3RWZXJzaW9uOiAnVjcnLFxyXG4gICAgICBjdXJyZW50UmVsZWFzZURhdGU6ICcyMDI1LTAyLTEyJyxcclxuICAgICAgbGF0ZXN0UmVsZWFzZURhdGU6ICcyMDI1LTA5LTE1JyxcclxuICAgICAgdXBkYXRlQXZhaWxhYmxlOiB0cnVlLFxyXG4gICAgICBzZXZlcml0eTogJ2hpZ2gnLFxyXG4gICAgICBsYXN0Q2hlY2tlZDogJzIwMjUtMTAtMDInLFxyXG4gICAgICBzb3VyY2U6ICdESVNBIFJTUycsXHJcbiAgICAgIHVwZGF0ZU5vdGVzOiAnTmV3IHZlcnNpb24gYXZhaWxhYmxlIHdpdGggc2VjdXJpdHkgZW5oYW5jZW1lbnRzJ1xyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgc3RpZ0lkOiAnd2ViLXNlcnZlci1zcmcnLFxyXG4gICAgICBjdXJyZW50VmVyc2lvbjogJ1Y0JyxcclxuICAgICAgY3VycmVudFJlbGVhc2VEYXRlOiAnMjAyNS0wMi0xMicsXHJcbiAgICAgIHVwZGF0ZUF2YWlsYWJsZTogdHJ1ZSxcclxuICAgICAgc2V2ZXJpdHk6ICdtZWRpdW0nLFxyXG4gICAgICBsYXN0Q2hlY2tlZDogJzIwMjUtMTAtMDInLFxyXG4gICAgICBzb3VyY2U6ICdTVElHIFZpZXdlcicsXHJcbiAgICAgIHVwZGF0ZU5vdGVzOiAnVmVyc2lvbiB2YWxpZGF0aW9uIG5lZWRlZCBhZ2FpbnN0IG9mZmljaWFsIHNvdXJjZSdcclxuICAgIH1cclxuICBdO1xyXG59XHJcblxyXG4vKipcclxuICogRW5hYmxlIG9yIGRpc2FibGUgYXV0b21hdGljIHVwZGF0ZSBjaGVja2luZ1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNldEF1dG9VcGRhdGVFbmFibGVkKGVuYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcclxuICBBVVRPX1VQREFURV9DT05GSUcuZW5hYmxlZCA9IGVuYWJsZWQ7XHJcbiAgaWYgKGVuYWJsZWQpIHtcclxuICAgIGNvbnNvbGUubG9nKCfinIUgQXV0b21hdGljIFNUSUcgdXBkYXRlIGNoZWNraW5nIGVuYWJsZWQnKTtcclxuICAgIGNvbnNvbGUubG9nKGDwn5OFIENoZWNrIGZyZXF1ZW5jeTogJHtBVVRPX1VQREFURV9DT05GSUcuY2hlY2tGcmVxdWVuY3l9YCk7XHJcbiAgICBjb25zb2xlLmxvZyhg8J+UlCBOb3RpZmljYXRpb25zOiAke0FVVE9fVVBEQVRFX0NPTkZJRy5ub3RpZmljYXRpb25zLmluQXBwID8gJ0luLWFwcCcgOiAnRGlzYWJsZWQnfWApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zb2xlLmxvZygn4p2MIEF1dG9tYXRpYyBTVElHIHVwZGF0ZSBjaGVja2luZyBkaXNhYmxlZCcpO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFNpbXVsYXRlIHBlcmlvZGljIHVwZGF0ZSBjaGVjayAod291bGQgYmUgY2FsbGVkIGJ5IGEgc2NoZWR1bGVyKVxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHBlcmZvcm1TY2hlZHVsZWRVcGRhdGVDaGVjaygpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBpZiAoIUFVVE9fVVBEQVRFX0NPTkZJRy5lbmFibGVkKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBjb25zdCBsYXN0Q2hlY2sgPSBuZXcgRGF0ZShBVVRPX1VQREFURV9DT05GSUcubGFzdENoZWNrKTtcclxuICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xyXG4gIGNvbnN0IGRheXNTaW5jZUxhc3RDaGVjayA9IE1hdGguZmxvb3IoKG5vdy5nZXRUaW1lKCkgLSBsYXN0Q2hlY2suZ2V0VGltZSgpKSAvICgxMDAwICogNjAgKiA2MCAqIDI0KSk7XHJcblxyXG4gIGxldCBzaG91bGRDaGVjayA9IGZhbHNlO1xyXG4gIHN3aXRjaCAoQVVUT19VUERBVEVfQ09ORklHLmNoZWNrRnJlcXVlbmN5KSB7XHJcbiAgICBjYXNlICdkYWlseSc6XHJcbiAgICAgIHNob3VsZENoZWNrID0gZGF5c1NpbmNlTGFzdENoZWNrID49IDE7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAnd2Vla2x5JzpcclxuICAgICAgc2hvdWxkQ2hlY2sgPSBkYXlzU2luY2VMYXN0Q2hlY2sgPj0gNztcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlICdtb250aGx5JzpcclxuICAgICAgc2hvdWxkQ2hlY2sgPSBkYXlzU2luY2VMYXN0Q2hlY2sgPj0gMzA7XHJcbiAgICAgIGJyZWFrO1xyXG4gIH1cclxuXHJcbiAgaWYgKHNob3VsZENoZWNrKSB7XHJcbiAgICBjb25zb2xlLmxvZygn8J+UjSBQZXJmb3JtaW5nIHNjaGVkdWxlZCBTVElHIHVwZGF0ZSBjaGVjay4uLicpO1xyXG4gICAgY29uc3QgdXBkYXRlcyA9IGF3YWl0IGNoZWNrRm9yU3RpZ1VwZGF0ZXMoKTtcclxuICAgIFxyXG4gICAgaWYgKHVwZGF0ZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICBjb25zb2xlLmxvZyhg8J+TiyBGb3VuZCAke3VwZGF0ZXMubGVuZ3RofSBwb3RlbnRpYWwgdXBkYXRlc2ApO1xyXG4gICAgICBcclxuICAgICAgLy8gQXV0b21hdGljYWxseSBhcHBseSB1cGRhdGVzIGlmIGF1dG9BcHBseSBpcyBlbmFibGVkXHJcbiAgICAgIGlmIChBVVRPX1VQREFURV9DT05GSUcuYXV0b1VwZGF0ZVByZWZlcmVuY2VzLmF1dG9BcHBseSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCfwn6SWIEF1dG8tYXBwbHkgZW5hYmxlZCAtIGFwcGx5aW5nIHVwZGF0ZXMgYXV0b21hdGljYWxseS4uLicpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIEZpbHRlciB1cGRhdGVzIGlmIGNyaXRpY2FsT25seSBpcyBlbmFibGVkXHJcbiAgICAgICAgbGV0IHVwZGF0ZXNUb0FwcGx5ID0gdXBkYXRlcztcclxuICAgICAgICBpZiAoQVVUT19VUERBVEVfQ09ORklHLmF1dG9VcGRhdGVQcmVmZXJlbmNlcy5jcml0aWNhbE9ubHkpIHtcclxuICAgICAgICAgIHVwZGF0ZXNUb0FwcGx5ID0gdXBkYXRlcy5maWx0ZXIodSA9PiBcclxuICAgICAgICAgICAgdS5zZXZlcml0eSA9PT0gJ2NyaXRpY2FsJyB8fCB1LnNldmVyaXR5ID09PSAnaGlnaCdcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhg8J+TiyBGaWx0ZXJlZCB0byAke3VwZGF0ZXNUb0FwcGx5Lmxlbmd0aH0gY3JpdGljYWwvaGlnaCBwcmlvcml0eSB1cGRhdGVzYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICh1cGRhdGVzVG9BcHBseS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICBjb25zdCByZXN1bHRzID0gYXBwbHlNdWx0aXBsZVN0aWdVcGRhdGVzKHVwZGF0ZXNUb0FwcGx5KTtcclxuICAgICAgICAgIGNvbnN0IHN1Y2Nlc3NDb3VudCA9IHJlc3VsdHMuZmlsdGVyKHIgPT4gci5zdWNjZXNzKS5sZW5ndGg7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhg4pyFIEF1dG8tYXBwbGllZCAke3N1Y2Nlc3NDb3VudH0vJHtyZXN1bHRzLmxlbmd0aH0gdXBkYXRlc2ApO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAvLyBVcGRhdGUgdmFsaWRhdGlvbiBmbGFncyB0byB0cnVlIHNpbmNlIHRoZXNlIGNvbWUgZnJvbSBvZmZpY2lhbCBzb3VyY2VzXHJcbiAgICAgICAgICByZXN1bHRzLmZvckVhY2goKHIpID0+IHtcclxuICAgICAgICAgICAgaWYgKHIuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgIGNvbnN0IHN0aWdJbmRleCA9IFNUSUdfRkFNSUxJRVMuZmluZEluZGV4KHMgPT4gcy5pZCA9PT0gci5zdGlnSWQpO1xyXG4gICAgICAgICAgICAgIGlmIChzdGlnSW5kZXggIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBTVElHX0ZBTUlMSUVTW3N0aWdJbmRleF0udmFsaWRhdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGDinIUgQXV0by12YWxpZGF0ZWQgJHtyLnN0aWdJZH0gZnJvbSBvZmZpY2lhbCBESVNBIHNvdXJjZWApO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2UgaWYgKCFBVVRPX1VQREFURV9DT05GSUcuYXV0b1VwZGF0ZVByZWZlcmVuY2VzLnJlcXVpcmVNYW51YWxBcHByb3ZhbCkge1xyXG4gICAgICAgIC8vIExlZ2FjeSBiZWhhdmlvcjoganVzdCBub3RpZnlcclxuICAgICAgICBjb25zb2xlLmxvZygn4pqg77iPIE1hbnVhbCBhcHByb3ZhbCBkaXNhYmxlZCBidXQgYXV0b0FwcGx5IG5vdCBlbmFibGVkIC0gdXBkYXRlcyBwZW5kaW5nJyk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIFNlbmQgbm90aWZpY2F0aW9ucyBpZiBlbmFibGVkXHJcbiAgICAgIGlmIChBVVRPX1VQREFURV9DT05GSUcubm90aWZpY2F0aW9ucy5pbkFwcCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCfwn5SUIEluLWFwcCBub3RpZmljYXRpb246IFNUSUcgdXBkYXRlcyBhdmFpbGFibGUnKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYgKEFVVE9fVVBEQVRFX0NPTkZJRy5ub3RpZmljYXRpb25zLmVtYWlsKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ/Cfk6cgRW1haWwgbm90aWZpY2F0aW9uOiBTVElHIHVwZGF0ZXMgYXZhaWxhYmxlJyk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCfinIUgTm8gU1RJRyB1cGRhdGVzIGZvdW5kJyk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogR2V0IG5leHQgc2NoZWR1bGVkIHVwZGF0ZSBjaGVjayBkYXRlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV4dFVwZGF0ZUNoZWNrKCk6IHN0cmluZyB7XHJcbiAgY29uc3QgbGFzdENoZWNrID0gbmV3IERhdGUoQVVUT19VUERBVEVfQ09ORklHLmxhc3RDaGVjayk7XHJcbiAgY29uc3QgbmV4dENoZWNrID0gbmV3IERhdGUobGFzdENoZWNrKTtcclxuICBcclxuICBzd2l0Y2ggKEFVVE9fVVBEQVRFX0NPTkZJRy5jaGVja0ZyZXF1ZW5jeSkge1xyXG4gICAgY2FzZSAnZGFpbHknOlxyXG4gICAgICBuZXh0Q2hlY2suc2V0RGF0ZShuZXh0Q2hlY2suZ2V0RGF0ZSgpICsgMSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAnd2Vla2x5JzpcclxuICAgICAgbmV4dENoZWNrLnNldERhdGUobmV4dENoZWNrLmdldERhdGUoKSArIDcpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgJ21vbnRobHknOlxyXG4gICAgICBuZXh0Q2hlY2suc2V0TW9udGgobmV4dENoZWNrLmdldE1vbnRoKCkgKyAxKTtcclxuICAgICAgYnJlYWs7XHJcbiAgfVxyXG4gIFxyXG4gIHJldHVybiBuZXh0Q2hlY2sudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdO1xyXG59XHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIFVQREFURSBBUFBMSUNBVElPTiBGVU5DVElPTkFMSVRZXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXBkYXRlQXBwbGljYXRpb25SZXN1bHQge1xyXG4gIHN1Y2Nlc3M6IGJvb2xlYW47XHJcbiAgc3RpZ0lkOiBzdHJpbmc7XHJcbiAgb2xkVmVyc2lvbjogc3RyaW5nO1xyXG4gIG5ld1ZlcnNpb246IHN0cmluZztcclxuICBvbGRSZWxlYXNlRGF0ZTogc3RyaW5nO1xyXG4gIG5ld1JlbGVhc2VEYXRlOiBzdHJpbmc7XHJcbiAgb2xkUmVxdWlyZW1lbnRzPzogbnVtYmVyO1xyXG4gIG5ld1JlcXVpcmVtZW50cz86IG51bWJlcjtcclxuICBiYWNrdXBDcmVhdGVkOiBib29sZWFuO1xyXG4gIG1lc3NhZ2U6IHN0cmluZztcclxuICBlcnJvcj86IHN0cmluZztcclxufVxyXG5cclxuLy8gQmFja3VwIHN0b3JhZ2UgZm9yIHJvbGxiYWNrIGNhcGFiaWxpdHlcclxuY29uc3QgU1RJR19CQUNLVVBTOiB7IFtzdGlnSWQ6IHN0cmluZ106IFN0aWdGYW1pbHlbXSB9ID0ge307XHJcblxyXG4vKipcclxuICogQXBwbHkgYSBzaW5nbGUgdXBkYXRlIHRvIHRoZSBTVElHIGRhdGFiYXNlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlTdGlnVXBkYXRlKHVwZGF0ZTogU3RpZ1VwZGF0ZUNoZWNrKTogVXBkYXRlQXBwbGljYXRpb25SZXN1bHQge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zb2xlLmxvZyhg8J+UhCBBcHBseWluZyB1cGRhdGUgZm9yICR7dXBkYXRlLnN0aWdJZH0uLi5gKTtcclxuICAgIFxyXG4gICAgLy8gRmluZCB0aGUgU1RJRyBmYW1pbHkgaW4gdGhlIGRhdGFiYXNlXHJcbiAgICBjb25zdCBzdGlnSW5kZXggPSBTVElHX0ZBTUlMSUVTLmZpbmRJbmRleChmYW1pbHkgPT4gZmFtaWx5LmlkID09PSB1cGRhdGUuc3RpZ0lkKTtcclxuICAgIFxyXG4gICAgaWYgKHN0aWdJbmRleCA9PT0gLTEpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICBzdGlnSWQ6IHVwZGF0ZS5zdGlnSWQsXHJcbiAgICAgICAgb2xkVmVyc2lvbjogdXBkYXRlLmN1cnJlbnRWZXJzaW9uLFxyXG4gICAgICAgIG5ld1ZlcnNpb246IHVwZGF0ZS5sYXRlc3RWZXJzaW9uIHx8ICdVbmtub3duJyxcclxuICAgICAgICBvbGRSZWxlYXNlRGF0ZTogdXBkYXRlLmN1cnJlbnRSZWxlYXNlRGF0ZSxcclxuICAgICAgICBuZXdSZWxlYXNlRGF0ZTogdXBkYXRlLmxhdGVzdFJlbGVhc2VEYXRlIHx8ICdVbmtub3duJyxcclxuICAgICAgICBiYWNrdXBDcmVhdGVkOiBmYWxzZSxcclxuICAgICAgICBtZXNzYWdlOiAnU1RJRyBmYW1pbHkgbm90IGZvdW5kIGluIGRhdGFiYXNlJyxcclxuICAgICAgICBlcnJvcjogJ1NUSUdfTk9UX0ZPVU5EJ1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjb25zdCBvcmlnaW5hbFN0aWcgPSBTVElHX0ZBTUlMSUVTW3N0aWdJbmRleF07XHJcbiAgICBcclxuICAgIC8vIENyZWF0ZSBiYWNrdXAgYmVmb3JlIHVwZGF0aW5nXHJcbiAgICBpZiAoQVVUT19VUERBVEVfQ09ORklHLmF1dG9VcGRhdGVQcmVmZXJlbmNlcy5iYWNrdXBCZWZvcmVVcGRhdGUpIHtcclxuICAgICAgaWYgKCFTVElHX0JBQ0tVUFNbdXBkYXRlLnN0aWdJZF0pIHtcclxuICAgICAgICBTVElHX0JBQ0tVUFNbdXBkYXRlLnN0aWdJZF0gPSBbXTtcclxuICAgICAgfVxyXG4gICAgICBTVElHX0JBQ0tVUFNbdXBkYXRlLnN0aWdJZF0ucHVzaCh7IC4uLm9yaWdpbmFsU3RpZyB9KTtcclxuICAgICAgY29uc29sZS5sb2coYPCfkr4gQmFja3VwIGNyZWF0ZWQgZm9yICR7dXBkYXRlLnN0aWdJZH1gKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gQXBwbHkgdGhlIHVwZGF0ZVxyXG4gICAgY29uc3Qgb2xkVmVyc2lvbiA9IG9yaWdpbmFsU3RpZy52ZXJzaW9uO1xyXG4gICAgY29uc3Qgb2xkUmVsZWFzZURhdGUgPSBvcmlnaW5hbFN0aWcucmVsZWFzZURhdGU7XHJcbiAgICBjb25zdCBvbGRSZXF1aXJlbWVudHMgPSBvcmlnaW5hbFN0aWcuYWN0dWFsUmVxdWlyZW1lbnRzO1xyXG4gICAgXHJcbiAgICBTVElHX0ZBTUlMSUVTW3N0aWdJbmRleF0gPSB7XHJcbiAgICAgIC4uLm9yaWdpbmFsU3RpZyxcclxuICAgICAgdmVyc2lvbjogdXBkYXRlLmxhdGVzdFZlcnNpb24gfHwgb3JpZ2luYWxTdGlnLnZlcnNpb24sXHJcbiAgICAgIHJlbGVhc2VEYXRlOiB1cGRhdGUubGF0ZXN0UmVsZWFzZURhdGUgfHwgb3JpZ2luYWxTdGlnLnJlbGVhc2VEYXRlLFxyXG4gICAgICBhY3R1YWxSZXF1aXJlbWVudHM6IHVwZGF0ZS5hY3R1YWxSZXF1aXJlbWVudHMgfHwgb3JpZ2luYWxTdGlnLmFjdHVhbFJlcXVpcmVtZW50cyxcclxuICAgICAgdmFsaWRhdGVkOiBmYWxzZSAvLyBNYXJrIGFzIHVudmFsaWRhdGVkIHNpbmNlIGl0J3MganVzdCB1cGRhdGVkXHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICAvLyBVcGRhdGUgbWV0YWRhdGFcclxuICAgIFNUSUdfREFUQUJBU0VfTUVUQURBVEEubGFzdFVwZGF0ZWQgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXTtcclxuICAgIFxyXG4gICAgY29uc29sZS5sb2coYOKchSBTdWNjZXNzZnVsbHkgdXBkYXRlZCAke3VwZGF0ZS5zdGlnSWR9YCk7XHJcbiAgICBjb25zb2xlLmxvZyhgICAgJHtvbGRWZXJzaW9ufSDihpIgJHt1cGRhdGUubGF0ZXN0VmVyc2lvbn1gKTtcclxuICAgIGNvbnNvbGUubG9nKGAgICAke29sZFJlbGVhc2VEYXRlfSDihpIgJHt1cGRhdGUubGF0ZXN0UmVsZWFzZURhdGV9YCk7XHJcbiAgICBcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgIHN0aWdJZDogdXBkYXRlLnN0aWdJZCxcclxuICAgICAgb2xkVmVyc2lvbixcclxuICAgICAgbmV3VmVyc2lvbjogdXBkYXRlLmxhdGVzdFZlcnNpb24gfHwgb2xkVmVyc2lvbixcclxuICAgICAgb2xkUmVsZWFzZURhdGUsXHJcbiAgICAgIG5ld1JlbGVhc2VEYXRlOiB1cGRhdGUubGF0ZXN0UmVsZWFzZURhdGUgfHwgb2xkUmVsZWFzZURhdGUsXHJcbiAgICAgIG9sZFJlcXVpcmVtZW50cyxcclxuICAgICAgbmV3UmVxdWlyZW1lbnRzOiB1cGRhdGUuYWN0dWFsUmVxdWlyZW1lbnRzLFxyXG4gICAgICBiYWNrdXBDcmVhdGVkOiBBVVRPX1VQREFURV9DT05GSUcuYXV0b1VwZGF0ZVByZWZlcmVuY2VzLmJhY2t1cEJlZm9yZVVwZGF0ZSxcclxuICAgICAgbWVzc2FnZTogYFN1Y2Nlc3NmdWxseSB1cGRhdGVkICR7dXBkYXRlLnN0aWdJZH0gZnJvbSAke29sZFZlcnNpb259IHRvICR7dXBkYXRlLmxhdGVzdFZlcnNpb259YFxyXG4gICAgfTtcclxuICAgIFxyXG4gIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoYOKdjCBFcnJvciBhcHBseWluZyB1cGRhdGUgZm9yICR7dXBkYXRlLnN0aWdJZH06YCwgZXJyb3IpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgIHN0aWdJZDogdXBkYXRlLnN0aWdJZCxcclxuICAgICAgb2xkVmVyc2lvbjogdXBkYXRlLmN1cnJlbnRWZXJzaW9uLFxyXG4gICAgICBuZXdWZXJzaW9uOiB1cGRhdGUubGF0ZXN0VmVyc2lvbiB8fCAnVW5rbm93bicsXHJcbiAgICAgIG9sZFJlbGVhc2VEYXRlOiB1cGRhdGUuY3VycmVudFJlbGVhc2VEYXRlLFxyXG4gICAgICBuZXdSZWxlYXNlRGF0ZTogdXBkYXRlLmxhdGVzdFJlbGVhc2VEYXRlIHx8ICdVbmtub3duJyxcclxuICAgICAgYmFja3VwQ3JlYXRlZDogZmFsc2UsXHJcbiAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gYXBwbHkgdXBkYXRlJyxcclxuICAgICAgZXJyb3I6IGVycm9yLm1lc3NhZ2VcclxuICAgIH07XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogQXBwbHkgbXVsdGlwbGUgdXBkYXRlcyBpbiBiYXRjaFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5TXVsdGlwbGVTdGlnVXBkYXRlcyh1cGRhdGVzOiBTdGlnVXBkYXRlQ2hlY2tbXSk6IFVwZGF0ZUFwcGxpY2F0aW9uUmVzdWx0W10ge1xyXG4gIGNvbnNvbGUubG9nKGDwn5SEIEFwcGx5aW5nICR7dXBkYXRlcy5sZW5ndGh9IHVwZGF0ZXMgaW4gYmF0Y2guLi5gKTtcclxuICBcclxuICBjb25zdCByZXN1bHRzOiBVcGRhdGVBcHBsaWNhdGlvblJlc3VsdFtdID0gW107XHJcbiAgbGV0IHN1Y2Nlc3NDb3VudCA9IDA7XHJcbiAgbGV0IGZhaWx1cmVDb3VudCA9IDA7XHJcbiAgXHJcbiAgZm9yIChjb25zdCB1cGRhdGUgb2YgdXBkYXRlcykge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gYXBwbHlTdGlnVXBkYXRlKHVwZGF0ZSk7XHJcbiAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcclxuICAgIFxyXG4gICAgaWYgKHJlc3VsdC5zdWNjZXNzKSB7XHJcbiAgICAgIHN1Y2Nlc3NDb3VudCsrO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZmFpbHVyZUNvdW50Kys7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIGNvbnNvbGUubG9nKGDinIUgQmF0Y2ggdXBkYXRlIGNvbXBsZXRlOiAke3N1Y2Nlc3NDb3VudH0gc3VjY2Vzc2Z1bCwgJHtmYWlsdXJlQ291bnR9IGZhaWxlZGApO1xyXG4gIFxyXG4gIHJldHVybiByZXN1bHRzO1xyXG59XHJcblxyXG4vKipcclxuICogUm9sbGJhY2sgYSBzaW5nbGUgU1RJRyB0byBpdHMgcHJldmlvdXMgdmVyc2lvblxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJvbGxiYWNrU3RpZ1VwZGF0ZShzdGlnSWQ6IHN0cmluZyk6IHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZTogc3RyaW5nIH0ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBiYWNrdXBzID0gU1RJR19CQUNLVVBTW3N0aWdJZF07XHJcbiAgICBcclxuICAgIGlmICghYmFja3VwcyB8fCBiYWNrdXBzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgIG1lc3NhZ2U6IGBObyBiYWNrdXAgZm91bmQgZm9yICR7c3RpZ0lkfWBcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gR2V0IHRoZSBtb3N0IHJlY2VudCBiYWNrdXBcclxuICAgIGNvbnN0IGJhY2t1cCA9IGJhY2t1cHMucG9wKCkhO1xyXG4gICAgXHJcbiAgICAvLyBGaW5kIGFuZCByZXN0b3JlIHRoZSBTVElHXHJcbiAgICBjb25zdCBzdGlnSW5kZXggPSBTVElHX0ZBTUlMSUVTLmZpbmRJbmRleChmYW1pbHkgPT4gZmFtaWx5LmlkID09PSBzdGlnSWQpO1xyXG4gICAgXHJcbiAgICBpZiAoc3RpZ0luZGV4ID09PSAtMSkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgIG1lc3NhZ2U6IGBTVElHIGZhbWlseSAke3N0aWdJZH0gbm90IGZvdW5kYFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBTVElHX0ZBTUlMSUVTW3N0aWdJbmRleF0gPSBiYWNrdXA7XHJcbiAgICBcclxuICAgIGNvbnNvbGUubG9nKGDihqnvuI8gUm9sbGVkIGJhY2sgJHtzdGlnSWR9IHRvIHZlcnNpb24gJHtiYWNrdXAudmVyc2lvbn1gKTtcclxuICAgIFxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgbWVzc2FnZTogYFN1Y2Nlc3NmdWxseSByb2xsZWQgYmFjayAke3N0aWdJZH0gdG8gJHtiYWNrdXAudmVyc2lvbn1gXHJcbiAgICB9O1xyXG4gICAgXHJcbiAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xyXG4gICAgY29uc29sZS5lcnJvcihg4p2MIEVycm9yIHJvbGxpbmcgYmFjayAke3N0aWdJZH06YCwgZXJyb3IpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgIG1lc3NhZ2U6IGBGYWlsZWQgdG8gcm9sbGJhY2s6ICR7ZXJyb3IubWVzc2FnZX1gXHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEdldCBhbGwgYXZhaWxhYmxlIGJhY2t1cHNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBdmFpbGFibGVCYWNrdXBzKCk6IHsgW3N0aWdJZDogc3RyaW5nXTogbnVtYmVyIH0ge1xyXG4gIGNvbnN0IGJhY2t1cENvdW50czogeyBbc3RpZ0lkOiBzdHJpbmddOiBudW1iZXIgfSA9IHt9O1xyXG4gIFxyXG4gIGZvciAoY29uc3QgW3N0aWdJZCwgYmFja3Vwc10gb2YgT2JqZWN0LmVudHJpZXMoU1RJR19CQUNLVVBTKSkge1xyXG4gICAgYmFja3VwQ291bnRzW3N0aWdJZF0gPSBiYWNrdXBzLmxlbmd0aDtcclxuICB9XHJcbiAgXHJcbiAgcmV0dXJuIGJhY2t1cENvdW50cztcclxufVxyXG5cclxuLyoqXHJcbiAqIENsZWFyIGFsbCBiYWNrdXBzICh1c2Ugd2l0aCBjYXV0aW9uKVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyQWxsQmFja3VwcygpOiB2b2lkIHtcclxuICBjb25zdCBjb3VudCA9IE9iamVjdC5rZXlzKFNUSUdfQkFDS1VQUykubGVuZ3RoO1xyXG4gIE9iamVjdC5rZXlzKFNUSUdfQkFDS1VQUykuZm9yRWFjaChrZXkgPT4gZGVsZXRlIFNUSUdfQkFDS1VQU1trZXldKTtcclxuICBjb25zb2xlLmxvZyhg8J+Xke+4jyBDbGVhcmVkICR7Y291bnR9IGJhY2t1cChzKWApO1xyXG59XHJcblxyXG4vKipcclxuICogRXhwb3J0IGN1cnJlbnQgU1RJRyBkYXRhYmFzZSBhcyBKU09OIChmb3IgbWFudWFsIGJhY2t1cClcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBleHBvcnRTdGlnRGF0YWJhc2UoKTogc3RyaW5nIHtcclxuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgbWV0YWRhdGE6IFNUSUdfREFUQUJBU0VfTUVUQURBVEEsXHJcbiAgICBmYW1pbGllczogU1RJR19GQU1JTElFUyxcclxuICAgIGV4cG9ydERhdGU6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcclxuICAgIHZlcnNpb246ICcxLjAnXHJcbiAgfSwgbnVsbCwgMik7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbXBvcnQgU1RJRyBkYXRhYmFzZSBmcm9tIEpTT04gYmFja3VwIChmb3IgcmVzdG9yYXRpb24pXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaW1wb3J0U3RpZ0RhdGFiYXNlKGpzb25EYXRhOiBzdHJpbmcpOiB7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U6IHN0cmluZyB9IHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UoanNvbkRhdGEpO1xyXG4gICAgXHJcbiAgICBpZiAoIWRhdGEuZmFtaWxpZXMgfHwgIUFycmF5LmlzQXJyYXkoZGF0YS5mYW1pbGllcykpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICBtZXNzYWdlOiAnSW52YWxpZCBiYWNrdXAgZm9ybWF0OiBtaXNzaW5nIGZhbWlsaWVzIGFycmF5J1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBDcmVhdGUgYmFja3VwIG9mIGN1cnJlbnQgc3RhdGUgYmVmb3JlIGltcG9ydGluZ1xyXG4gICAgY29uc3QgY3VycmVudEJhY2t1cCA9IGV4cG9ydFN0aWdEYXRhYmFzZSgpO1xyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3N0aWdfcHJlX2ltcG9ydF9iYWNrdXAnLCBjdXJyZW50QmFja3VwKTtcclxuICAgIFxyXG4gICAgLy8gQ2xlYXIgYW5kIHJlc3RvcmVcclxuICAgIFNUSUdfRkFNSUxJRVMubGVuZ3RoID0gMDtcclxuICAgIFNUSUdfRkFNSUxJRVMucHVzaCguLi5kYXRhLmZhbWlsaWVzKTtcclxuICAgIFxyXG4gICAgaWYgKGRhdGEubWV0YWRhdGEpIHtcclxuICAgICAgT2JqZWN0LmFzc2lnbihTVElHX0RBVEFCQVNFX01FVEFEQVRBLCBkYXRhLm1ldGFkYXRhKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgY29uc29sZS5sb2coYOKchSBJbXBvcnRlZCAke2RhdGEuZmFtaWxpZXMubGVuZ3RofSBTVElHIGZhbWlsaWVzYCk7XHJcbiAgICBcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgIG1lc3NhZ2U6IGBTdWNjZXNzZnVsbHkgaW1wb3J0ZWQgJHtkYXRhLmZhbWlsaWVzLmxlbmd0aH0gU1RJRyBmYW1pbGllc2BcclxuICAgIH07XHJcbiAgICBcclxuICB9IGNhdGNoIChlcnJvcjogYW55KSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3IgaW1wb3J0aW5nIGRhdGFiYXNlOicsIGVycm9yKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICBtZXNzYWdlOiBgSW1wb3J0IGZhaWxlZDogJHtlcnJvci5tZXNzYWdlfWBcclxuICAgIH07XHJcbiAgfVxyXG59XHJcblxyXG4iXSwibmFtZXMiOlsiU1RJR19EQVRBQkFTRV9NRVRBREFUQSIsImxhc3RVcGRhdGVkIiwibGFzdFZhbGlkYXRlZCIsIm5leHRSZXZpZXdEdWUiLCJ0b3RhbFN0aWdGYW1pbGllcyIsInZhbGlkYXRlZEZhbWlsaWVzIiwidXBkYXRlRnJlcXVlbmN5IiwiZGF0YVNvdXJjZXMiLCJjcml0aWNhbFVwZGF0ZXNOZWVkZWQiLCJ1cGRhdGVOb3RlcyIsIlNUSUdfRkFNSUxJRVMiLCJpZCIsIm5hbWUiLCJ2ZXJzaW9uIiwicmVsZWFzZURhdGUiLCJkZXNjcmlwdGlvbiIsImFwcGxpY2FibGVTeXN0ZW1UeXBlcyIsInRyaWdnZXJLZXl3b3JkcyIsImNvbnRyb2xGYW1pbGllcyIsInByaW9yaXR5IiwiYWN0dWFsUmVxdWlyZW1lbnRzIiwic3RpZ0lkIiwidmFsaWRhdGVkIiwiU0NPUklOR19XRUlHSFRTIiwiS0VZV09SRF9NQVRDSF9CQVNFIiwiS0VZV09SRF9NQVRDSF9BUFBfU0VDVVJJVFkiLCJLRVlXT1JEX01BVENIX1RFQ0hfU1BFQ0lGSUMiLCJDT05UUk9MX0ZBTUlMWV9NQVRDSCIsIkRFU0lHTl9FTEVNRU5UX0tFWVdPUkQiLCJERVNJR05fRUxFTUVOVF9UWVBFIiwiREVTSUdOX0VMRU1FTlRfRVhBQ1RfVEVDSCIsIkRFVkVMT1BNRU5UX0VOVklST05NRU5UX0JPTlVTIiwiSU5GUkFTVFJVQ1RVUkVfUEVOQUxUWV9JTl9ERVYiLCJNSU5fQ1JJVElDQUxfQ09ORklERU5DRSIsIk1JTl9ISUdIX0NPTkZJREVOQ0UiLCJNSU5fTUVESVVNX0NPTkZJREVOQ0UiLCJnZXRTdGlnRmFtaWx5UmVjb21tZW5kYXRpb25zIiwicmVxdWlyZW1lbnRzIiwiZGVzaWduRWxlbWVudHMiLCJyZWNvbW1lbmRhdGlvbnMiLCJzdGlnRmFtaWx5IiwicmVjb21tZW5kYXRpb24iLCJhbmFseXplU3RpZ0ZhbWlseSIsImNvbmZpZGVuY2VTY29yZSIsInB1c2giLCJzb3J0IiwiYSIsImIiLCJzY29yZUJyZWFrZG93biIsImtleXdvcmRNYXRjaGVzIiwiY29udHJvbEZhbWlseU1hdGNoZXMiLCJkZXNpZ25FbGVtZW50TWF0Y2hlcyIsInRlY2hub2xvZ3lTcGVjaWZpY0JvbnVzIiwiZW52aXJvbm1lbnRCb251cyIsInBlbmFsdGllcyIsIm1hdGNoaW5nUmVxdWlyZW1lbnRzIiwibWF0Y2hpbmdEZXNpZ25FbGVtZW50cyIsInJlYXNvbmluZyIsImlzRGV2ZWxvcG1lbnRFbnZpcm9ubWVudCIsImRldGVjdERldmVsb3BtZW50RW52aXJvbm1lbnQiLCJkZXRlY3RlZFRlY2hub2xvZ2llcyIsImRldGVjdFRlY2hub2xvZ2llcyIsImlzQXBwbGljYXRpb25TZWN1cml0eVN0aWciLCJyZXEiLCJyZXFUZXh0IiwidGl0bGUiLCJjYXRlZ29yeSIsImNvbnRyb2xGYW1pbHkiLCJzb3VyY2UiLCJ0b0xvd2VyQ2FzZSIsImZpbHRlciIsImtleXdvcmQiLCJpbmNsdWRlcyIsImxlbmd0aCIsIndlaWdodCIsImpvaW4iLCJlbGVtZW50IiwiZWxlbWVudFRleHQiLCJ0eXBlIiwidGVjaG5vbG9neSIsInR5cGVNYXRjaGVzIiwiaGFzRXhhY3RUZWNoTWF0Y2giLCJjaGVja0V4YWN0VGVjaG5vbG9neU1hdGNoIiwiaXNJbmZyYXN0cnVjdHVyZVN0aWciLCJyZWxldmFuY2VTY29yZSIsIk1hdGgiLCJtYXgiLCJjYWxjdWxhdGVDb25maWRlbmNlU2NvcmUiLCJpbXBsZW1lbnRhdGlvblByaW9yaXR5Iiwic29tZSIsInRleHQiLCJ0ZWNobm9sb2dpZXMiLCJTZXQiLCJ0ZWNoUGF0dGVybnMiLCJmb3JFYWNoIiwiT2JqZWN0IiwiZW50cmllcyIsInRlY2giLCJwYXR0ZXJuIiwidGVzdCIsImFkZCIsImRldGVjdGVkVGVjaHMiLCJleGFjdE1hdGNoZXMiLCJyZXF1aXJlZFRlY2hzIiwiaGFzIiwicmVxTWF0Y2hlcyIsImRlc2lnbk1hdGNoZXMiLCJzY29yZSIsIm1pbiIsImdldFN0aWdEYXRhYmFzZVN0YXR1cyIsInRvdGFsRmFtaWxpZXMiLCJmYW1pbHkiLCJzaXhNb250aHNBZ28iLCJEYXRlIiwic2V0TW9udGgiLCJnZXRNb250aCIsIm91dGRhdGVkRmFtaWxpZXMiLCJuZXh0UmV2aWV3RGF0ZSIsImlzUmV2aWV3T3ZlcmR1ZSIsInZhbGlkYXRpb25QZXJjZW50YWdlIiwicm91bmQiLCJkYXlzVW50aWxSZXZpZXciLCJjZWlsIiwiZ2V0VGltZSIsImhlYWx0aFNjb3JlIiwiY2FsY3VsYXRlRGF0YWJhc2VIZWFsdGhTY29yZSIsInRvdGFsIiwib3V0ZGF0ZWQiLCJvdmVyZHVlIiwidmFsaWRhdGlvblNjb3JlIiwib3V0ZGF0ZWRQZW5hbHR5IiwiZ2V0SW1wbGVtZW50YXRpb25FZmZvcnQiLCJ0b3RhbFJlcXVpcmVtZW50cyIsInJlZHVjZSIsInN1bSIsInJlYyIsImNyaXRpY2FsQ291bnQiLCJyIiwiaGlnaENvdW50IiwibWVkaXVtQ291bnQiLCJlc3RpbWF0ZWRIb3VycyIsImVzdGltYXRlZERheXMiLCJwcmlvcml0eUNvdW50cyIsImNyaXRpY2FsIiwiaGlnaCIsIm1lZGl1bSIsImxvdyIsIkFVVE9fVVBEQVRFX0NPTkZJRyIsImVuYWJsZWQiLCJjaGVja0ZyZXF1ZW5jeSIsImxhc3RDaGVjayIsInNvdXJjZXMiLCJkaXNhUnNzIiwic3RpZ1ZpZXdlciIsIm1hbnVhbCIsIm5vdGlmaWNhdGlvbnMiLCJlbWFpbCIsImluQXBwIiwiYXV0b1VwZGF0ZVByZWZlcmVuY2VzIiwiY3JpdGljYWxPbmx5IiwicmVxdWlyZU1hbnVhbEFwcHJvdmFsIiwiYmFja3VwQmVmb3JlVXBkYXRlIiwiYXV0b0FwcGx5IiwiY2hlY2tGb3JTdGlnVXBkYXRlcyIsInVwZGF0ZXMiLCJub3ciLCJ0b0lTT1N0cmluZyIsInNwbGl0IiwicnNzVXBkYXRlcyIsImNoZWNrRGlzYVJzc0ZlZWQiLCJzdGlnVmlld2VyVXBkYXRlcyIsImNoZWNrU3RpZ1ZpZXdlclVwZGF0ZXMiLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciLCJpc0Jyb3dzZXIiLCJyZXNwb25zZSIsImRhdGEiLCJmZXRjaCIsIm9rIiwid2FybiIsImNoZWNrQnlEYXRlT25seSIsImpzb24iLCJoZWFkZXJzIiwieG1sVGV4dCIsIml0ZW1zIiwiaXRlbVJlZ2V4IiwibWF0Y2hlcyIsIm1hdGNoQWxsIiwibWF0Y2giLCJpdGVtQ29udGVudCIsImxpbmsiLCJwdWJEYXRlIiwic3VjY2VzcyIsInJlbGVhc2VzIiwiZmluZCIsInJlbGVhc2UiLCJsb2NhbERhdGUiLCJyZW1vdGVEYXRlIiwiY3VycmVudFZlcnNpb24iLCJsYXRlc3RWZXJzaW9uIiwiY3VycmVudFJlbGVhc2VEYXRlIiwibGF0ZXN0UmVsZWFzZURhdGUiLCJ1cGRhdGVBdmFpbGFibGUiLCJzZXZlcml0eSIsImRldGVybWluZVNldmVyaXR5IiwibGFzdENoZWNrZWQiLCJtb250aHNEaWZmIiwiZ2V0UGVuZGluZ1VwZGF0ZXMiLCJzZXRBdXRvVXBkYXRlRW5hYmxlZCIsInBlcmZvcm1TY2hlZHVsZWRVcGRhdGVDaGVjayIsImRheXNTaW5jZUxhc3RDaGVjayIsImZsb29yIiwic2hvdWxkQ2hlY2siLCJ1cGRhdGVzVG9BcHBseSIsInUiLCJyZXN1bHRzIiwiYXBwbHlNdWx0aXBsZVN0aWdVcGRhdGVzIiwic3VjY2Vzc0NvdW50Iiwic3RpZ0luZGV4IiwiZmluZEluZGV4IiwicyIsImdldE5leHRVcGRhdGVDaGVjayIsIm5leHRDaGVjayIsInNldERhdGUiLCJnZXREYXRlIiwiU1RJR19CQUNLVVBTIiwiYXBwbHlTdGlnVXBkYXRlIiwidXBkYXRlIiwib2xkVmVyc2lvbiIsIm5ld1ZlcnNpb24iLCJvbGRSZWxlYXNlRGF0ZSIsIm5ld1JlbGVhc2VEYXRlIiwiYmFja3VwQ3JlYXRlZCIsIm1lc3NhZ2UiLCJvcmlnaW5hbFN0aWciLCJvbGRSZXF1aXJlbWVudHMiLCJuZXdSZXF1aXJlbWVudHMiLCJmYWlsdXJlQ291bnQiLCJyZXN1bHQiLCJyb2xsYmFja1N0aWdVcGRhdGUiLCJiYWNrdXBzIiwiYmFja3VwIiwicG9wIiwiZ2V0QXZhaWxhYmxlQmFja3VwcyIsImJhY2t1cENvdW50cyIsImNsZWFyQWxsQmFja3VwcyIsImNvdW50Iiwia2V5cyIsImtleSIsImV4cG9ydFN0aWdEYXRhYmFzZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJtZXRhZGF0YSIsImZhbWlsaWVzIiwiZXhwb3J0RGF0ZSIsImltcG9ydFN0aWdEYXRhYmFzZSIsImpzb25EYXRhIiwicGFyc2UiLCJBcnJheSIsImlzQXJyYXkiLCJjdXJyZW50QmFja3VwIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsImFzc2lnbiJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./utils/stigFamilyRecommendations.ts\n"));

/***/ })

});