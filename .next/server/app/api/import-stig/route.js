/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/import-stig/route";
exports.ids = ["app/api/import-stig/route"];
exports.modules = {

/***/ "(rsc)/./app/api/import-stig/route.ts":
/*!**************************************!*\
  !*** ./app/api/import-stig/route.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! https */ \"https\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(https__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils_localStigLibrary__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/utils/localStigLibrary */ \"(rsc)/./utils/localStigLibrary.ts\");\n\n\n\n/**\r\n * GET - Fetch STIG from local library or stigviewer.com\r\n * Query params: stigId (e.g., 'apache_server_2.4_unix')\r\n */ async function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const stigId = searchParams.get('stigId');\n        if (!stigId) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'stigId parameter is required'\n            }, {\n                status: 400\n            });\n        }\n        // üéØ PRIORITY 1: Check local STIG library first\n        console.log(`üîç Checking local STIG library for: ${stigId}`);\n        if ((0,_utils_localStigLibrary__WEBPACK_IMPORTED_MODULE_2__.hasLocalStig)(stigId)) {\n            console.log(`‚úÖ Found STIG in local library: ${stigId}`);\n            try {\n                const metadata = (0,_utils_localStigLibrary__WEBPACK_IMPORTED_MODULE_2__.getLocalStigMetadata)(stigId);\n                const content = (0,_utils_localStigLibrary__WEBPACK_IMPORTED_MODULE_2__.getLocalStigContent)(stigId);\n                if (content && metadata) {\n                    console.log(`üìÑ Reading local STIG file: ${metadata.filename}`);\n                    // Determine format and parse accordingly\n                    const isXml = metadata.format === 'xml' || metadata.filename.toLowerCase().endsWith('.xml');\n                    if (isXml) {\n                        console.log(`üîÑ Parsing local XML file...`);\n                        const stigData = parseXccdfXml(content, stigId);\n                        if (stigData.requirements.length > 0) {\n                            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                                success: true,\n                                ...stigData,\n                                version: metadata.version,\n                                releaseDate: metadata.releaseDate,\n                                source: 'local',\n                                message: `‚úÖ Successfully imported ${stigData.requirements.length} requirements from local library (${metadata.filename})`\n                            });\n                        }\n                    } else {\n                        console.log(`üîÑ Parsing local CSV file...`);\n                        const stigData = parseStigCsv(content, stigId);\n                        if (stigData.requirements.length > 0) {\n                            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                                success: true,\n                                ...stigData,\n                                stigName: metadata.name,\n                                version: metadata.version,\n                                releaseDate: metadata.releaseDate,\n                                source: 'local',\n                                message: `‚úÖ Successfully imported ${stigData.requirements.length} requirements from local library (${metadata.filename})`\n                            });\n                        }\n                    }\n                }\n            } catch (localError) {\n                console.error(`‚ùå Error reading local STIG: ${localError.message}`);\n            // STIG not found in local library\n            }\n        } else {\n            console.log(`‚ùå STIG not found in local library: ${stigId}`);\n        }\n        // üö´ EXTERNAL API DISABLED: No stigviewer.com fallback\n        // All STIGs must be in local library (/public/stigs/)\n        console.log(`‚ùå STIG \"${stigId}\" not found in local library`);\n        // Return error with instructions for manual upload or local library extraction\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            stigId,\n            error: 'STIG not found in local library',\n            message: `STIG \"${stigId}\" not found in local library. All external API calls are disabled for security.`,\n            instructions: {\n                step1: 'Check available STIGs: Run list-stigs.ps1 to see what\\'s in your local library',\n                step2: 'Browse local library: Use the \"Local Library\" button in the STIG Requirements tab',\n                step3: 'Extract more STIGs: Run extract-stigs.ps1 with the DISA STIG Library ZIP',\n                step4: 'Manual upload: Use the \"Upload STIG\" button to upload XML/CSV files directly',\n                note: 'External API calls to stigviewer.com and DISA websites are disabled'\n            }\n        }, {\n            status: 404\n        });\n    } catch (error) {\n        console.error('‚ùå Error in STIG import:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: error.message,\n            message: 'An error occurred while importing STIG'\n        }, {\n            status: 500\n        });\n    }\n}\n/**\r\n * Parse DISA STIG CSV file\r\n * CSV format from DISA Cyber Exchange\r\n */ function parseStigCsv(csvContent, fileName) {\n    const requirements = [];\n    // Properly split CSV content into lines, handling multi-line quoted fields\n    const lines = [];\n    let currentLine = '';\n    let insideQuotes = false;\n    for(let i = 0; i < csvContent.length; i++){\n        const char = csvContent[i];\n        const nextChar = csvContent[i + 1];\n        if (char === '\"') {\n            // Check if it's an escaped quote\n            if (nextChar === '\"') {\n                currentLine += char + nextChar;\n                i++; // Skip next quote\n            } else {\n                insideQuotes = !insideQuotes;\n                currentLine += char;\n            }\n        } else if (char === '\\n' && !insideQuotes) {\n            if (currentLine.trim()) {\n                lines.push(currentLine);\n            }\n            currentLine = '';\n        } else if (char === '\\r') {\n            continue;\n        } else {\n            currentLine += char;\n        }\n    }\n    // Add the last line if not empty\n    if (currentLine.trim()) {\n        lines.push(currentLine);\n    }\n    console.log(`üìÑ Split CSV into ${lines.length} lines`);\n    if (lines.length < 2) {\n        return {\n            stigId: fileName.replace(/\\.csv$/i, ''),\n            stigName: 'Imported STIG',\n            version: 'Unknown',\n            releaseDate: new Date().toISOString().split('T')[0],\n            requirements: [],\n            totalRequirements: 0\n        };\n    }\n    // Parse header row - handle quoted CSV fields\n    const parseCSVLine = (line)=>{\n        const result = [];\n        let current = '';\n        let inQuotes = false;\n        for(let i = 0; i < line.length; i++){\n            const char = line[i];\n            const nextChar = line[i + 1];\n            if (char === '\"') {\n                if (inQuotes && nextChar === '\"') {\n                    // Escaped quote\n                    current += '\"';\n                    i++;\n                } else {\n                    inQuotes = !inQuotes;\n                }\n            } else if (char === ',' && !inQuotes) {\n                result.push(current.trim());\n                current = '';\n            } else {\n                current += char;\n            }\n        }\n        result.push(current.trim());\n        return result;\n    };\n    // Find the header row (skip classification banners like \"~~~~~~~ Unclassified ~~~~~~\")\n    let headerLineIndex = 0;\n    let headers = [];\n    for(let i = 0; i < Math.min(5, lines.length); i++){\n        const parsedLine = parseCSVLine(lines[i]);\n        const lineText = parsedLine.join('').toLowerCase();\n        // Skip classification banners and empty lines\n        if (lineText.includes('unclassified') || lineText.includes('~~~~~') || parsedLine.length < 5) {\n            continue;\n        }\n        // Check if this looks like a header row (has common STIG column names)\n        if (lineText.includes('stig') || lineText.includes('severity') || lineText.includes('rule')) {\n            headerLineIndex = i;\n            headers = parsedLine.map((h)=>h.toLowerCase().trim());\n            console.log(`üìã Found header row at line ${i + 1}`);\n            break;\n        }\n    }\n    if (headers.length === 0) {\n        console.error('‚ùå Could not find valid header row in CSV');\n        return {\n            stigId: fileName.replace(/\\.csv$/i, ''),\n            stigName: 'Imported STIG',\n            version: 'Unknown',\n            releaseDate: new Date().toISOString().split('T')[0],\n            requirements: [],\n            totalRequirements: 0\n        };\n    }\n    console.log(`üìã CSV Headers found: ${headers.slice(0, 10).join(', ')}...`);\n    console.log(`üìã All headers (first 15):`, headers.slice(0, 15));\n    // Find column indices\n    const getIndex = (names)=>{\n        for (const name of names){\n            const idx = headers.findIndex((h)=>h.includes(name));\n            if (idx !== -1) {\n                console.log(`‚úÖ Found \"${name}\" at index ${idx}: \"${headers[idx]}\"`);\n                return idx;\n            }\n        }\n        console.log(`‚ùå Could not find any of: ${names.join(', ')}`);\n        return -1;\n    };\n    const stigIdIdx = getIndex([\n        'stig id',\n        'stigid'\n    ]);\n    const severityIdx = getIndex([\n        'severity'\n    ]);\n    const titleIdx = getIndex([\n        'rule title',\n        'ruletitle'\n    ]);\n    const discussionIdx = getIndex([\n        'discussion'\n    ]);\n    const checkIdx = getIndex([\n        'check content',\n        'checkcontent'\n    ]);\n    const fixIdx = getIndex([\n        'fix text',\n        'fixtext'\n    ]);\n    const cciIdx = getIndex([\n        'ccis',\n        'cci'\n    ]);\n    const ruleIdIdx = getIndex([\n        'rule id',\n        'ruleid'\n    ]);\n    console.log(`üìä Column indices:`, {\n        stigId: stigIdIdx,\n        severity: severityIdx,\n        title: titleIdx,\n        discussion: discussionIdx,\n        check: checkIdx,\n        fix: fixIdx,\n        cci: cciIdx,\n        ruleId: ruleIdIdx\n    });\n    let stigName = 'Imported STIG';\n    let version = 'Unknown';\n    console.log(`üìÑ Processing ${lines.length - headerLineIndex - 1} data rows from CSV`);\n    // Parse data rows (start after header row)\n    for(let i = headerLineIndex + 1; i < lines.length; i++){\n        const line = lines[i].trim();\n        if (!line) continue;\n        const values = parseCSVLine(line);\n        if (i === headerLineIndex + 1) {\n            console.log(`üìù First data row has ${values.length} values`);\n        }\n        // Extract STIG name from first data row if available\n        if (i === headerLineIndex + 1 && values.length > 0) {\n            const benchmarkIdx = headers.findIndex((h)=>h.includes('benchmark'));\n            if (benchmarkIdx !== -1 && values[benchmarkIdx]) {\n                stigName = values[benchmarkIdx];\n            }\n            const versionIdx = headers.findIndex((h)=>h.includes('version') || h.includes('release'));\n            if (versionIdx !== -1 && values[versionIdx]) {\n                version = values[versionIdx];\n            }\n        }\n        const vulnId = stigIdIdx !== -1 ? values[stigIdIdx] : '';\n        const ruleId = ruleIdIdx !== -1 ? values[ruleIdIdx] : vulnId;\n        if (!vulnId) {\n            if (i <= headerLineIndex + 3) {\n                console.log(`‚ö†Ô∏è Line ${i}: No STIG ID found`);\n            }\n            continue;\n        }\n        if (i === headerLineIndex + 1) {\n            console.log(`‚úÖ First requirement found: ${vulnId}`);\n        }\n        // Parse severity - handle multiple formats\n        const severityValue = severityIdx !== -1 ? values[severityIdx].toLowerCase().trim() : 'medium';\n        let severity = 'medium';\n        // Direct severity values\n        if (severityValue === 'high' || severityValue.includes('cat i') || severityValue.includes('cat 1') || severityValue.includes('cati')) {\n            severity = 'high';\n        } else if (severityValue === 'low' || severityValue.includes('cat iii') || severityValue.includes('cat 3') || severityValue.includes('catiii')) {\n            severity = 'low';\n        } else if (severityValue === 'medium' || severityValue.includes('cat ii') || severityValue.includes('cat 2') || severityValue.includes('catii')) {\n            severity = 'medium';\n        }\n        // Log first few for debugging\n        if (i <= headerLineIndex + 3) {\n            console.log(`üìä Row ${i - headerLineIndex}: vulnId=\"${vulnId}\", severity=\"${severityValue}\" ‚Üí ${severity}`);\n        }\n        // Extract CCI references\n        const cciText = cciIdx !== -1 ? values[cciIdx] : '';\n        const cciMatches = cciText.match(/CCI-\\d+/g);\n        const cci = cciMatches || [\n            'CCI-000366'\n        ];\n        requirements.push({\n            vulnId,\n            ruleId,\n            severity,\n            title: titleIdx !== -1 ? values[titleIdx] : `Requirement ${vulnId}`,\n            description: discussionIdx !== -1 ? values[discussionIdx] : 'No description provided',\n            checkText: checkIdx !== -1 ? values[checkIdx] : 'Review system configuration per STIG guidance.',\n            fixText: fixIdx !== -1 ? values[fixIdx] : 'Configure system per STIG guidance.',\n            cci,\n            nistControls: []\n        });\n    }\n    console.log(`‚úÖ CSV parsing complete: ${requirements.length} requirements found`);\n    return {\n        stigId: fileName.replace(/\\.csv$/i, ''),\n        stigName,\n        version,\n        releaseDate: new Date().toISOString().split('T')[0],\n        requirements,\n        totalRequirements: requirements.length\n    };\n}\n/**\r\n * POST - Manual STIG upload (XML or CSV file)\r\n * Body: FormData with 'file' field containing XCCDF XML or DISA CSV\r\n */ async function POST(request) {\n    try {\n        const formData = await request.formData();\n        const file = formData.get('file');\n        if (!file) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'No file provided'\n            }, {\n                status: 400\n            });\n        }\n        // Validate file type\n        const fileName = file.name.toLowerCase();\n        const isXml = fileName.endsWith('.xml') || fileName.endsWith('.xccdf');\n        const isCsv = fileName.endsWith('.csv');\n        if (!isXml && !isCsv) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Invalid file type. Please upload an XCCDF XML file or DISA CSV file.'\n            }, {\n                status: 400\n            });\n        }\n        console.log(`üìÅ Processing manual STIG upload: ${file.name}`);\n        // Read file content\n        const fileContent = await file.text();\n        let stigData;\n        if (isCsv) {\n            // Parse CSV file\n            stigData = parseStigCsv(fileContent, fileName);\n        } else {\n            // Parse XCCDF XML\n            stigData = parseXccdfXml(fileContent, fileName);\n        }\n        if (stigData.requirements.length === 0) {\n            throw new Error(`No requirements found in ${isCsv ? 'CSV' : 'XML'} file. Please ensure this is a valid DISA STIG file.`);\n        }\n        console.log(`‚úÖ Successfully parsed ${stigData.requirements.length} requirements from manual upload`);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            ...stigData,\n            source: 'manual',\n            message: `Successfully imported ${stigData.requirements.length} requirements from ${file.name}`\n        });\n    } catch (error) {\n        console.error('‚ùå Error processing manual upload:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: error.message,\n            message: 'Failed to parse STIG file. Please ensure this is a valid XCCDF XML file.'\n        }, {\n            status: 500\n        });\n    }\n}\n/**\r\n * Fetch detailed requirement page from stigviewer.com\r\n * Returns check and fix text for a specific vulnerability\r\n */ async function fetchRequirementDetails(stigId, vulnId) {\n    try {\n        const agent = new (https__WEBPACK_IMPORTED_MODULE_1___default().Agent)({\n            rejectUnauthorized: false\n        });\n        const url = `https://stigviewer.com/stig/${stigId}/requirement/${vulnId}`;\n        const response = await fetch(url, {\n            headers: {\n                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n            },\n            // @ts-ignore\n            agent,\n            signal: AbortSignal.timeout(10000)\n        });\n        if (!response.ok) {\n            throw new Error(`HTTP ${response.status}`);\n        }\n        const html = await response.text();\n        // Extract check text\n        const checkMatch = html.match(/<div[^>]*(?:id|class)=\"[^\"]*check[^\"]*\"[^>]*>([\\s\\S]*?)<\\/div>/i) || html.match(/Check Text[:\\s]*<[^>]*>([\\s\\S]*?)<\\/(?:div|pre|p)>/i) || html.match(/<pre[^>]*>([\\s\\S]*?)<\\/pre>/i);\n        const checkText = checkMatch ? checkMatch[1].replace(/<[^>]+>/g, '').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&').replace(/&quot;/g, '\"').replace(/\\s+/g, ' ').trim() : 'Review the system configuration to verify compliance with the security requirement.';\n        // Extract fix text  \n        const fixMatch = html.match(/<div[^>]*(?:id|class)=\"[^\"]*fix[^\"]*\"[^>]*>([\\s\\S]*?)<\\/div>/i) || html.match(/Fix Text[:\\s]*<[^>]*>([\\s\\S]*?)<\\/(?:div|pre|p)>/i);\n        const fixText = fixMatch ? fixMatch[1].replace(/<[^>]+>/g, '').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&').replace(/&quot;/g, '\"').replace(/\\s+/g, ' ').trim() : 'Configure the system to meet the security requirement as specified in the STIG documentation.';\n        return {\n            checkText,\n            fixText\n        };\n    } catch (error) {\n        // Return defaults if fetch fails\n        return {\n            checkText: 'Review the system configuration to verify compliance with the security requirement. Detailed check procedure available in the full STIG documentation.',\n            fixText: 'Configure the system to meet the security requirement. Detailed fix procedure available in the full STIG documentation.'\n        };\n    }\n}\n/**\r\n * Parse stig viewer.com JSON API response\r\n * JSON format has complete data including severity for each requirement\r\n */ function parseStigViewerJson(jsonData, stigId) {\n    const requirements = [];\n    try {\n        const stig = jsonData.stig || jsonData;\n        const stigName = stig.title || stigId;\n        const version = stig.version || 'Unknown';\n        const releaseDate = stig.date || new Date().toISOString().split('T')[0];\n        console.log(`üìã Parsing JSON: ${stigName}, Version: ${version}, Release: ${releaseDate}`);\n        const findings = stig.findings || {};\n        const vulnIds = Object.keys(findings);\n        console.log(`üîç Found ${vulnIds.length} requirements in JSON`);\n        vulnIds.forEach((vulnId)=>{\n            const finding = findings[vulnId];\n            if (!finding) return;\n            // Extract severity from finding\n            // JSON might have severity as \"high\", \"medium\", \"low\" or \"CAT I\", \"CAT II\", \"CAT III\"\n            let severity = 'medium';\n            const sevText = (finding.severity || finding.cat || 'medium').toString().toLowerCase();\n            if (sevText.includes('high') || sevText.includes('cat i') || sevText === 'i' || sevText === '1') {\n                severity = 'high';\n            } else if (sevText.includes('low') || sevText.includes('cat iii') || sevText === 'iii' || sevText === '3') {\n                severity = 'low';\n            } else {\n                severity = 'medium';\n            }\n            requirements.push({\n                vulnId,\n                ruleId: finding.ruleId || finding.rule_id || finding.ruleid || `${vulnId}-rule`,\n                severity,\n                title: finding.title || finding.ruleTitle || finding.ruletitle || `Requirement ${vulnId}`,\n                description: finding.discussion || finding.description || finding.title || '',\n                checkText: finding.checktext || finding.checkText || finding.check_text || finding.check || 'Review system configuration per STIG guidance.',\n                fixText: finding.fixtext || finding.fixText || finding.fix_text || finding.fix || 'Configure system per STIG guidance.',\n                cci: finding.cci || finding.ccis || [\n                    'CCI-000366'\n                ],\n                nistControls: finding.nistControls || finding.nist || []\n            });\n        });\n        console.log(`‚úÖ Successfully parsed ${requirements.length} requirements from JSON`);\n        // Log severity distribution\n        const severityDist = {};\n        requirements.forEach((req)=>{\n            severityDist[req.severity] = (severityDist[req.severity] || 0) + 1;\n        });\n        console.log(`üìä JSON Severity Distribution:`, severityDist);\n        return {\n            stigId,\n            stigName,\n            version,\n            releaseDate,\n            requirements,\n            totalRequirements: requirements.length\n        };\n    } catch (error) {\n        console.error('Error parsing stigviewer.com JSON:', error);\n        throw new Error(`Failed to parse stigviewer.com JSON: ${error.message}`);\n    }\n}\n/**\r\n * Parse stigviewer.com HTML to extract STIG requirements\r\n * Fetches full requirement details including check and fix text\r\n */ async function parseStigViewerHtml(html, stigId) {\n    const requirements = [];\n    try {\n        // Extract STIG metadata from page title and headers\n        const titleMatch = html.match(/<title>([^<]+)<\\/title>/i);\n        const stigName = titleMatch ? titleMatch[1].replace(' | STIGViewer', '').trim() : stigId;\n        // Extract version from page\n        const versionMatch = html.match(/Version[:\\s]+([VvRr\\d.]+)/i) || html.match(/class=\"[^\"]*version[^\"]*\"[^>]*>([^<]+)</i);\n        const version = versionMatch ? versionMatch[1].trim() : 'Unknown';\n        // Extract release date\n        const dateMatch = html.match(/Release[:\\s]+(\\d{1,2}\\s+\\w+\\s+\\d{4})/i) || html.match(/Date[:\\s]+(\\d{4}-\\d{2}-\\d{2})/i) || html.match(/(\\d{4}-\\d{2}-\\d{2})/);\n        const releaseDate = dateMatch ? dateMatch[1] : new Date().toISOString().split('T')[0];\n        console.log(`üìã Parsing STIG: ${stigName}, Version: ${version}, Release: ${releaseDate}`);\n        // Method 1: Extract complete requirement entries with all details\n        // stigviewer.com has links like: href=\"/stig/{stigId}/requirement/V-#####\"\n        // Pattern to match entire requirement sections with severity info\n        const reqSectionPattern = /(?:CAT\\s+(I{1,3})|severity[^>]*?(high|medium|low))[^V]*(V-\\d+)[^<]*<a[^>]*href=\"[^\"]*\\/requirement\\/\\3\"[^>]*>([^<]+)</gi;\n        let match;\n        const detailedReqs = [];\n        while((match = reqSectionPattern.exec(html)) !== null){\n            const severity = match[1] || match[2]; // CAT I/II/III or high/medium/low\n            const vulnId = match[3];\n            const title = match[4].trim();\n            detailedReqs.push({\n                vulnId,\n                severity,\n                title\n            });\n        }\n        console.log(`üîç Method 1: Found ${detailedReqs.length} requirements with severity info`);\n        // Method 2: Extract from table rows if available\n        const tableRows = [];\n        const rowPattern = /<tr[^>]*>([\\s\\S]*?)<\\/tr>/gi;\n        let rowMatch;\n        while((rowMatch = rowPattern.exec(html)) !== null){\n            const rowHtml = rowMatch[1];\n            // Check if this row has a vuln ID\n            const vulnMatch = rowHtml.match(/>(V-\\d+)</);\n            if (!vulnMatch) continue;\n            const vulnId = vulnMatch[1];\n            // Extract severity from this row\n            const catMatch = rowHtml.match(/CAT\\s+(I{1,3})/i);\n            const sevMatch = rowHtml.match(/>(high|medium|low)</i);\n            const severity = catMatch ? catMatch[1] : sevMatch ? sevMatch[1] : 'II';\n            // Extract title\n            const titleMatch = rowHtml.match(/<a[^>]*href=\"[^\"]*\\/requirement\\/[^\"]*\"[^>]*>([^<]+)</i);\n            const title = titleMatch ? titleMatch[1].trim() : `Requirement ${vulnId}`;\n            tableRows.push({\n                vulnId,\n                severity,\n                title\n            });\n        }\n        console.log(`üîç Method 2: Found ${tableRows.length} requirements from table rows`);\n        // Method 3: Fallback - extract all V-#### with default data\n        const vulnIdPattern = /V-\\d+/g;\n        const allVulnIds = [\n            ...new Set(html.match(vulnIdPattern) || [])\n        ];\n        console.log(`üîç Method 3: Found ${allVulnIds.length} total V-#### patterns`);\n        // Use the method that found the most requirements\n        let reqData = [];\n        if (detailedReqs.length >= tableRows.length && detailedReqs.length > 0) {\n            reqData = detailedReqs;\n            console.log(`‚úì Using Method 1: ${detailedReqs.length} requirements with severity`);\n        } else if (tableRows.length > 0) {\n            reqData = tableRows;\n            console.log(`‚úì Using Method 2: ${tableRows.length} requirements from tables`);\n        } else {\n            // Fallback: create basic entries\n            reqData = allVulnIds.map((vulnId)=>({\n                    vulnId,\n                    severity: 'II',\n                    title: `${stigName} - ${vulnId}`\n                }));\n            console.log(`‚úì Using Method 3: ${allVulnIds.length} basic requirements`);\n        }\n        console.log(`üìù Processing ${reqData.length} requirements...`);\n        let requirementCount = 0;\n        for (const req of reqData){\n            const { vulnId, severity: rawSeverity, title } = req;\n            // Extract Rule ID if available\n            const rulePattern = new RegExp(`${vulnId}[^S]*?(SV-\\\\d+r\\\\d+_rule)`, 'i');\n            const ruleMatch = html.match(rulePattern);\n            const ruleId = ruleMatch ? ruleMatch[1] : `${vulnId}-rule`;\n            // Normalize severity\n            let severity = 'medium';\n            const sevText = rawSeverity.toLowerCase();\n            if (sevText.includes('i') && !sevText.includes('ii') || sevText === 'high' || sevText === '1') {\n                severity = 'high';\n            } else if (sevText.includes('iii') || sevText === 'low' || sevText === '3') {\n                severity = 'low';\n            } else {\n                severity = 'medium';\n            }\n            // Description defaults to title\n            const description = title;\n            // Extract CCI references - search for this vulnId in HTML\n            const vulnContext = html.substring(Math.max(0, html.indexOf(vulnId) - 300), Math.min(html.length, html.indexOf(vulnId) + 300));\n            const cciMatches = vulnContext.match(/CCI-\\d+/g);\n            const cci = cciMatches && cciMatches.length > 0 ? [\n                ...new Set(cciMatches)\n            ] : [\n                'CCI-000366'\n            ];\n            // Default check and fix text with note about full documentation\n            const checkText = `Review the system configuration to verify compliance with ${vulnId}. Refer to the full STIG documentation for detailed check procedures.`;\n            const fixText = `Configure the system to meet the requirements specified in ${vulnId}. Refer to the full STIG documentation for detailed fix procedures.`;\n            // Extract NIST controls from context\n            const nistMatches = vulnContext.match(/([A-Z]{2}-\\d+(?:\\s*\\([a-z0-9]+\\))?)/g);\n            const nistControls = nistMatches ? [\n                ...new Set(nistMatches)\n            ] : [];\n            requirements.push({\n                vulnId,\n                ruleId,\n                severity,\n                title,\n                description,\n                checkText,\n                fixText,\n                cci,\n                nistControls\n            });\n            requirementCount++;\n        }\n        console.log(`‚úÖ Successfully parsed ${requirementCount} requirements from HTML`);\n        // Log severity distribution\n        const severityDist = {};\n        requirements.forEach((req)=>{\n            severityDist[req.severity] = (severityDist[req.severity] || 0) + 1;\n        });\n        console.log(`üìä API Severity Distribution:`, severityDist);\n        // If we didn't find any requirements in table format, try alternative parsing\n        if (requirements.length === 0) {\n            console.warn('‚ö†Ô∏è No requirements found in table format, trying alternative parsing...');\n            // Try to find all V-#### patterns and create basic requirements\n            const vulnIdPattern = /V-\\d+/g;\n            const vulnIds = [\n                ...new Set(html.match(vulnIdPattern) || [])\n            ];\n            vulnIds.forEach((vulnId, index)=>{\n                requirements.push({\n                    vulnId,\n                    ruleId: `${vulnId}-rule`,\n                    severity: 'medium',\n                    title: `${stigName} - ${vulnId}`,\n                    description: `Security requirement ${vulnId} from ${stigName}`,\n                    checkText: 'Review the system configuration to verify compliance. Detailed check procedure available in the full STIG documentation.',\n                    fixText: 'Configure the system to meet the security requirement. Detailed fix procedure available in the full STIG documentation.',\n                    cci: [\n                        'CCI-000366'\n                    ],\n                    nistControls: []\n                });\n            });\n            console.log(`üìù Created ${requirements.length} basic requirements from Vuln IDs`);\n        }\n        return {\n            stigId,\n            stigName,\n            version,\n            releaseDate,\n            requirements,\n            totalRequirements: requirements.length\n        };\n    } catch (error) {\n        console.error('Error parsing stigviewer.com HTML:', error);\n        throw new Error(`Failed to parse stigviewer.com page: ${error.message}`);\n    }\n}\n/**\r\n * Parse XCCDF XML file to extract STIG requirements\r\n */ function parseXccdfXml(xmlContent, fileName) {\n    const requirements = [];\n    try {\n        // Extract STIG ID from filename\n        const stigId = fileName.replace(/\\.xml|\\.xccdf/gi, '').toLowerCase().replace(/\\s+/g, '_');\n        // Parse XML using regex (simplified - in production use a proper XML parser)\n        // Extract Benchmark title\n        const titleMatch = xmlContent.match(/<title[^>]*>([^<]+)<\\/title>/i);\n        const stigName = titleMatch ? titleMatch[1].trim() : stigId;\n        // Extract version\n        const versionMatch = xmlContent.match(/<version[^>]*>([^<]+)<\\/version>/i) || xmlContent.match(/Version[:\\s]+([VvRr\\d.]+)/i);\n        const version = versionMatch ? versionMatch[1] : 'Unknown';\n        // Extract release date\n        const dateMatch = xmlContent.match(/release-date[^>]*>([^<]+)</i) || xmlContent.match(/(\\d{1,2}\\s+\\w+\\s+\\d{4})/);\n        const releaseDate = dateMatch ? dateMatch[1] : new Date().toISOString().split('T')[0];\n        // Extract all Group elements (requirements)\n        const groupPattern = /<Group[^>]*id=\"([^\"]+)\"[^>]*>([\\s\\S]*?)<\\/Group>/gi;\n        let groupMatch;\n        while((groupMatch = groupPattern.exec(xmlContent)) !== null){\n            const groupId = groupMatch[1];\n            const groupContent = groupMatch[2];\n            // Extract Rule from Group\n            const ruleMatch = groupContent.match(/<Rule[^>]*id=\"([^\"]+)\"[^>]*severity=\"([^\"]+)\"[^>]*>([\\s\\S]*?)<\\/Rule>/i);\n            if (ruleMatch) {\n                const ruleId = ruleMatch[1];\n                const severity = ruleMatch[2].toLowerCase();\n                const ruleContent = ruleMatch[3];\n                // Extract title\n                const titleMatch = ruleContent.match(/<title[^>]*>([^<]+)<\\/title>/i);\n                const title = titleMatch ? titleMatch[1].trim() : `Requirement ${groupId}`;\n                // Extract description\n                const descMatch = ruleContent.match(/<description[^>]*>([\\s\\S]*?)<\\/description>/i);\n                const description = descMatch ? stripHtml(descMatch[1]) : '';\n                // Extract check text\n                const checkMatch = ruleContent.match(/<check-content[^>]*>([\\s\\S]*?)<\\/check-content>/i);\n                const checkText = checkMatch ? stripHtml(checkMatch[1]) : 'No check procedure provided';\n                // Extract fix text\n                const fixMatch = ruleContent.match(/<fixtext[^>]*>([\\s\\S]*?)<\\/fixtext>/i);\n                const fixText = fixMatch ? stripHtml(fixMatch[1]) : 'No fix procedure provided';\n                // Extract CCI references\n                const cciPattern = /<ident[^>]*system=\"http:\\/\\/cyber\\.mil\\/legacy\\/cci\"[^>]*>([^<]+)<\\/ident>/gi;\n                const cci = [];\n                let cciMatch;\n                while((cciMatch = cciPattern.exec(ruleContent)) !== null){\n                    cci.push(cciMatch[1]);\n                }\n                // Extract NIST controls\n                const nistPattern = /<reference[^>]*>([\\s\\S]*?)NIST[^<]*([A-Z]{2}-\\d+(?:\\s*\\(\\d+\\))?(?:\\s*[a-z])?)[^<]*([\\s\\S]*?)<\\/reference>/gi;\n                const nistControls = [];\n                let nistMatch;\n                while((nistMatch = nistPattern.exec(ruleContent)) !== null){\n                    const control = nistMatch[2].trim();\n                    if (control && !nistControls.includes(control)) {\n                        nistControls.push(control);\n                    }\n                }\n                requirements.push({\n                    vulnId: groupId,\n                    ruleId,\n                    severity,\n                    title,\n                    description: description.substring(0, 500),\n                    checkText: checkText.substring(0, 1000),\n                    fixText: fixText.substring(0, 1000),\n                    cci: cci.length > 0 ? cci : [\n                        'CCI-000000'\n                    ],\n                    nistControls: nistControls.length > 0 ? nistControls : [\n                        'AC-1'\n                    ]\n                });\n            }\n        }\n        if (requirements.length === 0) {\n            throw new Error('No requirements found in XML. The file may not be a valid XCCDF STIG file.');\n        }\n        return {\n            stigId,\n            stigName,\n            version,\n            releaseDate,\n            requirements,\n            totalRequirements: requirements.length\n        };\n    } catch (error) {\n        console.error('Error parsing XCCDF XML:', error);\n        throw new Error(`Failed to parse XCCDF XML: ${error.message}`);\n    }\n}\n/**\r\n * Strip HTML tags and decode entities\r\n */ function stripHtml(html) {\n    return html.replace(/<[^>]+>/g, '') // Remove HTML tags\n    .replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&').replace(/&quot;/g, '\"').replace(/&#39;/g, \"'\").replace(/&nbsp;/g, ' ').replace(/\\s+/g, ' ') // Normalize whitespace\n    .trim();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/import-stig/route.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fimport-stig%2Froute&page=%2Fapi%2Fimport-stig%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fimport-stig%2Froute.ts&appDir=C%3A%5CUsers%5Cronni%5COneDrive%5CDesktop%5CProjects%5CSRTM-tool%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cronni%5COneDrive%5CDesktop%5CProjects%5CSRTM-tool&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fimport-stig%2Froute&page=%2Fapi%2Fimport-stig%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fimport-stig%2Froute.ts&appDir=C%3A%5CUsers%5Cronni%5COneDrive%5CDesktop%5CProjects%5CSRTM-tool%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cronni%5COneDrive%5CDesktop%5CProjects%5CSRTM-tool&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var C_Users_ronni_OneDrive_Desktop_Projects_SRTM_tool_app_api_import_stig_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./app/api/import-stig/route.ts */ \"(rsc)/./app/api/import-stig/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/import-stig/route\",\n        pathname: \"/api/import-stig\",\n        filename: \"route\",\n        bundlePath: \"app/api/import-stig/route\"\n    },\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || '',\n    resolvedPagePath: \"C:\\\\Users\\\\ronni\\\\OneDrive\\\\Desktop\\\\Projects\\\\SRTM-tool\\\\app\\\\api\\\\import-stig\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_ronni_OneDrive_Desktop_Projects_SRTM_tool_app_api_import_stig_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/import-stig/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = false;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        if (!(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fimport-stig%2Froute&page=%2Fapi%2Fimport-stig%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fimport-stig%2Froute.ts&appDir=C%3A%5CUsers%5Cronni%5COneDrive%5CDesktop%5CProjects%5CSRTM-tool%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cronni%5COneDrive%5CDesktop%5CProjects%5CSRTM-tool&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./utils/localStigLibrary.ts":
/*!***********************************!*\
  !*** ./utils/localStigLibrary.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getLocalStigContent: () => (/* binding */ getLocalStigContent),\n/* harmony export */   getLocalStigMetadata: () => (/* binding */ getLocalStigMetadata),\n/* harmony export */   getLocalStigStats: () => (/* binding */ getLocalStigStats),\n/* harmony export */   getStigDirectory: () => (/* binding */ getStigDirectory),\n/* harmony export */   hasLocalStig: () => (/* binding */ hasLocalStig),\n/* harmony export */   listLocalStigs: () => (/* binding */ listLocalStigs)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/**\r\n * Local STIG Library Management\r\n * Handles reading and serving STIG files from the local public/stigs directory\r\n */ \n\n/**\r\n * Get the path to the local STIG directory\r\n */ function getStigDirectory() {\n    return path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), 'public', 'stigs');\n}\n/**\r\n * Check if a STIG exists in the local library\r\n */ function hasLocalStig(stigId) {\n    const stigDir = path__WEBPACK_IMPORTED_MODULE_1___default().join(getStigDirectory(), stigId);\n    return fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(stigDir);\n}\n/**\r\n * Get metadata for a local STIG\r\n */ function getLocalStigMetadata(stigId) {\n    try {\n        const metadataPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(getStigDirectory(), stigId, 'metadata.json');\n        if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(metadataPath)) {\n            const metadata = JSON.parse(fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(metadataPath, 'utf-8'));\n            return metadata;\n        }\n        // Try to auto-detect if no metadata file\n        const stigDir = path__WEBPACK_IMPORTED_MODULE_1___default().join(getStigDirectory(), stigId);\n        if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(stigDir)) {\n            const files = fs__WEBPACK_IMPORTED_MODULE_0___default().readdirSync(stigDir);\n            const xmlFile = files.find((f)=>f.endsWith('.xml') || f.endsWith('.xccdf'));\n            const csvFile = files.find((f)=>f.endsWith('.csv'));\n            if (xmlFile || csvFile) {\n                return {\n                    stigId,\n                    name: stigId.replace(/_/g, ' ').replace(/\\b\\w/g, (l)=>l.toUpperCase()),\n                    version: 'Unknown',\n                    releaseDate: new Date().toISOString().split('T')[0],\n                    filename: xmlFile || csvFile || '',\n                    format: xmlFile ? 'xml' : 'csv'\n                };\n            }\n        }\n        return null;\n    } catch (error) {\n        console.error(`Error reading metadata for ${stigId}:`, error);\n        return null;\n    }\n}\n/**\r\n * Read local STIG file content\r\n */ function getLocalStigContent(stigId) {\n    try {\n        const metadata = getLocalStigMetadata(stigId);\n        if (!metadata) return null;\n        const filePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(getStigDirectory(), stigId, metadata.filename);\n        if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(filePath)) {\n            return fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(filePath, 'utf-8');\n        }\n        return null;\n    } catch (error) {\n        console.error(`Error reading STIG file for ${stigId}:`, error);\n        return null;\n    }\n}\n/**\r\n * List all available local STIGs\r\n */ function listLocalStigs() {\n    try {\n        const stigsDir = getStigDirectory();\n        if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(stigsDir)) {\n            return [];\n        }\n        const directories = fs__WEBPACK_IMPORTED_MODULE_0___default().readdirSync(stigsDir, {\n            withFileTypes: true\n        }).filter((dirent)=>dirent.isDirectory()).map((dirent)=>dirent.name);\n        const stigs = [];\n        for (const stigId of directories){\n            const metadata = getLocalStigMetadata(stigId);\n            if (metadata) {\n                stigs.push(metadata);\n            }\n        }\n        return stigs.sort((a, b)=>a.name.localeCompare(b.name));\n    } catch (error) {\n        console.error('Error listing local STIGs:', error);\n        return [];\n    }\n}\n/**\r\n * Get statistics about local STIG library\r\n */ function getLocalStigStats() {\n    const stigs = listLocalStigs();\n    return {\n        total: stigs.length,\n        byFormat: {\n            xml: stigs.filter((s)=>s.format === 'xml').length,\n            csv: stigs.filter((s)=>s.format === 'csv').length\n        },\n        stigs: stigs.map((s)=>({\n                id: s.stigId,\n                name: s.name,\n                version: s.version\n            }))\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi91dGlscy9sb2NhbFN0aWdMaWJyYXJ5LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTs7O0NBR0MsR0FFbUI7QUFDSTtBQVd4Qjs7Q0FFQyxHQUNNLFNBQVNFO0lBQ2QsT0FBT0QsZ0RBQVMsQ0FBQ0csUUFBUUMsR0FBRyxJQUFJLFVBQVU7QUFDNUM7QUFFQTs7Q0FFQyxHQUNNLFNBQVNDLGFBQWFDLE1BQWM7SUFDekMsTUFBTUMsVUFBVVAsZ0RBQVMsQ0FBQ0Msb0JBQW9CSztJQUM5QyxPQUFPUCxvREFBYSxDQUFDUTtBQUN2QjtBQUVBOztDQUVDLEdBQ00sU0FBU0UscUJBQXFCSCxNQUFjO0lBQ2pELElBQUk7UUFDRixNQUFNSSxlQUFlVixnREFBUyxDQUFDQyxvQkFBb0JLLFFBQVE7UUFFM0QsSUFBSVAsb0RBQWEsQ0FBQ1csZUFBZTtZQUMvQixNQUFNQyxXQUFXQyxLQUFLQyxLQUFLLENBQUNkLHNEQUFlLENBQUNXLGNBQWM7WUFDMUQsT0FBT0M7UUFDVDtRQUVBLHlDQUF5QztRQUN6QyxNQUFNSixVQUFVUCxnREFBUyxDQUFDQyxvQkFBb0JLO1FBQzlDLElBQUlQLG9EQUFhLENBQUNRLFVBQVU7WUFDMUIsTUFBTVEsUUFBUWhCLHFEQUFjLENBQUNRO1lBQzdCLE1BQU1VLFVBQVVGLE1BQU1HLElBQUksQ0FBQ0MsQ0FBQUEsSUFBS0EsRUFBRUMsUUFBUSxDQUFDLFdBQVdELEVBQUVDLFFBQVEsQ0FBQztZQUNqRSxNQUFNQyxVQUFVTixNQUFNRyxJQUFJLENBQUNDLENBQUFBLElBQUtBLEVBQUVDLFFBQVEsQ0FBQztZQUUzQyxJQUFJSCxXQUFXSSxTQUFTO2dCQUN0QixPQUFPO29CQUNMZjtvQkFDQWdCLE1BQU1oQixPQUFPaUIsT0FBTyxDQUFDLE1BQU0sS0FBS0EsT0FBTyxDQUFDLFNBQVNDLENBQUFBLElBQUtBLEVBQUVDLFdBQVc7b0JBQ25FQyxTQUFTO29CQUNUQyxhQUFhLElBQUlDLE9BQU9DLFdBQVcsR0FBR0MsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO29CQUNuREMsVUFBVWQsV0FBV0ksV0FBVztvQkFDaENXLFFBQVFmLFVBQVUsUUFBUTtnQkFDNUI7WUFDRjtRQUNGO1FBRUEsT0FBTztJQUNULEVBQUUsT0FBT2dCLE9BQU87UUFDZEMsUUFBUUQsS0FBSyxDQUFDLENBQUMsMkJBQTJCLEVBQUUzQixPQUFPLENBQUMsQ0FBQyxFQUFFMkI7UUFDdkQsT0FBTztJQUNUO0FBQ0Y7QUFFQTs7Q0FFQyxHQUNNLFNBQVNFLG9CQUFvQjdCLE1BQWM7SUFDaEQsSUFBSTtRQUNGLE1BQU1LLFdBQVdGLHFCQUFxQkg7UUFDdEMsSUFBSSxDQUFDSyxVQUFVLE9BQU87UUFFdEIsTUFBTXlCLFdBQVdwQyxnREFBUyxDQUFDQyxvQkFBb0JLLFFBQVFLLFNBQVNvQixRQUFRO1FBRXhFLElBQUloQyxvREFBYSxDQUFDcUMsV0FBVztZQUMzQixPQUFPckMsc0RBQWUsQ0FBQ3FDLFVBQVU7UUFDbkM7UUFFQSxPQUFPO0lBQ1QsRUFBRSxPQUFPSCxPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQyxDQUFDLDRCQUE0QixFQUFFM0IsT0FBTyxDQUFDLENBQUMsRUFBRTJCO1FBQ3hELE9BQU87SUFDVDtBQUNGO0FBRUE7O0NBRUMsR0FDTSxTQUFTSTtJQUNkLElBQUk7UUFDRixNQUFNQyxXQUFXckM7UUFFakIsSUFBSSxDQUFDRixvREFBYSxDQUFDdUMsV0FBVztZQUM1QixPQUFPLEVBQUU7UUFDWDtRQUVBLE1BQU1DLGNBQWN4QyxxREFBYyxDQUFDdUMsVUFBVTtZQUFFRSxlQUFlO1FBQUssR0FDaEVDLE1BQU0sQ0FBQ0MsQ0FBQUEsU0FBVUEsT0FBT0MsV0FBVyxJQUNuQ0MsR0FBRyxDQUFDRixDQUFBQSxTQUFVQSxPQUFPcEIsSUFBSTtRQUU1QixNQUFNdUIsUUFBNkIsRUFBRTtRQUVyQyxLQUFLLE1BQU12QyxVQUFVaUMsWUFBYTtZQUNoQyxNQUFNNUIsV0FBV0YscUJBQXFCSDtZQUN0QyxJQUFJSyxVQUFVO2dCQUNaa0MsTUFBTUMsSUFBSSxDQUFDbkM7WUFDYjtRQUNGO1FBRUEsT0FBT2tDLE1BQU1FLElBQUksQ0FBQyxDQUFDQyxHQUFHQyxJQUFNRCxFQUFFMUIsSUFBSSxDQUFDNEIsYUFBYSxDQUFDRCxFQUFFM0IsSUFBSTtJQUN6RCxFQUFFLE9BQU9XLE9BQU87UUFDZEMsUUFBUUQsS0FBSyxDQUFDLDhCQUE4QkE7UUFDNUMsT0FBTyxFQUFFO0lBQ1g7QUFDRjtBQUVBOztDQUVDLEdBQ00sU0FBU2tCO0lBQ2QsTUFBTU4sUUFBUVI7SUFFZCxPQUFPO1FBQ0xlLE9BQU9QLE1BQU1RLE1BQU07UUFDbkJDLFVBQVU7WUFDUkMsS0FBS1YsTUFBTUosTUFBTSxDQUFDZSxDQUFBQSxJQUFLQSxFQUFFeEIsTUFBTSxLQUFLLE9BQU9xQixNQUFNO1lBQ2pESSxLQUFLWixNQUFNSixNQUFNLENBQUNlLENBQUFBLElBQUtBLEVBQUV4QixNQUFNLEtBQUssT0FBT3FCLE1BQU07UUFDbkQ7UUFDQVIsT0FBT0EsTUFBTUQsR0FBRyxDQUFDWSxDQUFBQSxJQUFNO2dCQUNyQkUsSUFBSUYsRUFBRWxELE1BQU07Z0JBQ1pnQixNQUFNa0MsRUFBRWxDLElBQUk7Z0JBQ1pJLFNBQVM4QixFQUFFOUIsT0FBTztZQUNwQjtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xccm9ubmlcXE9uZURyaXZlXFxEZXNrdG9wXFxQcm9qZWN0c1xcU1JUTS10b29sXFx1dGlsc1xcbG9jYWxTdGlnTGlicmFyeS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogTG9jYWwgU1RJRyBMaWJyYXJ5IE1hbmFnZW1lbnRcclxuICogSGFuZGxlcyByZWFkaW5nIGFuZCBzZXJ2aW5nIFNUSUcgZmlsZXMgZnJvbSB0aGUgbG9jYWwgcHVibGljL3N0aWdzIGRpcmVjdG9yeVxyXG4gKi9cclxuXHJcbmltcG9ydCBmcyBmcm9tICdmcyc7XHJcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBMb2NhbFN0aWdNZXRhZGF0YSB7XHJcbiAgc3RpZ0lkOiBzdHJpbmc7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIHZlcnNpb246IHN0cmluZztcclxuICByZWxlYXNlRGF0ZTogc3RyaW5nO1xyXG4gIGZpbGVuYW1lOiBzdHJpbmc7XHJcbiAgZm9ybWF0PzogJ3htbCcgfCAnY3N2JztcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldCB0aGUgcGF0aCB0byB0aGUgbG9jYWwgU1RJRyBkaXJlY3RvcnlcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRTdGlnRGlyZWN0b3J5KCk6IHN0cmluZyB7XHJcbiAgcmV0dXJuIHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAncHVibGljJywgJ3N0aWdzJyk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiBhIFNUSUcgZXhpc3RzIGluIHRoZSBsb2NhbCBsaWJyYXJ5XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaGFzTG9jYWxTdGlnKHN0aWdJZDogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgY29uc3Qgc3RpZ0RpciA9IHBhdGguam9pbihnZXRTdGlnRGlyZWN0b3J5KCksIHN0aWdJZCk7XHJcbiAgcmV0dXJuIGZzLmV4aXN0c1N5bmMoc3RpZ0Rpcik7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXQgbWV0YWRhdGEgZm9yIGEgbG9jYWwgU1RJR1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldExvY2FsU3RpZ01ldGFkYXRhKHN0aWdJZDogc3RyaW5nKTogTG9jYWxTdGlnTWV0YWRhdGEgfCBudWxsIHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgbWV0YWRhdGFQYXRoID0gcGF0aC5qb2luKGdldFN0aWdEaXJlY3RvcnkoKSwgc3RpZ0lkLCAnbWV0YWRhdGEuanNvbicpO1xyXG4gICAgXHJcbiAgICBpZiAoZnMuZXhpc3RzU3luYyhtZXRhZGF0YVBhdGgpKSB7XHJcbiAgICAgIGNvbnN0IG1ldGFkYXRhID0gSlNPTi5wYXJzZShmcy5yZWFkRmlsZVN5bmMobWV0YWRhdGFQYXRoLCAndXRmLTgnKSk7XHJcbiAgICAgIHJldHVybiBtZXRhZGF0YTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gVHJ5IHRvIGF1dG8tZGV0ZWN0IGlmIG5vIG1ldGFkYXRhIGZpbGVcclxuICAgIGNvbnN0IHN0aWdEaXIgPSBwYXRoLmpvaW4oZ2V0U3RpZ0RpcmVjdG9yeSgpLCBzdGlnSWQpO1xyXG4gICAgaWYgKGZzLmV4aXN0c1N5bmMoc3RpZ0RpcikpIHtcclxuICAgICAgY29uc3QgZmlsZXMgPSBmcy5yZWFkZGlyU3luYyhzdGlnRGlyKTtcclxuICAgICAgY29uc3QgeG1sRmlsZSA9IGZpbGVzLmZpbmQoZiA9PiBmLmVuZHNXaXRoKCcueG1sJykgfHwgZi5lbmRzV2l0aCgnLnhjY2RmJykpO1xyXG4gICAgICBjb25zdCBjc3ZGaWxlID0gZmlsZXMuZmluZChmID0+IGYuZW5kc1dpdGgoJy5jc3YnKSk7XHJcbiAgICAgIFxyXG4gICAgICBpZiAoeG1sRmlsZSB8fCBjc3ZGaWxlKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHN0aWdJZCxcclxuICAgICAgICAgIG5hbWU6IHN0aWdJZC5yZXBsYWNlKC9fL2csICcgJykucmVwbGFjZSgvXFxiXFx3L2csIGwgPT4gbC50b1VwcGVyQ2FzZSgpKSxcclxuICAgICAgICAgIHZlcnNpb246ICdVbmtub3duJyxcclxuICAgICAgICAgIHJlbGVhc2VEYXRlOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXSxcclxuICAgICAgICAgIGZpbGVuYW1lOiB4bWxGaWxlIHx8IGNzdkZpbGUgfHwgJycsXHJcbiAgICAgICAgICBmb3JtYXQ6IHhtbEZpbGUgPyAneG1sJyA6ICdjc3YnXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcihgRXJyb3IgcmVhZGluZyBtZXRhZGF0YSBmb3IgJHtzdGlnSWR9OmAsIGVycm9yKTtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFJlYWQgbG9jYWwgU1RJRyBmaWxlIGNvbnRlbnRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRMb2NhbFN0aWdDb250ZW50KHN0aWdJZDogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IG1ldGFkYXRhID0gZ2V0TG9jYWxTdGlnTWV0YWRhdGEoc3RpZ0lkKTtcclxuICAgIGlmICghbWV0YWRhdGEpIHJldHVybiBudWxsO1xyXG4gICAgXHJcbiAgICBjb25zdCBmaWxlUGF0aCA9IHBhdGguam9pbihnZXRTdGlnRGlyZWN0b3J5KCksIHN0aWdJZCwgbWV0YWRhdGEuZmlsZW5hbWUpO1xyXG4gICAgXHJcbiAgICBpZiAoZnMuZXhpc3RzU3luYyhmaWxlUGF0aCkpIHtcclxuICAgICAgcmV0dXJuIGZzLnJlYWRGaWxlU3luYyhmaWxlUGF0aCwgJ3V0Zi04Jyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKGBFcnJvciByZWFkaW5nIFNUSUcgZmlsZSBmb3IgJHtzdGlnSWR9OmAsIGVycm9yKTtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIExpc3QgYWxsIGF2YWlsYWJsZSBsb2NhbCBTVElHc1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGxpc3RMb2NhbFN0aWdzKCk6IExvY2FsU3RpZ01ldGFkYXRhW10ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBzdGlnc0RpciA9IGdldFN0aWdEaXJlY3RvcnkoKTtcclxuICAgIFxyXG4gICAgaWYgKCFmcy5leGlzdHNTeW5jKHN0aWdzRGlyKSkge1xyXG4gICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNvbnN0IGRpcmVjdG9yaWVzID0gZnMucmVhZGRpclN5bmMoc3RpZ3NEaXIsIHsgd2l0aEZpbGVUeXBlczogdHJ1ZSB9KVxyXG4gICAgICAuZmlsdGVyKGRpcmVudCA9PiBkaXJlbnQuaXNEaXJlY3RvcnkoKSlcclxuICAgICAgLm1hcChkaXJlbnQgPT4gZGlyZW50Lm5hbWUpO1xyXG4gICAgXHJcbiAgICBjb25zdCBzdGlnczogTG9jYWxTdGlnTWV0YWRhdGFbXSA9IFtdO1xyXG4gICAgXHJcbiAgICBmb3IgKGNvbnN0IHN0aWdJZCBvZiBkaXJlY3Rvcmllcykge1xyXG4gICAgICBjb25zdCBtZXRhZGF0YSA9IGdldExvY2FsU3RpZ01ldGFkYXRhKHN0aWdJZCk7XHJcbiAgICAgIGlmIChtZXRhZGF0YSkge1xyXG4gICAgICAgIHN0aWdzLnB1c2gobWV0YWRhdGEpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiBzdGlncy5zb3J0KChhLCBiKSA9PiBhLm5hbWUubG9jYWxlQ29tcGFyZShiLm5hbWUpKTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgbGlzdGluZyBsb2NhbCBTVElHczonLCBlcnJvcik7XHJcbiAgICByZXR1cm4gW107XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogR2V0IHN0YXRpc3RpY3MgYWJvdXQgbG9jYWwgU1RJRyBsaWJyYXJ5XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TG9jYWxTdGlnU3RhdHMoKSB7XHJcbiAgY29uc3Qgc3RpZ3MgPSBsaXN0TG9jYWxTdGlncygpO1xyXG4gIFxyXG4gIHJldHVybiB7XHJcbiAgICB0b3RhbDogc3RpZ3MubGVuZ3RoLFxyXG4gICAgYnlGb3JtYXQ6IHtcclxuICAgICAgeG1sOiBzdGlncy5maWx0ZXIocyA9PiBzLmZvcm1hdCA9PT0gJ3htbCcpLmxlbmd0aCxcclxuICAgICAgY3N2OiBzdGlncy5maWx0ZXIocyA9PiBzLmZvcm1hdCA9PT0gJ2NzdicpLmxlbmd0aFxyXG4gICAgfSxcclxuICAgIHN0aWdzOiBzdGlncy5tYXAocyA9PiAoe1xyXG4gICAgICBpZDogcy5zdGlnSWQsXHJcbiAgICAgIG5hbWU6IHMubmFtZSxcclxuICAgICAgdmVyc2lvbjogcy52ZXJzaW9uXHJcbiAgICB9KSlcclxuICB9O1xyXG59XHJcbiJdLCJuYW1lcyI6WyJmcyIsInBhdGgiLCJnZXRTdGlnRGlyZWN0b3J5Iiwiam9pbiIsInByb2Nlc3MiLCJjd2QiLCJoYXNMb2NhbFN0aWciLCJzdGlnSWQiLCJzdGlnRGlyIiwiZXhpc3RzU3luYyIsImdldExvY2FsU3RpZ01ldGFkYXRhIiwibWV0YWRhdGFQYXRoIiwibWV0YWRhdGEiLCJKU09OIiwicGFyc2UiLCJyZWFkRmlsZVN5bmMiLCJmaWxlcyIsInJlYWRkaXJTeW5jIiwieG1sRmlsZSIsImZpbmQiLCJmIiwiZW5kc1dpdGgiLCJjc3ZGaWxlIiwibmFtZSIsInJlcGxhY2UiLCJsIiwidG9VcHBlckNhc2UiLCJ2ZXJzaW9uIiwicmVsZWFzZURhdGUiLCJEYXRlIiwidG9JU09TdHJpbmciLCJzcGxpdCIsImZpbGVuYW1lIiwiZm9ybWF0IiwiZXJyb3IiLCJjb25zb2xlIiwiZ2V0TG9jYWxTdGlnQ29udGVudCIsImZpbGVQYXRoIiwibGlzdExvY2FsU3RpZ3MiLCJzdGlnc0RpciIsImRpcmVjdG9yaWVzIiwid2l0aEZpbGVUeXBlcyIsImZpbHRlciIsImRpcmVudCIsImlzRGlyZWN0b3J5IiwibWFwIiwic3RpZ3MiLCJwdXNoIiwic29ydCIsImEiLCJiIiwibG9jYWxlQ29tcGFyZSIsImdldExvY2FsU3RpZ1N0YXRzIiwidG90YWwiLCJsZW5ndGgiLCJieUZvcm1hdCIsInhtbCIsInMiLCJjc3YiLCJpZCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./utils/localStigLibrary.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/server/app-render/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fimport-stig%2Froute&page=%2Fapi%2Fimport-stig%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fimport-stig%2Froute.ts&appDir=C%3A%5CUsers%5Cronni%5COneDrive%5CDesktop%5CProjects%5CSRTM-tool%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cronni%5COneDrive%5CDesktop%5CProjects%5CSRTM-tool&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();