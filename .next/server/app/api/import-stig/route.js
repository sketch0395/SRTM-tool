/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/import-stig/route";
exports.ids = ["app/api/import-stig/route"];
exports.modules = {

/***/ "(rsc)/./app/api/import-stig/route.ts":
/*!**************************************!*\
  !*** ./app/api/import-stig/route.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! https */ \"https\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(https__WEBPACK_IMPORTED_MODULE_1__);\n\n\n/**\r\n * GET - Fetch STIG from stigviewer.com\r\n * Query params: stigId (e.g., 'apache_server_2.4_unix')\r\n */ async function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const stigId = searchParams.get('stigId');\n        if (!stigId) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'stigId parameter is required'\n            }, {\n                status: 400\n            });\n        }\n        console.log(`üîç Fetching STIG from stigviewer.com: ${stigId}`);\n        // Try JSON API first (has complete severity data)\n        const jsonUrl = `https://stigviewer.com/stigs/${stigId}/json`;\n        const htmlUrl = `https://stigviewer.com/stigs/${stigId}/`;\n        // Create custom agent to bypass SSL certificate validation\n        const agent = new (https__WEBPACK_IMPORTED_MODULE_1___default().Agent)({\n            rejectUnauthorized: false\n        });\n        try {\n            // Attempt JSON API first\n            console.log(`üì• Attempting JSON API...`);\n            const jsonResponse = await fetch(jsonUrl, {\n                headers: {\n                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n                    'Accept': 'application/json'\n                },\n                // @ts-ignore\n                agent,\n                signal: AbortSignal.timeout(15000)\n            });\n            if (jsonResponse.ok) {\n                const jsonData = await jsonResponse.json();\n                console.log(`‚úÖ JSON API successful`);\n                const stigData = parseStigViewerJson(jsonData, stigId);\n                if (stigData.requirements.length > 0) {\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        success: true,\n                        ...stigData,\n                        source: 'stigviewer',\n                        message: `Successfully imported ${stigData.requirements.length} requirements from JSON API`\n                    });\n                }\n            }\n        } catch (jsonError) {\n            console.log(`‚ö†Ô∏è JSON API failed: ${jsonError.message}, trying HTML...`);\n        }\n        // Fallback to HTML parsing\n        try {\n            console.log(`üì• Attempting HTML parsing...`);\n            const response = await fetch(htmlUrl, {\n                headers: {\n                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n                    'Accept': 'text/html'\n                },\n                // @ts-ignore\n                agent,\n                signal: AbortSignal.timeout(15000)\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n            const html = await response.text();\n            // Parse STIG information from HTML\n            const stigData = await parseStigViewerHtml(html, stigId);\n            if (stigData.requirements.length === 0) {\n                throw new Error('No requirements found in STIG data');\n            }\n            console.log(`‚úÖ Successfully fetched ${stigData.requirements.length} requirements from stigviewer.com`);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: true,\n                ...stigData,\n                source: 'stigviewer',\n                message: `Successfully imported ${stigData.requirements.length} requirements from stigviewer.com`\n            });\n        } catch (fetchError) {\n            console.error('‚ùå Error fetching from stigviewer.com:', fetchError.message);\n            // Return error with instructions for manual upload\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                stigId,\n                error: fetchError.message,\n                message: 'Failed to fetch from stigviewer.com. Please upload STIG manually.',\n                instructions: {\n                    step1: 'Download STIG XML from DISA Cyber Exchange: https://public.cyber.mil/stigs/downloads/',\n                    step2: 'Or download from STIGViewer: https://stigviewer.com/stigs',\n                    step3: 'Upload the XCCDF XML file using the manual upload option'\n                }\n            }, {\n                status: 503\n            });\n        }\n    } catch (error) {\n        console.error('‚ùå Error in STIG import:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: error.message,\n            message: 'An error occurred while importing STIG'\n        }, {\n            status: 500\n        });\n    }\n}\n/**\r\n * POST - Manual STIG upload (XML file)\r\n * Body: FormData with 'file' field containing XCCDF XML\r\n */ async function POST(request) {\n    try {\n        const formData = await request.formData();\n        const file = formData.get('file');\n        if (!file) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'No file provided'\n            }, {\n                status: 400\n            });\n        }\n        // Validate file type\n        const fileName = file.name.toLowerCase();\n        if (!fileName.endsWith('.xml') && !fileName.endsWith('.xccdf')) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Invalid file type. Please upload an XCCDF XML file.'\n            }, {\n                status: 400\n            });\n        }\n        console.log(`üìÅ Processing manual STIG upload: ${file.name}`);\n        // Read file content\n        const xmlContent = await file.text();\n        // Parse XCCDF XML\n        const stigData = parseXccdfXml(xmlContent, file.name);\n        if (stigData.requirements.length === 0) {\n            throw new Error('No requirements found in XML file. Please ensure this is a valid XCCDF STIG file.');\n        }\n        console.log(`‚úÖ Successfully parsed ${stigData.requirements.length} requirements from manual upload`);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            ...stigData,\n            source: 'manual',\n            message: `Successfully imported ${stigData.requirements.length} requirements from ${file.name}`\n        });\n    } catch (error) {\n        console.error('‚ùå Error processing manual upload:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: error.message,\n            message: 'Failed to parse STIG file. Please ensure this is a valid XCCDF XML file.'\n        }, {\n            status: 500\n        });\n    }\n}\n/**\r\n * Fetch detailed requirement page from stigviewer.com\r\n * Returns check and fix text for a specific vulnerability\r\n */ async function fetchRequirementDetails(stigId, vulnId) {\n    try {\n        const agent = new (https__WEBPACK_IMPORTED_MODULE_1___default().Agent)({\n            rejectUnauthorized: false\n        });\n        const url = `https://stigviewer.com/stig/${stigId}/requirement/${vulnId}`;\n        const response = await fetch(url, {\n            headers: {\n                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n            },\n            // @ts-ignore\n            agent,\n            signal: AbortSignal.timeout(10000)\n        });\n        if (!response.ok) {\n            throw new Error(`HTTP ${response.status}`);\n        }\n        const html = await response.text();\n        // Extract check text\n        const checkMatch = html.match(/<div[^>]*(?:id|class)=\"[^\"]*check[^\"]*\"[^>]*>([\\s\\S]*?)<\\/div>/i) || html.match(/Check Text[:\\s]*<[^>]*>([\\s\\S]*?)<\\/(?:div|pre|p)>/i) || html.match(/<pre[^>]*>([\\s\\S]*?)<\\/pre>/i);\n        const checkText = checkMatch ? checkMatch[1].replace(/<[^>]+>/g, '').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&').replace(/&quot;/g, '\"').replace(/\\s+/g, ' ').trim() : 'Review the system configuration to verify compliance with the security requirement.';\n        // Extract fix text  \n        const fixMatch = html.match(/<div[^>]*(?:id|class)=\"[^\"]*fix[^\"]*\"[^>]*>([\\s\\S]*?)<\\/div>/i) || html.match(/Fix Text[:\\s]*<[^>]*>([\\s\\S]*?)<\\/(?:div|pre|p)>/i);\n        const fixText = fixMatch ? fixMatch[1].replace(/<[^>]+>/g, '').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&').replace(/&quot;/g, '\"').replace(/\\s+/g, ' ').trim() : 'Configure the system to meet the security requirement as specified in the STIG documentation.';\n        return {\n            checkText,\n            fixText\n        };\n    } catch (error) {\n        // Return defaults if fetch fails\n        return {\n            checkText: 'Review the system configuration to verify compliance with the security requirement. Detailed check procedure available in the full STIG documentation.',\n            fixText: 'Configure the system to meet the security requirement. Detailed fix procedure available in the full STIG documentation.'\n        };\n    }\n}\n/**\r\n * Parse stig viewer.com JSON API response\r\n * JSON format has complete data including severity for each requirement\r\n */ function parseStigViewerJson(jsonData, stigId) {\n    const requirements = [];\n    try {\n        const stig = jsonData.stig || jsonData;\n        const stigName = stig.title || stigId;\n        const version = stig.version || 'Unknown';\n        const releaseDate = stig.date || new Date().toISOString().split('T')[0];\n        console.log(`üìã Parsing JSON: ${stigName}, Version: ${version}, Release: ${releaseDate}`);\n        const findings = stig.findings || {};\n        const vulnIds = Object.keys(findings);\n        console.log(`üîç Found ${vulnIds.length} requirements in JSON`);\n        vulnIds.forEach((vulnId)=>{\n            const finding = findings[vulnId];\n            if (!finding) return;\n            // Extract severity from finding\n            // JSON might have severity as \"high\", \"medium\", \"low\" or \"CAT I\", \"CAT II\", \"CAT III\"\n            let severity = 'medium';\n            const sevText = (finding.severity || finding.cat || 'medium').toString().toLowerCase();\n            if (sevText.includes('high') || sevText.includes('cat i') || sevText === 'i' || sevText === '1') {\n                severity = 'high';\n            } else if (sevText.includes('low') || sevText.includes('cat iii') || sevText === 'iii' || sevText === '3') {\n                severity = 'low';\n            } else {\n                severity = 'medium';\n            }\n            requirements.push({\n                vulnId,\n                ruleId: finding.ruleId || finding.rule_id || finding.ruleid || `${vulnId}-rule`,\n                severity,\n                title: finding.title || finding.ruleTitle || finding.ruletitle || `Requirement ${vulnId}`,\n                description: finding.discussion || finding.description || finding.title || '',\n                checkText: finding.checktext || finding.checkText || finding.check_text || finding.check || 'Review system configuration per STIG guidance.',\n                fixText: finding.fixtext || finding.fixText || finding.fix_text || finding.fix || 'Configure system per STIG guidance.',\n                cci: finding.cci || finding.ccis || [\n                    'CCI-000366'\n                ],\n                nistControls: finding.nistControls || finding.nist || []\n            });\n        });\n        console.log(`‚úÖ Successfully parsed ${requirements.length} requirements from JSON`);\n        // Log severity distribution\n        const severityDist = {};\n        requirements.forEach((req)=>{\n            severityDist[req.severity] = (severityDist[req.severity] || 0) + 1;\n        });\n        console.log(`üìä JSON Severity Distribution:`, severityDist);\n        return {\n            stigId,\n            stigName,\n            version,\n            releaseDate,\n            requirements,\n            totalRequirements: requirements.length\n        };\n    } catch (error) {\n        console.error('Error parsing stigviewer.com JSON:', error);\n        throw new Error(`Failed to parse stigviewer.com JSON: ${error.message}`);\n    }\n}\n/**\r\n * Parse stigviewer.com HTML to extract STIG requirements\r\n * Fetches full requirement details including check and fix text\r\n */ async function parseStigViewerHtml(html, stigId) {\n    const requirements = [];\n    try {\n        // Extract STIG metadata from page title and headers\n        const titleMatch = html.match(/<title>([^<]+)<\\/title>/i);\n        const stigName = titleMatch ? titleMatch[1].replace(' | STIGViewer', '').trim() : stigId;\n        // Extract version from page\n        const versionMatch = html.match(/Version[:\\s]+([VvRr\\d.]+)/i) || html.match(/class=\"[^\"]*version[^\"]*\"[^>]*>([^<]+)</i);\n        const version = versionMatch ? versionMatch[1].trim() : 'Unknown';\n        // Extract release date\n        const dateMatch = html.match(/Release[:\\s]+(\\d{1,2}\\s+\\w+\\s+\\d{4})/i) || html.match(/Date[:\\s]+(\\d{4}-\\d{2}-\\d{2})/i) || html.match(/(\\d{4}-\\d{2}-\\d{2})/);\n        const releaseDate = dateMatch ? dateMatch[1] : new Date().toISOString().split('T')[0];\n        console.log(`üìã Parsing STIG: ${stigName}, Version: ${version}, Release: ${releaseDate}`);\n        // Method 1: Extract complete requirement entries with all details\n        // stigviewer.com has links like: href=\"/stig/{stigId}/requirement/V-#####\"\n        // Pattern to match entire requirement sections with severity info\n        const reqSectionPattern = /(?:CAT\\s+(I{1,3})|severity[^>]*?(high|medium|low))[^V]*(V-\\d+)[^<]*<a[^>]*href=\"[^\"]*\\/requirement\\/\\3\"[^>]*>([^<]+)</gi;\n        let match;\n        const detailedReqs = [];\n        while((match = reqSectionPattern.exec(html)) !== null){\n            const severity = match[1] || match[2]; // CAT I/II/III or high/medium/low\n            const vulnId = match[3];\n            const title = match[4].trim();\n            detailedReqs.push({\n                vulnId,\n                severity,\n                title\n            });\n        }\n        console.log(`üîç Method 1: Found ${detailedReqs.length} requirements with severity info`);\n        // Method 2: Extract from table rows if available\n        const tableRows = [];\n        const rowPattern = /<tr[^>]*>([\\s\\S]*?)<\\/tr>/gi;\n        let rowMatch;\n        while((rowMatch = rowPattern.exec(html)) !== null){\n            const rowHtml = rowMatch[1];\n            // Check if this row has a vuln ID\n            const vulnMatch = rowHtml.match(/>(V-\\d+)</);\n            if (!vulnMatch) continue;\n            const vulnId = vulnMatch[1];\n            // Extract severity from this row\n            const catMatch = rowHtml.match(/CAT\\s+(I{1,3})/i);\n            const sevMatch = rowHtml.match(/>(high|medium|low)</i);\n            const severity = catMatch ? catMatch[1] : sevMatch ? sevMatch[1] : 'II';\n            // Extract title\n            const titleMatch = rowHtml.match(/<a[^>]*href=\"[^\"]*\\/requirement\\/[^\"]*\"[^>]*>([^<]+)</i);\n            const title = titleMatch ? titleMatch[1].trim() : `Requirement ${vulnId}`;\n            tableRows.push({\n                vulnId,\n                severity,\n                title\n            });\n        }\n        console.log(`üîç Method 2: Found ${tableRows.length} requirements from table rows`);\n        // Method 3: Fallback - extract all V-#### with default data\n        const vulnIdPattern = /V-\\d+/g;\n        const allVulnIds = [\n            ...new Set(html.match(vulnIdPattern) || [])\n        ];\n        console.log(`üîç Method 3: Found ${allVulnIds.length} total V-#### patterns`);\n        // Use the method that found the most requirements\n        let reqData = [];\n        if (detailedReqs.length >= tableRows.length && detailedReqs.length > 0) {\n            reqData = detailedReqs;\n            console.log(`‚úì Using Method 1: ${detailedReqs.length} requirements with severity`);\n        } else if (tableRows.length > 0) {\n            reqData = tableRows;\n            console.log(`‚úì Using Method 2: ${tableRows.length} requirements from tables`);\n        } else {\n            // Fallback: create basic entries\n            reqData = allVulnIds.map((vulnId)=>({\n                    vulnId,\n                    severity: 'II',\n                    title: `${stigName} - ${vulnId}`\n                }));\n            console.log(`‚úì Using Method 3: ${allVulnIds.length} basic requirements`);\n        }\n        console.log(`üìù Processing ${reqData.length} requirements...`);\n        let requirementCount = 0;\n        for (const req of reqData){\n            const { vulnId, severity: rawSeverity, title } = req;\n            // Extract Rule ID if available\n            const rulePattern = new RegExp(`${vulnId}[^S]*?(SV-\\\\d+r\\\\d+_rule)`, 'i');\n            const ruleMatch = html.match(rulePattern);\n            const ruleId = ruleMatch ? ruleMatch[1] : `${vulnId}-rule`;\n            // Normalize severity\n            let severity = 'medium';\n            const sevText = rawSeverity.toLowerCase();\n            if (sevText.includes('i') && !sevText.includes('ii') || sevText === 'high' || sevText === '1') {\n                severity = 'high';\n            } else if (sevText.includes('iii') || sevText === 'low' || sevText === '3') {\n                severity = 'low';\n            } else {\n                severity = 'medium';\n            }\n            // Description defaults to title\n            const description = title;\n            // Extract CCI references - search for this vulnId in HTML\n            const vulnContext = html.substring(Math.max(0, html.indexOf(vulnId) - 300), Math.min(html.length, html.indexOf(vulnId) + 300));\n            const cciMatches = vulnContext.match(/CCI-\\d+/g);\n            const cci = cciMatches && cciMatches.length > 0 ? [\n                ...new Set(cciMatches)\n            ] : [\n                'CCI-000366'\n            ];\n            // Default check and fix text with note about full documentation\n            const checkText = `Review the system configuration to verify compliance with ${vulnId}. Refer to the full STIG documentation for detailed check procedures.`;\n            const fixText = `Configure the system to meet the requirements specified in ${vulnId}. Refer to the full STIG documentation for detailed fix procedures.`;\n            // Extract NIST controls from context\n            const nistMatches = vulnContext.match(/([A-Z]{2}-\\d+(?:\\s*\\([a-z0-9]+\\))?)/g);\n            const nistControls = nistMatches ? [\n                ...new Set(nistMatches)\n            ] : [];\n            requirements.push({\n                vulnId,\n                ruleId,\n                severity,\n                title,\n                description,\n                checkText,\n                fixText,\n                cci,\n                nistControls\n            });\n            requirementCount++;\n        }\n        console.log(`‚úÖ Successfully parsed ${requirementCount} requirements from HTML`);\n        // Log severity distribution\n        const severityDist = {};\n        requirements.forEach((req)=>{\n            severityDist[req.severity] = (severityDist[req.severity] || 0) + 1;\n        });\n        console.log(`üìä API Severity Distribution:`, severityDist);\n        // If we didn't find any requirements in table format, try alternative parsing\n        if (requirements.length === 0) {\n            console.warn('‚ö†Ô∏è No requirements found in table format, trying alternative parsing...');\n            // Try to find all V-#### patterns and create basic requirements\n            const vulnIdPattern = /V-\\d+/g;\n            const vulnIds = [\n                ...new Set(html.match(vulnIdPattern) || [])\n            ];\n            vulnIds.forEach((vulnId, index)=>{\n                requirements.push({\n                    vulnId,\n                    ruleId: `${vulnId}-rule`,\n                    severity: 'medium',\n                    title: `${stigName} - ${vulnId}`,\n                    description: `Security requirement ${vulnId} from ${stigName}`,\n                    checkText: 'Review the system configuration to verify compliance. Detailed check procedure available in the full STIG documentation.',\n                    fixText: 'Configure the system to meet the security requirement. Detailed fix procedure available in the full STIG documentation.',\n                    cci: [\n                        'CCI-000366'\n                    ],\n                    nistControls: []\n                });\n            });\n            console.log(`üìù Created ${requirements.length} basic requirements from Vuln IDs`);\n        }\n        return {\n            stigId,\n            stigName,\n            version,\n            releaseDate,\n            requirements,\n            totalRequirements: requirements.length\n        };\n    } catch (error) {\n        console.error('Error parsing stigviewer.com HTML:', error);\n        throw new Error(`Failed to parse stigviewer.com page: ${error.message}`);\n    }\n}\n/**\r\n * Parse XCCDF XML file to extract STIG requirements\r\n */ function parseXccdfXml(xmlContent, fileName) {\n    const requirements = [];\n    try {\n        // Extract STIG ID from filename\n        const stigId = fileName.replace(/\\.xml|\\.xccdf/gi, '').toLowerCase().replace(/\\s+/g, '_');\n        // Parse XML using regex (simplified - in production use a proper XML parser)\n        // Extract Benchmark title\n        const titleMatch = xmlContent.match(/<title[^>]*>([^<]+)<\\/title>/i);\n        const stigName = titleMatch ? titleMatch[1].trim() : stigId;\n        // Extract version\n        const versionMatch = xmlContent.match(/<version[^>]*>([^<]+)<\\/version>/i) || xmlContent.match(/Version[:\\s]+([VvRr\\d.]+)/i);\n        const version = versionMatch ? versionMatch[1] : 'Unknown';\n        // Extract release date\n        const dateMatch = xmlContent.match(/release-date[^>]*>([^<]+)</i) || xmlContent.match(/(\\d{1,2}\\s+\\w+\\s+\\d{4})/);\n        const releaseDate = dateMatch ? dateMatch[1] : new Date().toISOString().split('T')[0];\n        // Extract all Group elements (requirements)\n        const groupPattern = /<Group[^>]*id=\"([^\"]+)\"[^>]*>([\\s\\S]*?)<\\/Group>/gi;\n        let groupMatch;\n        while((groupMatch = groupPattern.exec(xmlContent)) !== null){\n            const groupId = groupMatch[1];\n            const groupContent = groupMatch[2];\n            // Extract Rule from Group\n            const ruleMatch = groupContent.match(/<Rule[^>]*id=\"([^\"]+)\"[^>]*severity=\"([^\"]+)\"[^>]*>([\\s\\S]*?)<\\/Rule>/i);\n            if (ruleMatch) {\n                const ruleId = ruleMatch[1];\n                const severity = ruleMatch[2].toLowerCase();\n                const ruleContent = ruleMatch[3];\n                // Extract title\n                const titleMatch = ruleContent.match(/<title[^>]*>([^<]+)<\\/title>/i);\n                const title = titleMatch ? titleMatch[1].trim() : `Requirement ${groupId}`;\n                // Extract description\n                const descMatch = ruleContent.match(/<description[^>]*>([\\s\\S]*?)<\\/description>/i);\n                const description = descMatch ? stripHtml(descMatch[1]) : '';\n                // Extract check text\n                const checkMatch = ruleContent.match(/<check-content[^>]*>([\\s\\S]*?)<\\/check-content>/i);\n                const checkText = checkMatch ? stripHtml(checkMatch[1]) : 'No check procedure provided';\n                // Extract fix text\n                const fixMatch = ruleContent.match(/<fixtext[^>]*>([\\s\\S]*?)<\\/fixtext>/i);\n                const fixText = fixMatch ? stripHtml(fixMatch[1]) : 'No fix procedure provided';\n                // Extract CCI references\n                const cciPattern = /<ident[^>]*system=\"http:\\/\\/cyber\\.mil\\/legacy\\/cci\"[^>]*>([^<]+)<\\/ident>/gi;\n                const cci = [];\n                let cciMatch;\n                while((cciMatch = cciPattern.exec(ruleContent)) !== null){\n                    cci.push(cciMatch[1]);\n                }\n                // Extract NIST controls\n                const nistPattern = /<reference[^>]*>([\\s\\S]*?)NIST[^<]*([A-Z]{2}-\\d+(?:\\s*\\(\\d+\\))?(?:\\s*[a-z])?)[^<]*([\\s\\S]*?)<\\/reference>/gi;\n                const nistControls = [];\n                let nistMatch;\n                while((nistMatch = nistPattern.exec(ruleContent)) !== null){\n                    const control = nistMatch[2].trim();\n                    if (control && !nistControls.includes(control)) {\n                        nistControls.push(control);\n                    }\n                }\n                requirements.push({\n                    vulnId: groupId,\n                    ruleId,\n                    severity,\n                    title,\n                    description: description.substring(0, 500),\n                    checkText: checkText.substring(0, 1000),\n                    fixText: fixText.substring(0, 1000),\n                    cci: cci.length > 0 ? cci : [\n                        'CCI-000000'\n                    ],\n                    nistControls: nistControls.length > 0 ? nistControls : [\n                        'AC-1'\n                    ]\n                });\n            }\n        }\n        if (requirements.length === 0) {\n            throw new Error('No requirements found in XML. The file may not be a valid XCCDF STIG file.');\n        }\n        return {\n            stigId,\n            stigName,\n            version,\n            releaseDate,\n            requirements,\n            totalRequirements: requirements.length\n        };\n    } catch (error) {\n        console.error('Error parsing XCCDF XML:', error);\n        throw new Error(`Failed to parse XCCDF XML: ${error.message}`);\n    }\n}\n/**\r\n * Strip HTML tags and decode entities\r\n */ function stripHtml(html) {\n    return html.replace(/<[^>]+>/g, '') // Remove HTML tags\n    .replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&').replace(/&quot;/g, '\"').replace(/&#39;/g, \"'\").replace(/&nbsp;/g, ' ').replace(/\\s+/g, ' ') // Normalize whitespace\n    .trim();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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NEJBO1FBQzFDLE1BQU0sSUFBSTBCLE1BQU0sQ0FBQywyQkFBMkIsRUFBRTFCLE1BQU11QixPQUFPLEVBQUU7SUFDL0Q7QUFDRjtBQUVBOztDQUVDLEdBQ0QsU0FBUytHLFVBQVUxRyxJQUFZO0lBQzdCLE9BQU9BLEtBQ0pzQixPQUFPLENBQUMsWUFBWSxJQUFJLG1CQUFtQjtLQUMzQ0EsT0FBTyxDQUFDLFNBQVMsS0FDakJBLE9BQU8sQ0FBQyxTQUFTLEtBQ2pCQSxPQUFPLENBQUMsVUFBVSxLQUNsQkEsT0FBTyxDQUFDLFdBQVcsS0FDbkJBLE9BQU8sQ0FBQyxVQUFVLEtBQ2xCQSxPQUFPLENBQUMsV0FBVyxLQUNuQkEsT0FBTyxDQUFDLFFBQVEsS0FBSyx1QkFBdUI7S0FDNUNDLElBQUk7QUFDVCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxyb25uaVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2plY3RzXFxTUlRNLXRvb2xcXGFwcFxcYXBpXFxpbXBvcnQtc3RpZ1xccm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcclxuaW1wb3J0IGh0dHBzIGZyb20gJ2h0dHBzJztcclxuXHJcbi8qKlxyXG4gKiBTVElHIEltcG9ydCBBUElcclxuICogRmV0Y2hlcyBTVElHIHJlcXVpcmVtZW50cyBmcm9tIHN0aWd2aWV3ZXIuY29tIG9yIGFjY2VwdHMgbWFudWFsIHVwbG9hZFxyXG4gKiBcclxuICogTm90ZTogc3RpZ3ZpZXdlci5jb20gaGFzIFNTTCBjZXJ0aWZpY2F0ZSBpc3N1ZXMsIHNvIHdlIGJ5cGFzcyBjZXJ0IHZhbGlkYXRpb25cclxuICovXHJcblxyXG5pbnRlcmZhY2UgU3RpZ1JlcXVpcmVtZW50IHtcclxuICB2dWxuSWQ6IHN0cmluZztcclxuICBydWxlSWQ6IHN0cmluZztcclxuICBzZXZlcml0eTogJ2hpZ2gnIHwgJ21lZGl1bScgfCAnbG93JztcclxuICB0aXRsZTogc3RyaW5nO1xyXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XHJcbiAgY2hlY2tUZXh0OiBzdHJpbmc7XHJcbiAgZml4VGV4dDogc3RyaW5nO1xyXG4gIGNjaTogc3RyaW5nW107XHJcbiAgbmlzdENvbnRyb2xzOiBzdHJpbmdbXTtcclxufVxyXG5cclxuaW50ZXJmYWNlIFN0aWdJbXBvcnRSZXN1bHQge1xyXG4gIHN1Y2Nlc3M6IGJvb2xlYW47XHJcbiAgc3RpZ0lkOiBzdHJpbmc7XHJcbiAgc3RpZ05hbWU6IHN0cmluZztcclxuICB2ZXJzaW9uOiBzdHJpbmc7XHJcbiAgcmVsZWFzZURhdGU6IHN0cmluZztcclxuICByZXF1aXJlbWVudHM6IFN0aWdSZXF1aXJlbWVudFtdO1xyXG4gIHRvdGFsUmVxdWlyZW1lbnRzOiBudW1iZXI7XHJcbiAgc291cmNlOiAnc3RpZ3ZpZXdlcicgfCAnbWFudWFsJyB8ICdjYWNoZSc7XHJcbiAgbWVzc2FnZT86IHN0cmluZztcclxuICBlcnJvcj86IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIEdFVCAtIEZldGNoIFNUSUcgZnJvbSBzdGlndmlld2VyLmNvbVxyXG4gKiBRdWVyeSBwYXJhbXM6IHN0aWdJZCAoZS5nLiwgJ2FwYWNoZV9zZXJ2ZXJfMi40X3VuaXgnKVxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCB7IHNlYXJjaFBhcmFtcyB9ID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XHJcbiAgICBjb25zdCBzdGlnSWQgPSBzZWFyY2hQYXJhbXMuZ2V0KCdzdGlnSWQnKTtcclxuXHJcbiAgICBpZiAoIXN0aWdJZCkge1xyXG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXHJcbiAgICAgICAgeyBlcnJvcjogJ3N0aWdJZCBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQnIH0sXHJcbiAgICAgICAgeyBzdGF0dXM6IDQwMCB9XHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc29sZS5sb2coYPCflI0gRmV0Y2hpbmcgU1RJRyBmcm9tIHN0aWd2aWV3ZXIuY29tOiAke3N0aWdJZH1gKTtcclxuXHJcbiAgICAvLyBUcnkgSlNPTiBBUEkgZmlyc3QgKGhhcyBjb21wbGV0ZSBzZXZlcml0eSBkYXRhKVxyXG4gICAgY29uc3QganNvblVybCA9IGBodHRwczovL3N0aWd2aWV3ZXIuY29tL3N0aWdzLyR7c3RpZ0lkfS9qc29uYDtcclxuICAgIGNvbnN0IGh0bWxVcmwgPSBgaHR0cHM6Ly9zdGlndmlld2VyLmNvbS9zdGlncy8ke3N0aWdJZH0vYDtcclxuICAgIFxyXG4gICAgLy8gQ3JlYXRlIGN1c3RvbSBhZ2VudCB0byBieXBhc3MgU1NMIGNlcnRpZmljYXRlIHZhbGlkYXRpb25cclxuICAgIGNvbnN0IGFnZW50ID0gbmV3IGh0dHBzLkFnZW50KHtcclxuICAgICAgcmVqZWN0VW5hdXRob3JpemVkOiBmYWxzZVxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIEF0dGVtcHQgSlNPTiBBUEkgZmlyc3RcclxuICAgICAgY29uc29sZS5sb2coYPCfk6UgQXR0ZW1wdGluZyBKU09OIEFQSS4uLmApO1xyXG4gICAgICBjb25zdCBqc29uUmVzcG9uc2UgPSBhd2FpdCBmZXRjaChqc29uVXJsLCB7XHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgJ1VzZXItQWdlbnQnOiAnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2JyxcclxuICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgfSxcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgYWdlbnQsXHJcbiAgICAgICAgc2lnbmFsOiBBYm9ydFNpZ25hbC50aW1lb3V0KDE1MDAwKSxcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBpZiAoanNvblJlc3BvbnNlLm9rKSB7XHJcbiAgICAgICAgY29uc3QganNvbkRhdGEgPSBhd2FpdCBqc29uUmVzcG9uc2UuanNvbigpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGDinIUgSlNPTiBBUEkgc3VjY2Vzc2Z1bGApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHN0aWdEYXRhID0gcGFyc2VTdGlnVmlld2VySnNvbihqc29uRGF0YSwgc3RpZ0lkKTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoc3RpZ0RhdGEucmVxdWlyZW1lbnRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgICAgIC4uLnN0aWdEYXRhLFxyXG4gICAgICAgICAgICBzb3VyY2U6ICdzdGlndmlld2VyJyxcclxuICAgICAgICAgICAgbWVzc2FnZTogYFN1Y2Nlc3NmdWxseSBpbXBvcnRlZCAke3N0aWdEYXRhLnJlcXVpcmVtZW50cy5sZW5ndGh9IHJlcXVpcmVtZW50cyBmcm9tIEpTT04gQVBJYFxyXG4gICAgICAgICAgfSBhcyBTdGlnSW1wb3J0UmVzdWx0KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGpzb25FcnJvcjogYW55KSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGDimqDvuI8gSlNPTiBBUEkgZmFpbGVkOiAke2pzb25FcnJvci5tZXNzYWdlfSwgdHJ5aW5nIEhUTUwuLi5gKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gRmFsbGJhY2sgdG8gSFRNTCBwYXJzaW5nXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zb2xlLmxvZyhg8J+TpSBBdHRlbXB0aW5nIEhUTUwgcGFyc2luZy4uLmApO1xyXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGh0bWxVcmwsIHtcclxuICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAnVXNlci1BZ2VudCc6ICdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYnLFxyXG4gICAgICAgICAgJ0FjY2VwdCc6ICd0ZXh0L2h0bWwnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGFnZW50LFxyXG4gICAgICAgIHNpZ25hbDogQWJvcnRTaWduYWwudGltZW91dCgxNTAwMCksXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSFRUUCAke3Jlc3BvbnNlLnN0YXR1c306ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcclxuXHJcbiAgICAgIC8vIFBhcnNlIFNUSUcgaW5mb3JtYXRpb24gZnJvbSBIVE1MXHJcbiAgICAgIGNvbnN0IHN0aWdEYXRhID0gYXdhaXQgcGFyc2VTdGlnVmlld2VySHRtbChodG1sLCBzdGlnSWQpO1xyXG5cclxuICAgICAgaWYgKHN0aWdEYXRhLnJlcXVpcmVtZW50cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHJlcXVpcmVtZW50cyBmb3VuZCBpbiBTVElHIGRhdGEnKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc29sZS5sb2coYOKchSBTdWNjZXNzZnVsbHkgZmV0Y2hlZCAke3N0aWdEYXRhLnJlcXVpcmVtZW50cy5sZW5ndGh9IHJlcXVpcmVtZW50cyBmcm9tIHN0aWd2aWV3ZXIuY29tYCk7XHJcblxyXG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xyXG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgLi4uc3RpZ0RhdGEsXHJcbiAgICAgICAgc291cmNlOiAnc3RpZ3ZpZXdlcicsXHJcbiAgICAgICAgbWVzc2FnZTogYFN1Y2Nlc3NmdWxseSBpbXBvcnRlZCAke3N0aWdEYXRhLnJlcXVpcmVtZW50cy5sZW5ndGh9IHJlcXVpcmVtZW50cyBmcm9tIHN0aWd2aWV3ZXIuY29tYFxyXG4gICAgICB9IGFzIFN0aWdJbXBvcnRSZXN1bHQpO1xyXG5cclxuICAgIH0gY2F0Y2ggKGZldGNoRXJyb3I6IGFueSkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3IgZmV0Y2hpbmcgZnJvbSBzdGlndmlld2VyLmNvbTonLCBmZXRjaEVycm9yLm1lc3NhZ2UpO1xyXG5cclxuICAgICAgLy8gUmV0dXJuIGVycm9yIHdpdGggaW5zdHJ1Y3Rpb25zIGZvciBtYW51YWwgdXBsb2FkXHJcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XHJcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgc3RpZ0lkLFxyXG4gICAgICAgIGVycm9yOiBmZXRjaEVycm9yLm1lc3NhZ2UsXHJcbiAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBmZXRjaCBmcm9tIHN0aWd2aWV3ZXIuY29tLiBQbGVhc2UgdXBsb2FkIFNUSUcgbWFudWFsbHkuJyxcclxuICAgICAgICBpbnN0cnVjdGlvbnM6IHtcclxuICAgICAgICAgIHN0ZXAxOiAnRG93bmxvYWQgU1RJRyBYTUwgZnJvbSBESVNBIEN5YmVyIEV4Y2hhbmdlOiBodHRwczovL3B1YmxpYy5jeWJlci5taWwvc3RpZ3MvZG93bmxvYWRzLycsXHJcbiAgICAgICAgICBzdGVwMjogJ09yIGRvd25sb2FkIGZyb20gU1RJR1ZpZXdlcjogaHR0cHM6Ly9zdGlndmlld2VyLmNvbS9zdGlncycsXHJcbiAgICAgICAgICBzdGVwMzogJ1VwbG9hZCB0aGUgWENDREYgWE1MIGZpbGUgdXNpbmcgdGhlIG1hbnVhbCB1cGxvYWQgb3B0aW9uJ1xyXG4gICAgICAgIH1cclxuICAgICAgfSwgeyBzdGF0dXM6IDUwMyB9KTtcclxuICAgIH1cclxuXHJcbiAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xyXG4gICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIGluIFNUSUcgaW1wb3J0OicsIGVycm9yKTtcclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgeyBcclxuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICBlcnJvcjogZXJyb3IubWVzc2FnZSxcclxuICAgICAgICBtZXNzYWdlOiAnQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgaW1wb3J0aW5nIFNUSUcnXHJcbiAgICAgIH0sXHJcbiAgICAgIHsgc3RhdHVzOiA1MDAgfVxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQT1NUIC0gTWFudWFsIFNUSUcgdXBsb2FkIChYTUwgZmlsZSlcclxuICogQm9keTogRm9ybURhdGEgd2l0aCAnZmlsZScgZmllbGQgY29udGFpbmluZyBYQ0NERiBYTUxcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGZvcm1EYXRhID0gYXdhaXQgcmVxdWVzdC5mb3JtRGF0YSgpO1xyXG4gICAgY29uc3QgZmlsZSA9IGZvcm1EYXRhLmdldCgnZmlsZScpIGFzIEZpbGU7XHJcblxyXG4gICAgaWYgKCFmaWxlKSB7XHJcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgICB7IGVycm9yOiAnTm8gZmlsZSBwcm92aWRlZCcgfSxcclxuICAgICAgICB7IHN0YXR1czogNDAwIH1cclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBWYWxpZGF0ZSBmaWxlIHR5cGVcclxuICAgIGNvbnN0IGZpbGVOYW1lID0gZmlsZS5uYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICBpZiAoIWZpbGVOYW1lLmVuZHNXaXRoKCcueG1sJykgJiYgIWZpbGVOYW1lLmVuZHNXaXRoKCcueGNjZGYnKSkge1xyXG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXHJcbiAgICAgICAgeyBlcnJvcjogJ0ludmFsaWQgZmlsZSB0eXBlLiBQbGVhc2UgdXBsb2FkIGFuIFhDQ0RGIFhNTCBmaWxlLicgfSxcclxuICAgICAgICB7IHN0YXR1czogNDAwIH1cclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zb2xlLmxvZyhg8J+TgSBQcm9jZXNzaW5nIG1hbnVhbCBTVElHIHVwbG9hZDogJHtmaWxlLm5hbWV9YCk7XHJcblxyXG4gICAgLy8gUmVhZCBmaWxlIGNvbnRlbnRcclxuICAgIGNvbnN0IHhtbENvbnRlbnQgPSBhd2FpdCBmaWxlLnRleHQoKTtcclxuXHJcbiAgICAvLyBQYXJzZSBYQ0NERiBYTUxcclxuICAgIGNvbnN0IHN0aWdEYXRhID0gcGFyc2VYY2NkZlhtbCh4bWxDb250ZW50LCBmaWxlLm5hbWUpO1xyXG5cclxuICAgIGlmIChzdGlnRGF0YS5yZXF1aXJlbWVudHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gcmVxdWlyZW1lbnRzIGZvdW5kIGluIFhNTCBmaWxlLiBQbGVhc2UgZW5zdXJlIHRoaXMgaXMgYSB2YWxpZCBYQ0NERiBTVElHIGZpbGUuJyk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc29sZS5sb2coYOKchSBTdWNjZXNzZnVsbHkgcGFyc2VkICR7c3RpZ0RhdGEucmVxdWlyZW1lbnRzLmxlbmd0aH0gcmVxdWlyZW1lbnRzIGZyb20gbWFudWFsIHVwbG9hZGApO1xyXG5cclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XHJcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgIC4uLnN0aWdEYXRhLFxyXG4gICAgICBzb3VyY2U6ICdtYW51YWwnLFxyXG4gICAgICBtZXNzYWdlOiBgU3VjY2Vzc2Z1bGx5IGltcG9ydGVkICR7c3RpZ0RhdGEucmVxdWlyZW1lbnRzLmxlbmd0aH0gcmVxdWlyZW1lbnRzIGZyb20gJHtmaWxlLm5hbWV9YFxyXG4gICAgfSBhcyBTdGlnSW1wb3J0UmVzdWx0KTtcclxuXHJcbiAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xyXG4gICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIHByb2Nlc3NpbmcgbWFudWFsIHVwbG9hZDonLCBlcnJvcik7XHJcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXHJcbiAgICAgIHsgXHJcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgZXJyb3I6IGVycm9yLm1lc3NhZ2UsXHJcbiAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBwYXJzZSBTVElHIGZpbGUuIFBsZWFzZSBlbnN1cmUgdGhpcyBpcyBhIHZhbGlkIFhDQ0RGIFhNTCBmaWxlLidcclxuICAgICAgfSxcclxuICAgICAgeyBzdGF0dXM6IDUwMCB9XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEZldGNoIGRldGFpbGVkIHJlcXVpcmVtZW50IHBhZ2UgZnJvbSBzdGlndmlld2VyLmNvbVxyXG4gKiBSZXR1cm5zIGNoZWNrIGFuZCBmaXggdGV4dCBmb3IgYSBzcGVjaWZpYyB2dWxuZXJhYmlsaXR5XHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBmZXRjaFJlcXVpcmVtZW50RGV0YWlscyhzdGlnSWQ6IHN0cmluZywgdnVsbklkOiBzdHJpbmcpOiBQcm9taXNlPHtjaGVja1RleHQ6IHN0cmluZywgZml4VGV4dDogc3RyaW5nfT4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBhZ2VudCA9IG5ldyBodHRwcy5BZ2VudCh7IHJlamVjdFVuYXV0aG9yaXplZDogZmFsc2UgfSk7XHJcbiAgICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9zdGlndmlld2VyLmNvbS9zdGlnLyR7c3RpZ0lkfS9yZXF1aXJlbWVudC8ke3Z1bG5JZH1gO1xyXG4gICAgXHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwge1xyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ1VzZXItQWdlbnQnOiAnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2JyxcclxuICAgICAgfSxcclxuICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICBhZ2VudCxcclxuICAgICAgc2lnbmFsOiBBYm9ydFNpZ25hbC50aW1lb3V0KDEwMDAwKSxcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSFRUUCAke3Jlc3BvbnNlLnN0YXR1c31gKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcclxuICAgIFxyXG4gICAgLy8gRXh0cmFjdCBjaGVjayB0ZXh0XHJcbiAgICBjb25zdCBjaGVja01hdGNoID0gaHRtbC5tYXRjaCgvPGRpdltePl0qKD86aWR8Y2xhc3MpPVwiW15cIl0qY2hlY2tbXlwiXSpcIltePl0qPihbXFxzXFxTXSo/KTxcXC9kaXY+L2kpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICBodG1sLm1hdGNoKC9DaGVjayBUZXh0WzpcXHNdKjxbXj5dKj4oW1xcc1xcU10qPyk8XFwvKD86ZGl2fHByZXxwKT4vaSkgfHxcclxuICAgICAgICAgICAgICAgICAgICAgIGh0bWwubWF0Y2goLzxwcmVbXj5dKj4oW1xcc1xcU10qPyk8XFwvcHJlPi9pKTtcclxuICAgIFxyXG4gICAgY29uc3QgY2hlY2tUZXh0ID0gY2hlY2tNYXRjaCA/IFxyXG4gICAgICBjaGVja01hdGNoWzFdXHJcbiAgICAgICAgLnJlcGxhY2UoLzxbXj5dKz4vZywgJycpXHJcbiAgICAgICAgLnJlcGxhY2UoLyZsdDsvZywgJzwnKVxyXG4gICAgICAgIC5yZXBsYWNlKC8mZ3Q7L2csICc+JylcclxuICAgICAgICAucmVwbGFjZSgvJmFtcDsvZywgJyYnKVxyXG4gICAgICAgIC5yZXBsYWNlKC8mcXVvdDsvZywgJ1wiJylcclxuICAgICAgICAucmVwbGFjZSgvXFxzKy9nLCAnICcpXHJcbiAgICAgICAgLnRyaW0oKSA6IFxyXG4gICAgICAnUmV2aWV3IHRoZSBzeXN0ZW0gY29uZmlndXJhdGlvbiB0byB2ZXJpZnkgY29tcGxpYW5jZSB3aXRoIHRoZSBzZWN1cml0eSByZXF1aXJlbWVudC4nO1xyXG4gICAgXHJcbiAgICAvLyBFeHRyYWN0IGZpeCB0ZXh0ICBcclxuICAgIGNvbnN0IGZpeE1hdGNoID0gaHRtbC5tYXRjaCgvPGRpdltePl0qKD86aWR8Y2xhc3MpPVwiW15cIl0qZml4W15cIl0qXCJbXj5dKj4oW1xcc1xcU10qPyk8XFwvZGl2Pi9pKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgIGh0bWwubWF0Y2goL0ZpeCBUZXh0WzpcXHNdKjxbXj5dKj4oW1xcc1xcU10qPyk8XFwvKD86ZGl2fHByZXxwKT4vaSk7XHJcbiAgICBcclxuICAgIGNvbnN0IGZpeFRleHQgPSBmaXhNYXRjaCA/IFxyXG4gICAgICBmaXhNYXRjaFsxXVxyXG4gICAgICAgIC5yZXBsYWNlKC88W14+XSs+L2csICcnKVxyXG4gICAgICAgIC5yZXBsYWNlKC8mbHQ7L2csICc8JylcclxuICAgICAgICAucmVwbGFjZSgvJmd0Oy9nLCAnPicpXHJcbiAgICAgICAgLnJlcGxhY2UoLyZhbXA7L2csICcmJylcclxuICAgICAgICAucmVwbGFjZSgvJnF1b3Q7L2csICdcIicpXHJcbiAgICAgICAgLnJlcGxhY2UoL1xccysvZywgJyAnKVxyXG4gICAgICAgIC50cmltKCkgOiBcclxuICAgICAgJ0NvbmZpZ3VyZSB0aGUgc3lzdGVtIHRvIG1lZXQgdGhlIHNlY3VyaXR5IHJlcXVpcmVtZW50IGFzIHNwZWNpZmllZCBpbiB0aGUgU1RJRyBkb2N1bWVudGF0aW9uLic7XHJcbiAgICBcclxuICAgIHJldHVybiB7IGNoZWNrVGV4dCwgZml4VGV4dCB9O1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAvLyBSZXR1cm4gZGVmYXVsdHMgaWYgZmV0Y2ggZmFpbHNcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGNoZWNrVGV4dDogJ1JldmlldyB0aGUgc3lzdGVtIGNvbmZpZ3VyYXRpb24gdG8gdmVyaWZ5IGNvbXBsaWFuY2Ugd2l0aCB0aGUgc2VjdXJpdHkgcmVxdWlyZW1lbnQuIERldGFpbGVkIGNoZWNrIHByb2NlZHVyZSBhdmFpbGFibGUgaW4gdGhlIGZ1bGwgU1RJRyBkb2N1bWVudGF0aW9uLicsXHJcbiAgICAgIGZpeFRleHQ6ICdDb25maWd1cmUgdGhlIHN5c3RlbSB0byBtZWV0IHRoZSBzZWN1cml0eSByZXF1aXJlbWVudC4gRGV0YWlsZWQgZml4IHByb2NlZHVyZSBhdmFpbGFibGUgaW4gdGhlIGZ1bGwgU1RJRyBkb2N1bWVudGF0aW9uLidcclxuICAgIH07XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogUGFyc2Ugc3RpZyB2aWV3ZXIuY29tIEpTT04gQVBJIHJlc3BvbnNlXHJcbiAqIEpTT04gZm9ybWF0IGhhcyBjb21wbGV0ZSBkYXRhIGluY2x1ZGluZyBzZXZlcml0eSBmb3IgZWFjaCByZXF1aXJlbWVudFxyXG4gKi9cclxuZnVuY3Rpb24gcGFyc2VTdGlnVmlld2VySnNvbihqc29uRGF0YTogYW55LCBzdGlnSWQ6IHN0cmluZyk6IE9taXQ8U3RpZ0ltcG9ydFJlc3VsdCwgJ3N1Y2Nlc3MnIHwgJ3NvdXJjZScgfCAnbWVzc2FnZSc+IHtcclxuICBjb25zdCByZXF1aXJlbWVudHM6IFN0aWdSZXF1aXJlbWVudFtdID0gW107XHJcblxyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBzdGlnID0ganNvbkRhdGEuc3RpZyB8fCBqc29uRGF0YTtcclxuICAgIGNvbnN0IHN0aWdOYW1lID0gc3RpZy50aXRsZSB8fCBzdGlnSWQ7XHJcbiAgICBjb25zdCB2ZXJzaW9uID0gc3RpZy52ZXJzaW9uIHx8ICdVbmtub3duJztcclxuICAgIGNvbnN0IHJlbGVhc2VEYXRlID0gc3RpZy5kYXRlIHx8IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdO1xyXG4gICAgXHJcbiAgICBjb25zb2xlLmxvZyhg8J+TiyBQYXJzaW5nIEpTT046ICR7c3RpZ05hbWV9LCBWZXJzaW9uOiAke3ZlcnNpb259LCBSZWxlYXNlOiAke3JlbGVhc2VEYXRlfWApO1xyXG5cclxuICAgIGNvbnN0IGZpbmRpbmdzID0gc3RpZy5maW5kaW5ncyB8fCB7fTtcclxuICAgIGNvbnN0IHZ1bG5JZHMgPSBPYmplY3Qua2V5cyhmaW5kaW5ncyk7XHJcbiAgICBcclxuICAgIGNvbnNvbGUubG9nKGDwn5SNIEZvdW5kICR7dnVsbklkcy5sZW5ndGh9IHJlcXVpcmVtZW50cyBpbiBKU09OYCk7XHJcblxyXG4gICAgdnVsbklkcy5mb3JFYWNoKCh2dWxuSWQpID0+IHtcclxuICAgICAgY29uc3QgZmluZGluZyA9IGZpbmRpbmdzW3Z1bG5JZF07XHJcbiAgICAgIGlmICghZmluZGluZykgcmV0dXJuO1xyXG5cclxuICAgICAgLy8gRXh0cmFjdCBzZXZlcml0eSBmcm9tIGZpbmRpbmdcclxuICAgICAgLy8gSlNPTiBtaWdodCBoYXZlIHNldmVyaXR5IGFzIFwiaGlnaFwiLCBcIm1lZGl1bVwiLCBcImxvd1wiIG9yIFwiQ0FUIElcIiwgXCJDQVQgSUlcIiwgXCJDQVQgSUlJXCJcclxuICAgICAgbGV0IHNldmVyaXR5OiAnaGlnaCcgfCAnbWVkaXVtJyB8ICdsb3cnID0gJ21lZGl1bSc7XHJcbiAgICAgIGNvbnN0IHNldlRleHQgPSAoZmluZGluZy5zZXZlcml0eSB8fCBmaW5kaW5nLmNhdCB8fCAnbWVkaXVtJykudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICBcclxuICAgICAgaWYgKHNldlRleHQuaW5jbHVkZXMoJ2hpZ2gnKSB8fCBzZXZUZXh0LmluY2x1ZGVzKCdjYXQgaScpIHx8IHNldlRleHQgPT09ICdpJyB8fCBzZXZUZXh0ID09PSAnMScpIHtcclxuICAgICAgICBzZXZlcml0eSA9ICdoaWdoJztcclxuICAgICAgfSBlbHNlIGlmIChzZXZUZXh0LmluY2x1ZGVzKCdsb3cnKSB8fCBzZXZUZXh0LmluY2x1ZGVzKCdjYXQgaWlpJykgfHwgc2V2VGV4dCA9PT0gJ2lpaScgfHwgc2V2VGV4dCA9PT0gJzMnKSB7XHJcbiAgICAgICAgc2V2ZXJpdHkgPSAnbG93JztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzZXZlcml0eSA9ICdtZWRpdW0nO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXF1aXJlbWVudHMucHVzaCh7XHJcbiAgICAgICAgdnVsbklkLFxyXG4gICAgICAgIHJ1bGVJZDogZmluZGluZy5ydWxlSWQgfHwgZmluZGluZy5ydWxlX2lkIHx8IGZpbmRpbmcucnVsZWlkIHx8IGAke3Z1bG5JZH0tcnVsZWAsXHJcbiAgICAgICAgc2V2ZXJpdHksXHJcbiAgICAgICAgdGl0bGU6IGZpbmRpbmcudGl0bGUgfHwgZmluZGluZy5ydWxlVGl0bGUgfHwgZmluZGluZy5ydWxldGl0bGUgfHwgYFJlcXVpcmVtZW50ICR7dnVsbklkfWAsXHJcbiAgICAgICAgZGVzY3JpcHRpb246IGZpbmRpbmcuZGlzY3Vzc2lvbiB8fCBmaW5kaW5nLmRlc2NyaXB0aW9uIHx8IGZpbmRpbmcudGl0bGUgfHwgJycsXHJcbiAgICAgICAgY2hlY2tUZXh0OiBmaW5kaW5nLmNoZWNrdGV4dCB8fCBmaW5kaW5nLmNoZWNrVGV4dCB8fCBmaW5kaW5nLmNoZWNrX3RleHQgfHwgZmluZGluZy5jaGVjayB8fCAnUmV2aWV3IHN5c3RlbSBjb25maWd1cmF0aW9uIHBlciBTVElHIGd1aWRhbmNlLicsXHJcbiAgICAgICAgZml4VGV4dDogZmluZGluZy5maXh0ZXh0IHx8IGZpbmRpbmcuZml4VGV4dCB8fCBmaW5kaW5nLmZpeF90ZXh0IHx8IGZpbmRpbmcuZml4IHx8ICdDb25maWd1cmUgc3lzdGVtIHBlciBTVElHIGd1aWRhbmNlLicsXHJcbiAgICAgICAgY2NpOiBmaW5kaW5nLmNjaSB8fCBmaW5kaW5nLmNjaXMgfHwgWydDQ0ktMDAwMzY2J10sXHJcbiAgICAgICAgbmlzdENvbnRyb2xzOiBmaW5kaW5nLm5pc3RDb250cm9scyB8fCBmaW5kaW5nLm5pc3QgfHwgW11cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyhg4pyFIFN1Y2Nlc3NmdWxseSBwYXJzZWQgJHtyZXF1aXJlbWVudHMubGVuZ3RofSByZXF1aXJlbWVudHMgZnJvbSBKU09OYCk7XHJcbiAgICBcclxuICAgIC8vIExvZyBzZXZlcml0eSBkaXN0cmlidXRpb25cclxuICAgIGNvbnN0IHNldmVyaXR5RGlzdDogUmVjb3JkPHN0cmluZywgbnVtYmVyPiA9IHt9O1xyXG4gICAgcmVxdWlyZW1lbnRzLmZvckVhY2gocmVxID0+IHtcclxuICAgICAgc2V2ZXJpdHlEaXN0W3JlcS5zZXZlcml0eV0gPSAoc2V2ZXJpdHlEaXN0W3JlcS5zZXZlcml0eV0gfHwgMCkgKyAxO1xyXG4gICAgfSk7XHJcbiAgICBjb25zb2xlLmxvZyhg8J+TiiBKU09OIFNldmVyaXR5IERpc3RyaWJ1dGlvbjpgLCBzZXZlcml0eURpc3QpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHN0aWdJZCxcclxuICAgICAgc3RpZ05hbWUsXHJcbiAgICAgIHZlcnNpb24sXHJcbiAgICAgIHJlbGVhc2VEYXRlLFxyXG4gICAgICByZXF1aXJlbWVudHMsXHJcbiAgICAgIHRvdGFsUmVxdWlyZW1lbnRzOiByZXF1aXJlbWVudHMubGVuZ3RoXHJcbiAgICB9O1xyXG5cclxuICB9IGNhdGNoIChlcnJvcjogYW55KSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBwYXJzaW5nIHN0aWd2aWV3ZXIuY29tIEpTT046JywgZXJyb3IpO1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gcGFyc2Ugc3RpZ3ZpZXdlci5jb20gSlNPTjogJHtlcnJvci5tZXNzYWdlfWApO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFBhcnNlIHN0aWd2aWV3ZXIuY29tIEhUTUwgdG8gZXh0cmFjdCBTVElHIHJlcXVpcmVtZW50c1xyXG4gKiBGZXRjaGVzIGZ1bGwgcmVxdWlyZW1lbnQgZGV0YWlscyBpbmNsdWRpbmcgY2hlY2sgYW5kIGZpeCB0ZXh0XHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBwYXJzZVN0aWdWaWV3ZXJIdG1sKGh0bWw6IHN0cmluZywgc3RpZ0lkOiBzdHJpbmcpOiBQcm9taXNlPE9taXQ8U3RpZ0ltcG9ydFJlc3VsdCwgJ3N1Y2Nlc3MnIHwgJ3NvdXJjZScgfCAnbWVzc2FnZSc+PiB7XHJcbiAgY29uc3QgcmVxdWlyZW1lbnRzOiBTdGlnUmVxdWlyZW1lbnRbXSA9IFtdO1xyXG5cclxuICB0cnkge1xyXG4gICAgLy8gRXh0cmFjdCBTVElHIG1ldGFkYXRhIGZyb20gcGFnZSB0aXRsZSBhbmQgaGVhZGVyc1xyXG4gICAgY29uc3QgdGl0bGVNYXRjaCA9IGh0bWwubWF0Y2goLzx0aXRsZT4oW148XSspPFxcL3RpdGxlPi9pKTtcclxuICAgIGNvbnN0IHN0aWdOYW1lID0gdGl0bGVNYXRjaCA/IHRpdGxlTWF0Y2hbMV0ucmVwbGFjZSgnIHwgU1RJR1ZpZXdlcicsICcnKS50cmltKCkgOiBzdGlnSWQ7XHJcblxyXG4gICAgLy8gRXh0cmFjdCB2ZXJzaW9uIGZyb20gcGFnZVxyXG4gICAgY29uc3QgdmVyc2lvbk1hdGNoID0gaHRtbC5tYXRjaCgvVmVyc2lvbls6XFxzXSsoW1Z2UnJcXGQuXSspL2kpIHx8IGh0bWwubWF0Y2goL2NsYXNzPVwiW15cIl0qdmVyc2lvblteXCJdKlwiW14+XSo+KFtePF0rKTwvaSk7XHJcbiAgICBjb25zdCB2ZXJzaW9uID0gdmVyc2lvbk1hdGNoID8gdmVyc2lvbk1hdGNoWzFdLnRyaW0oKSA6ICdVbmtub3duJztcclxuXHJcbiAgICAvLyBFeHRyYWN0IHJlbGVhc2UgZGF0ZVxyXG4gICAgY29uc3QgZGF0ZU1hdGNoID0gaHRtbC5tYXRjaCgvUmVsZWFzZVs6XFxzXSsoXFxkezEsMn1cXHMrXFx3K1xccytcXGR7NH0pL2kpIHx8IFxyXG4gICAgICAgICAgICAgICAgICAgICBodG1sLm1hdGNoKC9EYXRlWzpcXHNdKyhcXGR7NH0tXFxkezJ9LVxcZHsyfSkvaSkgfHxcclxuICAgICAgICAgICAgICAgICAgICAgaHRtbC5tYXRjaCgvKFxcZHs0fS1cXGR7Mn0tXFxkezJ9KS8pO1xyXG4gICAgY29uc3QgcmVsZWFzZURhdGUgPSBkYXRlTWF0Y2ggPyBkYXRlTWF0Y2hbMV0gOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyhg8J+TiyBQYXJzaW5nIFNUSUc6ICR7c3RpZ05hbWV9LCBWZXJzaW9uOiAke3ZlcnNpb259LCBSZWxlYXNlOiAke3JlbGVhc2VEYXRlfWApO1xyXG5cclxuICAgIC8vIE1ldGhvZCAxOiBFeHRyYWN0IGNvbXBsZXRlIHJlcXVpcmVtZW50IGVudHJpZXMgd2l0aCBhbGwgZGV0YWlsc1xyXG4gICAgLy8gc3RpZ3ZpZXdlci5jb20gaGFzIGxpbmtzIGxpa2U6IGhyZWY9XCIvc3RpZy97c3RpZ0lkfS9yZXF1aXJlbWVudC9WLSMjIyMjXCJcclxuICAgIC8vIFBhdHRlcm4gdG8gbWF0Y2ggZW50aXJlIHJlcXVpcmVtZW50IHNlY3Rpb25zIHdpdGggc2V2ZXJpdHkgaW5mb1xyXG4gICAgY29uc3QgcmVxU2VjdGlvblBhdHRlcm4gPSAvKD86Q0FUXFxzKyhJezEsM30pfHNldmVyaXR5W14+XSo/KGhpZ2h8bWVkaXVtfGxvdykpW15WXSooVi1cXGQrKVtePF0qPGFbXj5dKmhyZWY9XCJbXlwiXSpcXC9yZXF1aXJlbWVudFxcL1xcM1wiW14+XSo+KFtePF0rKTwvZ2k7XHJcbiAgICBsZXQgbWF0Y2g7XHJcbiAgICBjb25zdCBkZXRhaWxlZFJlcXM6IEFycmF5PHt2dWxuSWQ6IHN0cmluZywgc2V2ZXJpdHk6IHN0cmluZywgdGl0bGU6IHN0cmluZ30+ID0gW107XHJcbiAgICBcclxuICAgIHdoaWxlICgobWF0Y2ggPSByZXFTZWN0aW9uUGF0dGVybi5leGVjKGh0bWwpKSAhPT0gbnVsbCkge1xyXG4gICAgICBjb25zdCBzZXZlcml0eSA9IG1hdGNoWzFdIHx8IG1hdGNoWzJdOyAvLyBDQVQgSS9JSS9JSUkgb3IgaGlnaC9tZWRpdW0vbG93XHJcbiAgICAgIGNvbnN0IHZ1bG5JZCA9IG1hdGNoWzNdO1xyXG4gICAgICBjb25zdCB0aXRsZSA9IG1hdGNoWzRdLnRyaW0oKTtcclxuICAgICAgZGV0YWlsZWRSZXFzLnB1c2goeyB2dWxuSWQsIHNldmVyaXR5LCB0aXRsZSB9KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgY29uc29sZS5sb2coYPCflI0gTWV0aG9kIDE6IEZvdW5kICR7ZGV0YWlsZWRSZXFzLmxlbmd0aH0gcmVxdWlyZW1lbnRzIHdpdGggc2V2ZXJpdHkgaW5mb2ApO1xyXG5cclxuICAgIC8vIE1ldGhvZCAyOiBFeHRyYWN0IGZyb20gdGFibGUgcm93cyBpZiBhdmFpbGFibGVcclxuICAgIGNvbnN0IHRhYmxlUm93czogQXJyYXk8e3Z1bG5JZDogc3RyaW5nLCBzZXZlcml0eTogc3RyaW5nLCB0aXRsZTogc3RyaW5nfT4gPSBbXTtcclxuICAgIGNvbnN0IHJvd1BhdHRlcm4gPSAvPHRyW14+XSo+KFtcXHNcXFNdKj8pPFxcL3RyPi9naTtcclxuICAgIGxldCByb3dNYXRjaDtcclxuICAgIFxyXG4gICAgd2hpbGUgKChyb3dNYXRjaCA9IHJvd1BhdHRlcm4uZXhlYyhodG1sKSkgIT09IG51bGwpIHtcclxuICAgICAgY29uc3Qgcm93SHRtbCA9IHJvd01hdGNoWzFdO1xyXG4gICAgICBcclxuICAgICAgLy8gQ2hlY2sgaWYgdGhpcyByb3cgaGFzIGEgdnVsbiBJRFxyXG4gICAgICBjb25zdCB2dWxuTWF0Y2ggPSByb3dIdG1sLm1hdGNoKC8+KFYtXFxkKyk8Lyk7XHJcbiAgICAgIGlmICghdnVsbk1hdGNoKSBjb250aW51ZTtcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IHZ1bG5JZCA9IHZ1bG5NYXRjaFsxXTtcclxuICAgICAgXHJcbiAgICAgIC8vIEV4dHJhY3Qgc2V2ZXJpdHkgZnJvbSB0aGlzIHJvd1xyXG4gICAgICBjb25zdCBjYXRNYXRjaCA9IHJvd0h0bWwubWF0Y2goL0NBVFxccysoSXsxLDN9KS9pKTtcclxuICAgICAgY29uc3Qgc2V2TWF0Y2ggPSByb3dIdG1sLm1hdGNoKC8+KGhpZ2h8bWVkaXVtfGxvdyk8L2kpO1xyXG4gICAgICBjb25zdCBzZXZlcml0eSA9IGNhdE1hdGNoID8gY2F0TWF0Y2hbMV0gOiAoc2V2TWF0Y2ggPyBzZXZNYXRjaFsxXSA6ICdJSScpO1xyXG4gICAgICBcclxuICAgICAgLy8gRXh0cmFjdCB0aXRsZVxyXG4gICAgICBjb25zdCB0aXRsZU1hdGNoID0gcm93SHRtbC5tYXRjaCgvPGFbXj5dKmhyZWY9XCJbXlwiXSpcXC9yZXF1aXJlbWVudFxcL1teXCJdKlwiW14+XSo+KFtePF0rKTwvaSk7XHJcbiAgICAgIGNvbnN0IHRpdGxlID0gdGl0bGVNYXRjaCA/IHRpdGxlTWF0Y2hbMV0udHJpbSgpIDogYFJlcXVpcmVtZW50ICR7dnVsbklkfWA7XHJcbiAgICAgIFxyXG4gICAgICB0YWJsZVJvd3MucHVzaCh7IHZ1bG5JZCwgc2V2ZXJpdHksIHRpdGxlIH0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjb25zb2xlLmxvZyhg8J+UjSBNZXRob2QgMjogRm91bmQgJHt0YWJsZVJvd3MubGVuZ3RofSByZXF1aXJlbWVudHMgZnJvbSB0YWJsZSByb3dzYCk7XHJcblxyXG4gICAgLy8gTWV0aG9kIDM6IEZhbGxiYWNrIC0gZXh0cmFjdCBhbGwgVi0jIyMjIHdpdGggZGVmYXVsdCBkYXRhXHJcbiAgICBjb25zdCB2dWxuSWRQYXR0ZXJuID0gL1YtXFxkKy9nO1xyXG4gICAgY29uc3QgYWxsVnVsbklkcyA9IFsuLi5uZXcgU2V0KGh0bWwubWF0Y2godnVsbklkUGF0dGVybikgfHwgW10pXTtcclxuICAgIGNvbnNvbGUubG9nKGDwn5SNIE1ldGhvZCAzOiBGb3VuZCAke2FsbFZ1bG5JZHMubGVuZ3RofSB0b3RhbCBWLSMjIyMgcGF0dGVybnNgKTtcclxuXHJcbiAgICAvLyBVc2UgdGhlIG1ldGhvZCB0aGF0IGZvdW5kIHRoZSBtb3N0IHJlcXVpcmVtZW50c1xyXG4gICAgbGV0IHJlcURhdGE6IEFycmF5PHt2dWxuSWQ6IHN0cmluZywgc2V2ZXJpdHk6IHN0cmluZywgdGl0bGU6IHN0cmluZ30+ID0gW107XHJcbiAgICBcclxuICAgIGlmIChkZXRhaWxlZFJlcXMubGVuZ3RoID49IHRhYmxlUm93cy5sZW5ndGggJiYgZGV0YWlsZWRSZXFzLmxlbmd0aCA+IDApIHtcclxuICAgICAgcmVxRGF0YSA9IGRldGFpbGVkUmVxcztcclxuICAgICAgY29uc29sZS5sb2coYOKckyBVc2luZyBNZXRob2QgMTogJHtkZXRhaWxlZFJlcXMubGVuZ3RofSByZXF1aXJlbWVudHMgd2l0aCBzZXZlcml0eWApO1xyXG4gICAgfSBlbHNlIGlmICh0YWJsZVJvd3MubGVuZ3RoID4gMCkge1xyXG4gICAgICByZXFEYXRhID0gdGFibGVSb3dzO1xyXG4gICAgICBjb25zb2xlLmxvZyhg4pyTIFVzaW5nIE1ldGhvZCAyOiAke3RhYmxlUm93cy5sZW5ndGh9IHJlcXVpcmVtZW50cyBmcm9tIHRhYmxlc2ApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gRmFsbGJhY2s6IGNyZWF0ZSBiYXNpYyBlbnRyaWVzXHJcbiAgICAgIHJlcURhdGEgPSBhbGxWdWxuSWRzLm1hcCh2dWxuSWQgPT4gKHtcclxuICAgICAgICB2dWxuSWQsXHJcbiAgICAgICAgc2V2ZXJpdHk6ICdJSScsIC8vIGRlZmF1bHRcclxuICAgICAgICB0aXRsZTogYCR7c3RpZ05hbWV9IC0gJHt2dWxuSWR9YFxyXG4gICAgICB9KSk7XHJcbiAgICAgIGNvbnNvbGUubG9nKGDinJMgVXNpbmcgTWV0aG9kIDM6ICR7YWxsVnVsbklkcy5sZW5ndGh9IGJhc2ljIHJlcXVpcmVtZW50c2ApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnNvbGUubG9nKGDwn5OdIFByb2Nlc3NpbmcgJHtyZXFEYXRhLmxlbmd0aH0gcmVxdWlyZW1lbnRzLi4uYCk7XHJcblxyXG4gICAgbGV0IHJlcXVpcmVtZW50Q291bnQgPSAwO1xyXG4gICAgXHJcbiAgICBmb3IgKGNvbnN0IHJlcSBvZiByZXFEYXRhKSB7XHJcbiAgICAgIGNvbnN0IHsgdnVsbklkLCBzZXZlcml0eTogcmF3U2V2ZXJpdHksIHRpdGxlIH0gPSByZXE7XHJcbiAgICAgIFxyXG4gICAgICAvLyBFeHRyYWN0IFJ1bGUgSUQgaWYgYXZhaWxhYmxlXHJcbiAgICAgIGNvbnN0IHJ1bGVQYXR0ZXJuID0gbmV3IFJlZ0V4cChgJHt2dWxuSWR9W15TXSo/KFNWLVxcXFxkK3JcXFxcZCtfcnVsZSlgLCAnaScpO1xyXG4gICAgICBjb25zdCBydWxlTWF0Y2ggPSBodG1sLm1hdGNoKHJ1bGVQYXR0ZXJuKTtcclxuICAgICAgY29uc3QgcnVsZUlkID0gcnVsZU1hdGNoID8gcnVsZU1hdGNoWzFdIDogYCR7dnVsbklkfS1ydWxlYDtcclxuICAgICAgXHJcbiAgICAgIC8vIE5vcm1hbGl6ZSBzZXZlcml0eVxyXG4gICAgICBsZXQgc2V2ZXJpdHk6ICdoaWdoJyB8ICdtZWRpdW0nIHwgJ2xvdycgPSAnbWVkaXVtJztcclxuICAgICAgY29uc3Qgc2V2VGV4dCA9IHJhd1NldmVyaXR5LnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgIGlmIChzZXZUZXh0LmluY2x1ZGVzKCdpJykgJiYgIXNldlRleHQuaW5jbHVkZXMoJ2lpJykgfHwgc2V2VGV4dCA9PT0gJ2hpZ2gnIHx8IHNldlRleHQgPT09ICcxJykge1xyXG4gICAgICAgIHNldmVyaXR5ID0gJ2hpZ2gnO1xyXG4gICAgICB9IGVsc2UgaWYgKHNldlRleHQuaW5jbHVkZXMoJ2lpaScpIHx8IHNldlRleHQgPT09ICdsb3cnIHx8IHNldlRleHQgPT09ICczJykge1xyXG4gICAgICAgIHNldmVyaXR5ID0gJ2xvdyc7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2V2ZXJpdHkgPSAnbWVkaXVtJztcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8gRGVzY3JpcHRpb24gZGVmYXVsdHMgdG8gdGl0bGVcclxuICAgICAgY29uc3QgZGVzY3JpcHRpb24gPSB0aXRsZTtcclxuICAgICAgXHJcbiAgICAgIC8vIEV4dHJhY3QgQ0NJIHJlZmVyZW5jZXMgLSBzZWFyY2ggZm9yIHRoaXMgdnVsbklkIGluIEhUTUxcclxuICAgICAgY29uc3QgdnVsbkNvbnRleHQgPSBodG1sLnN1YnN0cmluZyhcclxuICAgICAgICBNYXRoLm1heCgwLCBodG1sLmluZGV4T2YodnVsbklkKSAtIDMwMCksXHJcbiAgICAgICAgTWF0aC5taW4oaHRtbC5sZW5ndGgsIGh0bWwuaW5kZXhPZih2dWxuSWQpICsgMzAwKVxyXG4gICAgICApO1xyXG4gICAgICBjb25zdCBjY2lNYXRjaGVzID0gdnVsbkNvbnRleHQubWF0Y2goL0NDSS1cXGQrL2cpO1xyXG4gICAgICBjb25zdCBjY2kgPSBjY2lNYXRjaGVzICYmIGNjaU1hdGNoZXMubGVuZ3RoID4gMCA/IFsuLi5uZXcgU2V0KGNjaU1hdGNoZXMpXSA6IFsnQ0NJLTAwMDM2NiddO1xyXG4gICAgICBcclxuICAgICAgLy8gRGVmYXVsdCBjaGVjayBhbmQgZml4IHRleHQgd2l0aCBub3RlIGFib3V0IGZ1bGwgZG9jdW1lbnRhdGlvblxyXG4gICAgICBjb25zdCBjaGVja1RleHQgPSBgUmV2aWV3IHRoZSBzeXN0ZW0gY29uZmlndXJhdGlvbiB0byB2ZXJpZnkgY29tcGxpYW5jZSB3aXRoICR7dnVsbklkfS4gUmVmZXIgdG8gdGhlIGZ1bGwgU1RJRyBkb2N1bWVudGF0aW9uIGZvciBkZXRhaWxlZCBjaGVjayBwcm9jZWR1cmVzLmA7XHJcbiAgICAgIGNvbnN0IGZpeFRleHQgPSBgQ29uZmlndXJlIHRoZSBzeXN0ZW0gdG8gbWVldCB0aGUgcmVxdWlyZW1lbnRzIHNwZWNpZmllZCBpbiAke3Z1bG5JZH0uIFJlZmVyIHRvIHRoZSBmdWxsIFNUSUcgZG9jdW1lbnRhdGlvbiBmb3IgZGV0YWlsZWQgZml4IHByb2NlZHVyZXMuYDtcclxuICAgICAgXHJcbiAgICAgIC8vIEV4dHJhY3QgTklTVCBjb250cm9scyBmcm9tIGNvbnRleHRcclxuICAgICAgY29uc3QgbmlzdE1hdGNoZXMgPSB2dWxuQ29udGV4dC5tYXRjaCgvKFtBLVpdezJ9LVxcZCsoPzpcXHMqXFwoW2EtejAtOV0rXFwpKT8pL2cpO1xyXG4gICAgICBjb25zdCBuaXN0Q29udHJvbHMgPSBuaXN0TWF0Y2hlcyA/IFsuLi5uZXcgU2V0KG5pc3RNYXRjaGVzKV0gOiBbXTtcclxuICAgICAgXHJcbiAgICAgIHJlcXVpcmVtZW50cy5wdXNoKHtcclxuICAgICAgICB2dWxuSWQsXHJcbiAgICAgICAgcnVsZUlkLFxyXG4gICAgICAgIHNldmVyaXR5LFxyXG4gICAgICAgIHRpdGxlLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uLFxyXG4gICAgICAgIGNoZWNrVGV4dCxcclxuICAgICAgICBmaXhUZXh0LFxyXG4gICAgICAgIGNjaSxcclxuICAgICAgICBuaXN0Q29udHJvbHNcclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICByZXF1aXJlbWVudENvdW50Kys7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc29sZS5sb2coYOKchSBTdWNjZXNzZnVsbHkgcGFyc2VkICR7cmVxdWlyZW1lbnRDb3VudH0gcmVxdWlyZW1lbnRzIGZyb20gSFRNTGApO1xyXG4gICAgXHJcbiAgICAvLyBMb2cgc2V2ZXJpdHkgZGlzdHJpYnV0aW9uXHJcbiAgICBjb25zdCBzZXZlcml0eURpc3Q6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4gPSB7fTtcclxuICAgIHJlcXVpcmVtZW50cy5mb3JFYWNoKHJlcSA9PiB7XHJcbiAgICAgIHNldmVyaXR5RGlzdFtyZXEuc2V2ZXJpdHldID0gKHNldmVyaXR5RGlzdFtyZXEuc2V2ZXJpdHldIHx8IDApICsgMTtcclxuICAgIH0pO1xyXG4gICAgY29uc29sZS5sb2coYPCfk4ogQVBJIFNldmVyaXR5IERpc3RyaWJ1dGlvbjpgLCBzZXZlcml0eURpc3QpO1xyXG5cclxuICAgIC8vIElmIHdlIGRpZG4ndCBmaW5kIGFueSByZXF1aXJlbWVudHMgaW4gdGFibGUgZm9ybWF0LCB0cnkgYWx0ZXJuYXRpdmUgcGFyc2luZ1xyXG4gICAgaWYgKHJlcXVpcmVtZW50cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgY29uc29sZS53YXJuKCfimqDvuI8gTm8gcmVxdWlyZW1lbnRzIGZvdW5kIGluIHRhYmxlIGZvcm1hdCwgdHJ5aW5nIGFsdGVybmF0aXZlIHBhcnNpbmcuLi4nKTtcclxuICAgICAgXHJcbiAgICAgIC8vIFRyeSB0byBmaW5kIGFsbCBWLSMjIyMgcGF0dGVybnMgYW5kIGNyZWF0ZSBiYXNpYyByZXF1aXJlbWVudHNcclxuICAgICAgY29uc3QgdnVsbklkUGF0dGVybiA9IC9WLVxcZCsvZztcclxuICAgICAgY29uc3QgdnVsbklkcyA9IFsuLi5uZXcgU2V0KGh0bWwubWF0Y2godnVsbklkUGF0dGVybikgfHwgW10pXTtcclxuICAgICAgXHJcbiAgICAgIHZ1bG5JZHMuZm9yRWFjaCgodnVsbklkLCBpbmRleCkgPT4ge1xyXG4gICAgICAgIHJlcXVpcmVtZW50cy5wdXNoKHtcclxuICAgICAgICAgIHZ1bG5JZCxcclxuICAgICAgICAgIHJ1bGVJZDogYCR7dnVsbklkfS1ydWxlYCxcclxuICAgICAgICAgIHNldmVyaXR5OiAnbWVkaXVtJyxcclxuICAgICAgICAgIHRpdGxlOiBgJHtzdGlnTmFtZX0gLSAke3Z1bG5JZH1gLFxyXG4gICAgICAgICAgZGVzY3JpcHRpb246IGBTZWN1cml0eSByZXF1aXJlbWVudCAke3Z1bG5JZH0gZnJvbSAke3N0aWdOYW1lfWAsXHJcbiAgICAgICAgICBjaGVja1RleHQ6ICdSZXZpZXcgdGhlIHN5c3RlbSBjb25maWd1cmF0aW9uIHRvIHZlcmlmeSBjb21wbGlhbmNlLiBEZXRhaWxlZCBjaGVjayBwcm9jZWR1cmUgYXZhaWxhYmxlIGluIHRoZSBmdWxsIFNUSUcgZG9jdW1lbnRhdGlvbi4nLFxyXG4gICAgICAgICAgZml4VGV4dDogJ0NvbmZpZ3VyZSB0aGUgc3lzdGVtIHRvIG1lZXQgdGhlIHNlY3VyaXR5IHJlcXVpcmVtZW50LiBEZXRhaWxlZCBmaXggcHJvY2VkdXJlIGF2YWlsYWJsZSBpbiB0aGUgZnVsbCBTVElHIGRvY3VtZW50YXRpb24uJyxcclxuICAgICAgICAgIGNjaTogWydDQ0ktMDAwMzY2J10sXHJcbiAgICAgICAgICBuaXN0Q29udHJvbHM6IFtdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgY29uc29sZS5sb2coYPCfk50gQ3JlYXRlZCAke3JlcXVpcmVtZW50cy5sZW5ndGh9IGJhc2ljIHJlcXVpcmVtZW50cyBmcm9tIFZ1bG4gSURzYCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgc3RpZ0lkLFxyXG4gICAgICBzdGlnTmFtZSxcclxuICAgICAgdmVyc2lvbixcclxuICAgICAgcmVsZWFzZURhdGUsXHJcbiAgICAgIHJlcXVpcmVtZW50cyxcclxuICAgICAgdG90YWxSZXF1aXJlbWVudHM6IHJlcXVpcmVtZW50cy5sZW5ndGhcclxuICAgIH07XHJcblxyXG4gIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHBhcnNpbmcgc3RpZ3ZpZXdlci5jb20gSFRNTDonLCBlcnJvcik7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBwYXJzZSBzdGlndmlld2VyLmNvbSBwYWdlOiAke2Vycm9yLm1lc3NhZ2V9YCk7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogUGFyc2UgWENDREYgWE1MIGZpbGUgdG8gZXh0cmFjdCBTVElHIHJlcXVpcmVtZW50c1xyXG4gKi9cclxuZnVuY3Rpb24gcGFyc2VYY2NkZlhtbCh4bWxDb250ZW50OiBzdHJpbmcsIGZpbGVOYW1lOiBzdHJpbmcpOiBPbWl0PFN0aWdJbXBvcnRSZXN1bHQsICdzdWNjZXNzJyB8ICdzb3VyY2UnIHwgJ21lc3NhZ2UnPiB7XHJcbiAgY29uc3QgcmVxdWlyZW1lbnRzOiBTdGlnUmVxdWlyZW1lbnRbXSA9IFtdO1xyXG5cclxuICB0cnkge1xyXG4gICAgLy8gRXh0cmFjdCBTVElHIElEIGZyb20gZmlsZW5hbWVcclxuICAgIGNvbnN0IHN0aWdJZCA9IGZpbGVOYW1lLnJlcGxhY2UoL1xcLnhtbHxcXC54Y2NkZi9naSwgJycpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXFxzKy9nLCAnXycpO1xyXG5cclxuICAgIC8vIFBhcnNlIFhNTCB1c2luZyByZWdleCAoc2ltcGxpZmllZCAtIGluIHByb2R1Y3Rpb24gdXNlIGEgcHJvcGVyIFhNTCBwYXJzZXIpXHJcbiAgICBcclxuICAgIC8vIEV4dHJhY3QgQmVuY2htYXJrIHRpdGxlXHJcbiAgICBjb25zdCB0aXRsZU1hdGNoID0geG1sQ29udGVudC5tYXRjaCgvPHRpdGxlW14+XSo+KFtePF0rKTxcXC90aXRsZT4vaSk7XHJcbiAgICBjb25zdCBzdGlnTmFtZSA9IHRpdGxlTWF0Y2ggPyB0aXRsZU1hdGNoWzFdLnRyaW0oKSA6IHN0aWdJZDtcclxuXHJcbiAgICAvLyBFeHRyYWN0IHZlcnNpb25cclxuICAgIGNvbnN0IHZlcnNpb25NYXRjaCA9IHhtbENvbnRlbnQubWF0Y2goLzx2ZXJzaW9uW14+XSo+KFtePF0rKTxcXC92ZXJzaW9uPi9pKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4bWxDb250ZW50Lm1hdGNoKC9WZXJzaW9uWzpcXHNdKyhbVnZSclxcZC5dKykvaSk7XHJcbiAgICBjb25zdCB2ZXJzaW9uID0gdmVyc2lvbk1hdGNoID8gdmVyc2lvbk1hdGNoWzFdIDogJ1Vua25vd24nO1xyXG5cclxuICAgIC8vIEV4dHJhY3QgcmVsZWFzZSBkYXRlXHJcbiAgICBjb25zdCBkYXRlTWF0Y2ggPSB4bWxDb250ZW50Lm1hdGNoKC9yZWxlYXNlLWRhdGVbXj5dKj4oW148XSspPC9pKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICB4bWxDb250ZW50Lm1hdGNoKC8oXFxkezEsMn1cXHMrXFx3K1xccytcXGR7NH0pLyk7XHJcbiAgICBjb25zdCByZWxlYXNlRGF0ZSA9IGRhdGVNYXRjaCA/IGRhdGVNYXRjaFsxXSA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdO1xyXG5cclxuICAgIC8vIEV4dHJhY3QgYWxsIEdyb3VwIGVsZW1lbnRzIChyZXF1aXJlbWVudHMpXHJcbiAgICBjb25zdCBncm91cFBhdHRlcm4gPSAvPEdyb3VwW14+XSppZD1cIihbXlwiXSspXCJbXj5dKj4oW1xcc1xcU10qPyk8XFwvR3JvdXA+L2dpO1xyXG4gICAgbGV0IGdyb3VwTWF0Y2g7XHJcblxyXG4gICAgd2hpbGUgKChncm91cE1hdGNoID0gZ3JvdXBQYXR0ZXJuLmV4ZWMoeG1sQ29udGVudCkpICE9PSBudWxsKSB7XHJcbiAgICAgIGNvbnN0IGdyb3VwSWQgPSBncm91cE1hdGNoWzFdO1xyXG4gICAgICBjb25zdCBncm91cENvbnRlbnQgPSBncm91cE1hdGNoWzJdO1xyXG5cclxuICAgICAgLy8gRXh0cmFjdCBSdWxlIGZyb20gR3JvdXBcclxuICAgICAgY29uc3QgcnVsZU1hdGNoID0gZ3JvdXBDb250ZW50Lm1hdGNoKC88UnVsZVtePl0qaWQ9XCIoW15cIl0rKVwiW14+XSpzZXZlcml0eT1cIihbXlwiXSspXCJbXj5dKj4oW1xcc1xcU10qPyk8XFwvUnVsZT4vaSk7XHJcbiAgICAgIFxyXG4gICAgICBpZiAocnVsZU1hdGNoKSB7XHJcbiAgICAgICAgY29uc3QgcnVsZUlkID0gcnVsZU1hdGNoWzFdO1xyXG4gICAgICAgIGNvbnN0IHNldmVyaXR5ID0gcnVsZU1hdGNoWzJdLnRvTG93ZXJDYXNlKCkgYXMgJ2hpZ2gnIHwgJ21lZGl1bScgfCAnbG93JztcclxuICAgICAgICBjb25zdCBydWxlQ29udGVudCA9IHJ1bGVNYXRjaFszXTtcclxuXHJcbiAgICAgICAgLy8gRXh0cmFjdCB0aXRsZVxyXG4gICAgICAgIGNvbnN0IHRpdGxlTWF0Y2ggPSBydWxlQ29udGVudC5tYXRjaCgvPHRpdGxlW14+XSo+KFtePF0rKTxcXC90aXRsZT4vaSk7XHJcbiAgICAgICAgY29uc3QgdGl0bGUgPSB0aXRsZU1hdGNoID8gdGl0bGVNYXRjaFsxXS50cmltKCkgOiBgUmVxdWlyZW1lbnQgJHtncm91cElkfWA7XHJcblxyXG4gICAgICAgIC8vIEV4dHJhY3QgZGVzY3JpcHRpb25cclxuICAgICAgICBjb25zdCBkZXNjTWF0Y2ggPSBydWxlQ29udGVudC5tYXRjaCgvPGRlc2NyaXB0aW9uW14+XSo+KFtcXHNcXFNdKj8pPFxcL2Rlc2NyaXB0aW9uPi9pKTtcclxuICAgICAgICBjb25zdCBkZXNjcmlwdGlvbiA9IGRlc2NNYXRjaCA/IHN0cmlwSHRtbChkZXNjTWF0Y2hbMV0pIDogJyc7XHJcblxyXG4gICAgICAgIC8vIEV4dHJhY3QgY2hlY2sgdGV4dFxyXG4gICAgICAgIGNvbnN0IGNoZWNrTWF0Y2ggPSBydWxlQ29udGVudC5tYXRjaCgvPGNoZWNrLWNvbnRlbnRbXj5dKj4oW1xcc1xcU10qPyk8XFwvY2hlY2stY29udGVudD4vaSk7XHJcbiAgICAgICAgY29uc3QgY2hlY2tUZXh0ID0gY2hlY2tNYXRjaCA/IHN0cmlwSHRtbChjaGVja01hdGNoWzFdKSA6ICdObyBjaGVjayBwcm9jZWR1cmUgcHJvdmlkZWQnO1xyXG5cclxuICAgICAgICAvLyBFeHRyYWN0IGZpeCB0ZXh0XHJcbiAgICAgICAgY29uc3QgZml4TWF0Y2ggPSBydWxlQ29udGVudC5tYXRjaCgvPGZpeHRleHRbXj5dKj4oW1xcc1xcU10qPyk8XFwvZml4dGV4dD4vaSk7XHJcbiAgICAgICAgY29uc3QgZml4VGV4dCA9IGZpeE1hdGNoID8gc3RyaXBIdG1sKGZpeE1hdGNoWzFdKSA6ICdObyBmaXggcHJvY2VkdXJlIHByb3ZpZGVkJztcclxuXHJcbiAgICAgICAgLy8gRXh0cmFjdCBDQ0kgcmVmZXJlbmNlc1xyXG4gICAgICAgIGNvbnN0IGNjaVBhdHRlcm4gPSAvPGlkZW50W14+XSpzeXN0ZW09XCJodHRwOlxcL1xcL2N5YmVyXFwubWlsXFwvbGVnYWN5XFwvY2NpXCJbXj5dKj4oW148XSspPFxcL2lkZW50Pi9naTtcclxuICAgICAgICBjb25zdCBjY2k6IHN0cmluZ1tdID0gW107XHJcbiAgICAgICAgbGV0IGNjaU1hdGNoO1xyXG4gICAgICAgIHdoaWxlICgoY2NpTWF0Y2ggPSBjY2lQYXR0ZXJuLmV4ZWMocnVsZUNvbnRlbnQpKSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgY2NpLnB1c2goY2NpTWF0Y2hbMV0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gRXh0cmFjdCBOSVNUIGNvbnRyb2xzXHJcbiAgICAgICAgY29uc3QgbmlzdFBhdHRlcm4gPSAvPHJlZmVyZW5jZVtePl0qPihbXFxzXFxTXSo/KU5JU1RbXjxdKihbQS1aXXsyfS1cXGQrKD86XFxzKlxcKFxcZCtcXCkpPyg/OlxccypbYS16XSk/KVtePF0qKFtcXHNcXFNdKj8pPFxcL3JlZmVyZW5jZT4vZ2k7XHJcbiAgICAgICAgY29uc3QgbmlzdENvbnRyb2xzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgICAgIGxldCBuaXN0TWF0Y2g7XHJcbiAgICAgICAgd2hpbGUgKChuaXN0TWF0Y2ggPSBuaXN0UGF0dGVybi5leGVjKHJ1bGVDb250ZW50KSkgIT09IG51bGwpIHtcclxuICAgICAgICAgIGNvbnN0IGNvbnRyb2wgPSBuaXN0TWF0Y2hbMl0udHJpbSgpO1xyXG4gICAgICAgICAgaWYgKGNvbnRyb2wgJiYgIW5pc3RDb250cm9scy5pbmNsdWRlcyhjb250cm9sKSkge1xyXG4gICAgICAgICAgICBuaXN0Q29udHJvbHMucHVzaChjb250cm9sKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlcXVpcmVtZW50cy5wdXNoKHtcclxuICAgICAgICAgIHZ1bG5JZDogZ3JvdXBJZCxcclxuICAgICAgICAgIHJ1bGVJZCxcclxuICAgICAgICAgIHNldmVyaXR5LFxyXG4gICAgICAgICAgdGl0bGUsXHJcbiAgICAgICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24uc3Vic3RyaW5nKDAsIDUwMCksIC8vIExpbWl0IGRlc2NyaXB0aW9uIGxlbmd0aFxyXG4gICAgICAgICAgY2hlY2tUZXh0OiBjaGVja1RleHQuc3Vic3RyaW5nKDAsIDEwMDApLFxyXG4gICAgICAgICAgZml4VGV4dDogZml4VGV4dC5zdWJzdHJpbmcoMCwgMTAwMCksXHJcbiAgICAgICAgICBjY2k6IGNjaS5sZW5ndGggPiAwID8gY2NpIDogWydDQ0ktMDAwMDAwJ10sXHJcbiAgICAgICAgICBuaXN0Q29udHJvbHM6IG5pc3RDb250cm9scy5sZW5ndGggPiAwID8gbmlzdENvbnRyb2xzIDogWydBQy0xJ11cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChyZXF1aXJlbWVudHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gcmVxdWlyZW1lbnRzIGZvdW5kIGluIFhNTC4gVGhlIGZpbGUgbWF5IG5vdCBiZSBhIHZhbGlkIFhDQ0RGIFNUSUcgZmlsZS4nKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBzdGlnSWQsXHJcbiAgICAgIHN0aWdOYW1lLFxyXG4gICAgICB2ZXJzaW9uLFxyXG4gICAgICByZWxlYXNlRGF0ZSxcclxuICAgICAgcmVxdWlyZW1lbnRzLFxyXG4gICAgICB0b3RhbFJlcXVpcmVtZW50czogcmVxdWlyZW1lbnRzLmxlbmd0aFxyXG4gICAgfTtcclxuXHJcbiAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgcGFyc2luZyBYQ0NERiBYTUw6JywgZXJyb3IpO1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gcGFyc2UgWENDREYgWE1MOiAke2Vycm9yLm1lc3NhZ2V9YCk7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogU3RyaXAgSFRNTCB0YWdzIGFuZCBkZWNvZGUgZW50aXRpZXNcclxuICovXHJcbmZ1bmN0aW9uIHN0cmlwSHRtbChodG1sOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gIHJldHVybiBodG1sXHJcbiAgICAucmVwbGFjZSgvPFtePl0rPi9nLCAnJykgLy8gUmVtb3ZlIEhUTUwgdGFnc1xyXG4gICAgLnJlcGxhY2UoLyZsdDsvZywgJzwnKVxyXG4gICAgLnJlcGxhY2UoLyZndDsvZywgJz4nKVxyXG4gICAgLnJlcGxhY2UoLyZhbXA7L2csICcmJylcclxuICAgIC5yZXBsYWNlKC8mcXVvdDsvZywgJ1wiJylcclxuICAgIC5yZXBsYWNlKC8mIzM5Oy9nLCBcIidcIilcclxuICAgIC5yZXBsYWNlKC8mbmJzcDsvZywgJyAnKVxyXG4gICAgLnJlcGxhY2UoL1xccysvZywgJyAnKSAvLyBOb3JtYWxpemUgd2hpdGVzcGFjZVxyXG4gICAgLnRyaW0oKTtcclxufVxyXG4iXSwibmFtZXMiOlsiTmV4dFJlc3BvbnNlIiwiaHR0cHMiLCJHRVQiLCJyZXF1ZXN0Iiwic2VhcmNoUGFyYW1zIiwiVVJMIiwidXJsIiwic3RpZ0lkIiwiZ2V0IiwianNvbiIsImVycm9yIiwic3RhdHVzIiwiY29uc29sZSIsImxvZyIsImpzb25VcmwiLCJodG1sVXJsIiwiYWdlbnQiLCJBZ2VudCIsInJlamVjdFVuYXV0aG9yaXplZCIsImpzb25SZXNwb25zZSIsImZldGNoIiwiaGVhZGVycyIsInNpZ25hbCIsIkFib3J0U2lnbmFsIiwidGltZW91dCIsIm9rIiwianNvbkRhdGEiLCJzdGlnRGF0YSIsInBhcnNlU3RpZ1ZpZXdlckpzb24iLCJyZXF1aXJlbWVudHMiLCJsZW5ndGgiLCJzdWNjZXNzIiwic291cmNlIiwibWVzc2FnZSIsImpzb25FcnJvciIsInJlc3BvbnNlIiwiRXJyb3IiLCJzdGF0dXNUZXh0IiwiaHRtbCIsInRleHQiLCJwYXJzZVN0aWdWaWV3ZXJIdG1sIiwiZmV0Y2hFcnJvciIsImluc3RydWN0aW9ucyIsInN0ZXAxIiwic3RlcDIiLCJzdGVwMyIsIlBPU1QiLCJmb3JtRGF0YSIsImZpbGUiLCJmaWxlTmFtZSIsIm5hbWUiLCJ0b0xvd2VyQ2FzZSIsImVuZHNXaXRoIiwieG1sQ29udGVudCIsInBhcnNlWGNjZGZYbWwiLCJmZXRjaFJlcXVpcmVtZW50RGV0YWlscyIsInZ1bG5JZCIsImNoZWNrTWF0Y2giLCJtYXRjaCIsImNoZWNrVGV4dCIsInJlcGxhY2UiLCJ0cmltIiwiZml4TWF0Y2giLCJmaXhUZXh0Iiwic3RpZyIsInN0aWdOYW1lIiwidGl0bGUiLCJ2ZXJzaW9uIiwicmVsZWFzZURhdGUiLCJkYXRlIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwic3BsaXQiLCJmaW5kaW5ncyIsInZ1bG5JZHMiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImZpbmRpbmciLCJzZXZlcml0eSIsInNldlRleHQiLCJjYXQiLCJ0b1N0cmluZyIsImluY2x1ZGVzIiwicHVzaCIsInJ1bGVJZCIsInJ1bGVfaWQiLCJydWxlaWQiLCJydWxlVGl0bGUiLCJydWxldGl0bGUiLCJkZXNjcmlwdGlvbiIsImRpc2N1c3Npb24iLCJjaGVja3RleHQiLCJjaGVja190ZXh0IiwiY2hlY2siLCJmaXh0ZXh0IiwiZml4X3RleHQiLCJmaXgiLCJjY2kiLCJjY2lzIiwibmlzdENvbnRyb2xzIiwibmlzdCIsInNldmVyaXR5RGlzdCIsInJlcSIsInRvdGFsUmVxdWlyZW1lbnRzIiwidGl0bGVNYXRjaCIsInZlcnNpb25NYXRjaCIsImRhdGVNYXRjaCIsInJlcVNlY3Rpb25QYXR0ZXJuIiwiZGV0YWlsZWRSZXFzIiwiZXhlYyIsInRhYmxlUm93cyIsInJvd1BhdHRlcm4iLCJyb3dNYXRjaCIsInJvd0h0bWwiLCJ2dWxuTWF0Y2giLCJjYXRNYXRjaCIsInNldk1hdGNoIiwidnVsbklkUGF0dGVybiIsImFsbFZ1bG5JZHMiLCJTZXQiLCJyZXFEYXRhIiwibWFwIiwicmVxdWlyZW1lbnRDb3VudCIsInJhd1NldmVyaXR5IiwicnVsZVBhdHRlcm4iLCJSZWdFeHAiLCJydWxlTWF0Y2giLCJ2dWxuQ29udGV4dCIsInN1YnN0cmluZyIsIk1hdGgiLCJtYXgiLCJpbmRleE9mIiwibWluIiwiY2NpTWF0Y2hlcyIsIm5pc3RNYXRjaGVzIiwid2FybiIsImluZGV4IiwiZ3JvdXBQYXR0ZXJuIiwiZ3JvdXBNYXRjaCIsImdyb3VwSWQiLCJncm91cENvbnRlbnQiLCJydWxlQ29udGVudCIsImRlc2NNYXRjaCIsInN0cmlwSHRtbCIsImNjaVBhdHRlcm4iLCJjY2lNYXRjaCIsIm5pc3RQYXR0ZXJuIiwibmlzdE1hdGNoIiwiY29udHJvbCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./app/api/import-stig/route.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fimport-stig%2Froute&page=%2Fapi%2Fimport-stig%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fimport-stig%2Froute.ts&appDir=C%3A%5CUsers%5Cronni%5COneDrive%5CDesktop%5CProjects%5CSRTM-tool%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cronni%5COneDrive%5CDesktop%5CProjects%5CSRTM-tool&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fimport-stig%2Froute&page=%2Fapi%2Fimport-stig%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fimport-stig%2Froute.ts&appDir=C%3A%5CUsers%5Cronni%5COneDrive%5CDesktop%5CProjects%5CSRTM-tool%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cronni%5COneDrive%5CDesktop%5CProjects%5CSRTM-tool&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var C_Users_ronni_OneDrive_Desktop_Projects_SRTM_tool_app_api_import_stig_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./app/api/import-stig/route.ts */ \"(rsc)/./app/api/import-stig/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/import-stig/route\",\n        pathname: \"/api/import-stig\",\n        filename: \"route\",\n        bundlePath: \"app/api/import-stig/route\"\n    },\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || '',\n    resolvedPagePath: \"C:\\\\Users\\\\ronni\\\\OneDrive\\\\Desktop\\\\Projects\\\\SRTM-tool\\\\app\\\\api\\\\import-stig\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_ronni_OneDrive_Desktop_Projects_SRTM_tool_app_api_import_stig_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/import-stig/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = false;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        if (!(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fimport-stig%2Froute&page=%2Fapi%2Fimport-stig%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fimport-stig%2Froute.ts&appDir=C%3A%5CUsers%5Cronni%5COneDrive%5CDesktop%5CProjects%5CSRTM-tool%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cronni%5COneDrive%5CDesktop%5CProjects%5CSRTM-tool&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/server/app-render/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fimport-stig%2Froute&page=%2Fapi%2Fimport-stig%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fimport-stig%2Froute.ts&appDir=C%3A%5CUsers%5Cronni%5COneDrive%5CDesktop%5CProjects%5CSRTM-tool%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cronni%5COneDrive%5CDesktop%5CProjects%5CSRTM-tool&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();